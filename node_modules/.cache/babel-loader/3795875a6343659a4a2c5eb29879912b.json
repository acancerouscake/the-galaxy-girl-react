{"ast":null,"code":"/*!\n * lightgallery | 2.3.0 | October 28th 2021\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nvar zoomSettings = {\n  scale: 1,\n  zoom: true,\n  actualSize: true,\n  showZoomInOutIcons: false,\n  actualSizeIcons: {\n    zoomIn: 'lg-zoom-in',\n    zoomOut: 'lg-zoom-out'\n  },\n  enableZoomAfter: 300\n};\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */\n\nvar lGEvents = {\n  afterAppendSlide: 'lgAfterAppendSlide',\n  init: 'lgInit',\n  hasVideo: 'lgHasVideo',\n  containerResize: 'lgContainerResize',\n  updateSlides: 'lgUpdateSlides',\n  afterAppendSubHtml: 'lgAfterAppendSubHtml',\n  beforeOpen: 'lgBeforeOpen',\n  afterOpen: 'lgAfterOpen',\n  slideItemLoad: 'lgSlideItemLoad',\n  beforeSlide: 'lgBeforeSlide',\n  afterSlide: 'lgAfterSlide',\n  posterClick: 'lgPosterClick',\n  dragStart: 'lgDragStart',\n  dragMove: 'lgDragMove',\n  dragEnd: 'lgDragEnd',\n  beforeNextSlide: 'lgBeforeNextSlide',\n  beforePrevSlide: 'lgBeforePrevSlide',\n  beforeClose: 'lgBeforeClose',\n  afterClose: 'lgAfterClose',\n  rotateLeft: 'lgRotateLeft',\n  rotateRight: 'lgRotateRight',\n  flipHorizontal: 'lgFlipHorizontal',\n  flipVertical: 'lgFlipVertical'\n};\n\nvar Zoom =\n/** @class */\nfunction () {\n  function Zoom(instance, $LG) {\n    // get lightGallery core plugin instance\n    this.core = instance;\n    this.$LG = $LG;\n    this.settings = _assign(_assign({}, zoomSettings), this.core.settings);\n    return this;\n  } // Append Zoom controls. Actual size, Zoom-in, Zoom-out\n\n\n  Zoom.prototype.buildTemplates = function () {\n    var zoomIcons = this.settings.showZoomInOutIcons ? \"<button id=\\\"\" + this.core.getIdName('lg-zoom-in') + \"\\\" type=\\\"button\\\" aria-label=\\\"Zoom in\\\" class=\\\"lg-zoom-in lg-icon\\\"></button><button id=\\\"\" + this.core.getIdName('lg-zoom-out') + \"\\\" type=\\\"button\\\" aria-label=\\\"Zoom out\\\" class=\\\"lg-zoom-out lg-icon\\\"></button>\" : '';\n\n    if (this.settings.actualSize) {\n      zoomIcons += \"<button id=\\\"\" + this.core.getIdName('lg-actual-size') + \"\\\" type=\\\"button\\\" aria-label=\\\"View actual size\\\" class=\\\"\" + this.settings.actualSizeIcons.zoomIn + \" lg-icon\\\"></button>\";\n    }\n\n    this.core.outer.addClass('lg-use-transition-for-zoom');\n    this.core.$toolbar.first().append(zoomIcons);\n  };\n  /**\r\n   * @desc Enable zoom option only once the image is completely loaded\r\n   * If zoomFromOrigin is true, Zoom is enabled once the dummy image has been inserted\r\n   *\r\n   * Zoom styles are defined under lg-zoomable CSS class.\r\n   */\n\n\n  Zoom.prototype.enableZoom = function (event) {\n    var _this = this; // delay will be 0 except first time\n\n\n    var _speed = this.settings.enableZoomAfter + event.detail.delay; // set _speed value 0 if gallery opened from direct url and if it is first slide\n\n\n    if (this.$LG('body').first().hasClass('lg-from-hash') && event.detail.delay) {\n      // will execute only once\n      _speed = 0;\n    } else {\n      // Remove lg-from-hash to enable starting animation.\n      this.$LG('body').first().removeClass('lg-from-hash');\n    }\n\n    this.zoomableTimeout = setTimeout(function () {\n      if (!_this.isImageSlide()) {\n        return;\n      }\n\n      _this.core.getSlideItem(event.detail.index).addClass('lg-zoomable');\n\n      if (event.detail.index === _this.core.index) {\n        _this.setZoomEssentials();\n      }\n    }, _speed + 30);\n  };\n\n  Zoom.prototype.enableZoomOnSlideItemLoad = function () {\n    // Add zoomable class\n    this.core.LGel.on(lGEvents.slideItemLoad + \".zoom\", this.enableZoom.bind(this));\n  };\n\n  Zoom.prototype.getModifier = function (rotateValue, axis, el) {\n    var originalRotate = rotateValue;\n    rotateValue = Math.abs(rotateValue);\n    var transformValues = this.getCurrentTransform(el);\n\n    if (!transformValues) {\n      return 1;\n    }\n\n    var modifier = 1;\n\n    if (axis === 'X') {\n      var flipHorizontalValue = Math.sign(parseFloat(transformValues[0]));\n\n      if (rotateValue === 0 || rotateValue === 180) {\n        modifier = 1;\n      } else if (rotateValue === 90) {\n        if (originalRotate === -90 && flipHorizontalValue === 1 || originalRotate === 90 && flipHorizontalValue === -1) {\n          modifier = -1;\n        } else {\n          modifier = 1;\n        }\n      }\n\n      modifier = modifier * flipHorizontalValue;\n    } else {\n      var flipVerticalValue = Math.sign(parseFloat(transformValues[3]));\n\n      if (rotateValue === 0 || rotateValue === 180) {\n        modifier = 1;\n      } else if (rotateValue === 90) {\n        var sinX = parseFloat(transformValues[1]);\n        var sinMinusX = parseFloat(transformValues[2]);\n        modifier = Math.sign(sinX * sinMinusX * originalRotate * flipVerticalValue);\n      }\n\n      modifier = modifier * flipVerticalValue;\n    }\n\n    return modifier;\n  };\n\n  Zoom.prototype.getImageSize = function ($image, rotateValue, axis) {\n    var imageSizes = {\n      y: 'offsetHeight',\n      x: 'offsetWidth'\n    };\n\n    if (Math.abs(rotateValue) === 90) {\n      // Swap axis\n      if (axis === 'x') {\n        axis = 'y';\n      } else {\n        axis = 'x';\n      }\n    }\n\n    return $image[imageSizes[axis]];\n  };\n\n  Zoom.prototype.getDragCords = function (e, rotateValue) {\n    if (rotateValue === 90) {\n      return {\n        x: e.pageY,\n        y: e.pageX\n      };\n    } else {\n      return {\n        x: e.pageX,\n        y: e.pageY\n      };\n    }\n  };\n\n  Zoom.prototype.getSwipeCords = function (e, rotateValue) {\n    var x = e.targetTouches[0].pageX;\n    var y = e.targetTouches[0].pageY;\n\n    if (rotateValue === 90) {\n      return {\n        x: y,\n        y: x\n      };\n    } else {\n      return {\n        x: x,\n        y: y\n      };\n    }\n  };\n\n  Zoom.prototype.getDragAllowedAxises = function (rotateValue, scale) {\n    scale = scale || this.scale || 1;\n    var allowY = this.imageYSize * scale > this.containerRect.height;\n    var allowX = this.imageXSize * scale > this.containerRect.width;\n\n    if (rotateValue === 90) {\n      return {\n        allowX: allowY,\n        allowY: allowX\n      };\n    } else {\n      return {\n        allowX: allowX,\n        allowY: allowY\n      };\n    }\n  };\n  /**\r\n   *\r\n   * @param {Element} el\r\n   * @return matrix(cos(X), sin(X), -sin(X), cos(X), 0, 0);\r\n   * Get the current transform value\r\n   */\n\n\n  Zoom.prototype.getCurrentTransform = function (el) {\n    if (!el) {\n      return;\n    }\n\n    var st = window.getComputedStyle(el, null);\n    var tm = st.getPropertyValue('-webkit-transform') || st.getPropertyValue('-moz-transform') || st.getPropertyValue('-ms-transform') || st.getPropertyValue('-o-transform') || st.getPropertyValue('transform') || 'none';\n\n    if (tm !== 'none') {\n      return tm.split('(')[1].split(')')[0].split(',');\n    }\n\n    return;\n  };\n\n  Zoom.prototype.getCurrentRotation = function (el) {\n    if (!el) {\n      return 0;\n    }\n\n    var values = this.getCurrentTransform(el);\n\n    if (values) {\n      return Math.round(Math.atan2(parseFloat(values[1]), parseFloat(values[0])) * (180 / Math.PI)); // If you want rotate in 360\n      //return (angle < 0 ? angle + 360 : angle);\n    }\n\n    return 0;\n  };\n\n  Zoom.prototype.setZoomEssentials = function () {\n    var $image = this.core.getSlideItem(this.core.index).find('.lg-image').first();\n    var rotateEl = this.core.getSlideItem(this.core.index).find('.lg-img-rotate').first().get();\n    this.rotateValue = this.getCurrentRotation(rotateEl);\n    this.imageYSize = this.getImageSize($image.get(), this.rotateValue, 'y');\n    this.imageXSize = this.getImageSize($image.get(), this.rotateValue, 'x');\n    this.containerRect = this.core.outer.get().getBoundingClientRect();\n    this.modifierX = this.getModifier(this.rotateValue, 'X', rotateEl);\n    this.modifierY = this.getModifier(this.rotateValue, 'Y', rotateEl);\n  };\n  /**\r\n   * @desc Image zoom\r\n   * Translate the wrap and scale the image to get better user experience\r\n   *\r\n   * @param {String} scale - Zoom decrement/increment value\r\n   */\n\n\n  Zoom.prototype.zoomImage = function (scale) {\n    // Find offset manually to avoid issue after zoom\n    var offsetX = (this.containerRect.width - this.imageXSize) / 2 + this.containerRect.left;\n    var _a = this.core.mediaContainerPosition,\n        top = _a.top,\n        bottom = _a.bottom;\n    var topBottomSpacing = Math.abs(top - bottom) / 2;\n    var offsetY = (this.containerRect.height - this.imageYSize - topBottomSpacing * this.modifierX) / 2 + this.scrollTop + this.containerRect.top;\n    var originalX;\n    var originalY;\n\n    if (scale === 1) {\n      this.positionChanged = false;\n    }\n\n    var dragAllowedAxises = this.getDragAllowedAxises(Math.abs(this.rotateValue), scale);\n    var allowY = dragAllowedAxises.allowY,\n        allowX = dragAllowedAxises.allowX;\n\n    if (this.positionChanged) {\n      originalX = this.left / (this.scale - 1);\n      originalY = this.top / (this.scale - 1);\n      this.pageX = Math.abs(originalX) + offsetX;\n      this.pageY = Math.abs(originalY) + offsetY;\n      this.positionChanged = false;\n    }\n\n    var possibleSwipeCords = this.getPossibleSwipeDragCords(this.rotateValue, scale);\n\n    var _x = offsetX - this.pageX;\n\n    var _y = offsetY - this.pageY;\n\n    var x = (scale - 1) * _x;\n    var y = (scale - 1) * _y;\n\n    if (allowX) {\n      if (this.isBeyondPossibleLeft(x, possibleSwipeCords.minX)) {\n        x = possibleSwipeCords.minX;\n      } else if (this.isBeyondPossibleRight(x, possibleSwipeCords.maxX)) {\n        x = possibleSwipeCords.maxX;\n      }\n    } else {\n      if (scale > 1) {\n        if (x < possibleSwipeCords.minX) {\n          x = possibleSwipeCords.minX;\n        } else if (x > possibleSwipeCords.maxX) {\n          x = possibleSwipeCords.maxX;\n        }\n      }\n    }\n\n    if (allowY) {\n      if (this.isBeyondPossibleTop(y, possibleSwipeCords.minY)) {\n        y = possibleSwipeCords.minY;\n      } else if (this.isBeyondPossibleBottom(y, possibleSwipeCords.maxY)) {\n        y = possibleSwipeCords.maxY;\n      }\n    } else {\n      // If the translate value based on index of beyond the viewport, utilize the available space to prevent image being cut out\n      if (scale > 1) {\n        //If image goes beyond viewport top, use the minim possible translate value\n        if (y < possibleSwipeCords.minY) {\n          y = possibleSwipeCords.minY;\n        } else if (y > possibleSwipeCords.maxY) {\n          y = possibleSwipeCords.maxY;\n        }\n      }\n    }\n\n    this.setZoomStyles({\n      x: x,\n      y: y,\n      scale: scale\n    });\n  };\n  /**\r\n   * @desc apply scale3d to image and translate to image wrap\r\n   * @param {style} X,Y and scale\r\n   */\n\n\n  Zoom.prototype.setZoomStyles = function (style) {\n    var $image = this.core.getSlideItem(this.core.index).find('.lg-image').first();\n    var $dummyImage = this.core.outer.find('.lg-current .lg-dummy-img').first();\n    var $imageWrap = $image.parent();\n    this.scale = style.scale;\n    $image.css('transform', 'scale3d(' + style.scale + ', ' + style.scale + ', 1)');\n    $dummyImage.css('transform', 'scale3d(' + style.scale + ', ' + style.scale + ', 1)');\n    var transform = 'translate3d(' + style.x + 'px, ' + style.y + 'px, 0)';\n    $imageWrap.css('transform', transform);\n    this.left = style.x;\n    this.top = style.y;\n  };\n  /**\r\n   * @param index - Index of the current slide\r\n   * @param event - event will be available only if the function is called on clicking/taping the imags\r\n   */\n\n\n  Zoom.prototype.setActualSize = function (index, event) {\n    var _this = this; // Allow zoom only on image\n\n\n    if (!this.isImageSlide() || this.core.outer.hasClass('lg-first-slide-loading')) {\n      return;\n    }\n\n    var scale = this.getCurrentImageActualSizeScale();\n\n    if (this.core.outer.hasClass('lg-zoomed')) {\n      this.scale = 1;\n    } else {\n      this.scale = this.getScale(scale);\n    }\n\n    this.setPageCords(event);\n    this.beginZoom(this.scale);\n    this.zoomImage(this.scale);\n    setTimeout(function () {\n      _this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n    }, 10);\n  };\n\n  Zoom.prototype.getNaturalWidth = function (index) {\n    var $image = this.core.getSlideItem(index).find('.lg-image').first();\n    var naturalWidth = this.core.galleryItems[index].width;\n    return naturalWidth ? parseFloat(naturalWidth) : $image.get().naturalWidth;\n  };\n\n  Zoom.prototype.getActualSizeScale = function (naturalWidth, width) {\n    var _scale;\n\n    var scale;\n\n    if (naturalWidth > width) {\n      _scale = naturalWidth / width;\n      scale = _scale || 2;\n    } else {\n      scale = 1;\n    }\n\n    return scale;\n  };\n\n  Zoom.prototype.getCurrentImageActualSizeScale = function () {\n    var $image = this.core.getSlideItem(this.core.index).find('.lg-image').first();\n    var width = $image.get().offsetWidth;\n    var naturalWidth = this.getNaturalWidth(this.core.index) || width;\n    return this.getActualSizeScale(naturalWidth, width);\n  };\n\n  Zoom.prototype.getPageCords = function (event) {\n    var cords = {};\n\n    if (event) {\n      cords.x = event.pageX || event.targetTouches[0].pageX;\n      cords.y = event.pageY || event.targetTouches[0].pageY;\n    } else {\n      var containerRect = this.core.outer.get().getBoundingClientRect();\n      cords.x = containerRect.width / 2 + containerRect.left;\n      cords.y = containerRect.height / 2 + this.scrollTop + containerRect.top;\n    }\n\n    return cords;\n  };\n\n  Zoom.prototype.setPageCords = function (event) {\n    var pageCords = this.getPageCords(event);\n    this.pageX = pageCords.x;\n    this.pageY = pageCords.y;\n  }; // If true, zoomed - in else zoomed out\n\n\n  Zoom.prototype.beginZoom = function (scale) {\n    this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');\n\n    if (scale > 1) {\n      this.core.outer.addClass('lg-zoomed');\n      var $actualSize = this.core.getElementById('lg-actual-size');\n      $actualSize.removeClass(this.settings.actualSizeIcons.zoomIn).addClass(this.settings.actualSizeIcons.zoomOut);\n    } else {\n      this.resetZoom();\n    }\n\n    return scale > 1;\n  };\n\n  Zoom.prototype.getScale = function (scale) {\n    var actualSizeScale = this.getCurrentImageActualSizeScale();\n\n    if (scale < 1) {\n      scale = 1;\n    } else if (scale > actualSizeScale) {\n      scale = actualSizeScale;\n    }\n\n    return scale;\n  };\n\n  Zoom.prototype.init = function () {\n    var _this = this;\n\n    if (!this.settings.zoom) {\n      return;\n    }\n\n    this.buildTemplates();\n    this.enableZoomOnSlideItemLoad();\n    var tapped = null;\n    this.core.outer.on('dblclick.lg', function (event) {\n      if (!_this.$LG(event.target).hasClass('lg-image')) {\n        return;\n      }\n\n      _this.setActualSize(_this.core.index, event);\n    });\n    this.core.outer.on('touchstart.lg', function (event) {\n      var $target = _this.$LG(event.target);\n\n      if (event.targetTouches.length === 1 && $target.hasClass('lg-image')) {\n        if (!tapped) {\n          tapped = setTimeout(function () {\n            tapped = null;\n          }, 300);\n        } else {\n          clearTimeout(tapped);\n          tapped = null;\n          event.preventDefault();\n\n          _this.setActualSize(_this.core.index, event);\n        }\n      }\n    }); // Update zoom on resize and orientationchange\n\n    this.core.LGel.on(lGEvents.containerResize + \".zoom \" + lGEvents.rotateRight + \".zoom \" + lGEvents.rotateLeft + \".zoom \" + lGEvents.flipHorizontal + \".zoom \" + lGEvents.flipVertical + \".zoom\", function () {\n      if (!_this.core.lgOpened || !_this.isImageSlide()) return;\n\n      _this.setPageCords();\n\n      _this.setZoomEssentials();\n\n      _this.zoomImage(_this.scale);\n    }); // Update zoom on resize and orientationchange\n\n    this.$LG(window).on(\"scroll.lg.zoom.global\" + this.core.lgId, function () {\n      if (!_this.core.lgOpened) return;\n      _this.scrollTop = _this.$LG(window).scrollTop();\n    });\n    this.core.getElementById('lg-zoom-out').on('click.lg', function () {\n      if (_this.core.outer.find('.lg-current .lg-image').get()) {\n        _this.scale -= _this.settings.scale;\n        _this.scale = _this.getScale(_this.scale);\n\n        _this.beginZoom(_this.scale);\n\n        _this.zoomImage(_this.scale);\n      }\n    });\n    this.core.getElementById('lg-zoom-in').on('click.lg', function () {\n      _this.zoomIn();\n    });\n    this.core.getElementById('lg-actual-size').on('click.lg', function () {\n      _this.setActualSize(_this.core.index);\n    });\n    this.core.LGel.on(lGEvents.beforeOpen + \".zoom\", function () {\n      _this.core.outer.find('.lg-item').removeClass('lg-zoomable');\n    });\n    this.core.LGel.on(lGEvents.afterOpen + \".zoom\", function () {\n      _this.scrollTop = _this.$LG(window).scrollTop(); // Set the initial value center\n\n      _this.pageX = _this.core.outer.width() / 2;\n      _this.pageY = _this.core.outer.height() / 2 + _this.scrollTop;\n      _this.scale = 1;\n    }); // Reset zoom on slide change\n\n    this.core.LGel.on(lGEvents.afterSlide + \".zoom\", function (event) {\n      var prevIndex = event.detail.prevIndex;\n      _this.scale = 1;\n      _this.positionChanged = false;\n\n      _this.resetZoom(prevIndex);\n\n      if (_this.isImageSlide()) {\n        _this.setZoomEssentials();\n      }\n    }); // Drag option after zoom\n\n    this.zoomDrag();\n    this.pinchZoom();\n    this.zoomSwipe(); // Store the zoomable timeout value just to clear it while closing\n\n    this.zoomableTimeout = false;\n    this.positionChanged = false;\n  };\n\n  Zoom.prototype.zoomIn = function (scale) {\n    // Allow zoom only on image\n    if (!this.isImageSlide()) {\n      return;\n    }\n\n    if (scale) {\n      this.scale = scale;\n    } else {\n      this.scale += this.settings.scale;\n    }\n\n    this.scale = this.getScale(this.scale);\n    this.beginZoom(this.scale);\n    this.zoomImage(this.scale);\n  }; // Reset zoom effect\n\n\n  Zoom.prototype.resetZoom = function (index) {\n    this.core.outer.removeClass('lg-zoomed lg-zoom-drag-transition');\n    var $actualSize = this.core.getElementById('lg-actual-size');\n    var $item = this.core.getSlideItem(index !== undefined ? index : this.core.index);\n    $actualSize.removeClass(this.settings.actualSizeIcons.zoomOut).addClass(this.settings.actualSizeIcons.zoomIn);\n    $item.find('.lg-img-wrap').first().removeAttr('style');\n    $item.find('.lg-image').first().removeAttr('style');\n    this.scale = 1;\n    this.left = 0;\n    this.top = 0; // Reset pagx pagy values to center\n\n    this.setPageCords();\n  };\n\n  Zoom.prototype.getTouchDistance = function (e) {\n    return Math.sqrt((e.targetTouches[0].pageX - e.targetTouches[1].pageX) * (e.targetTouches[0].pageX - e.targetTouches[1].pageX) + (e.targetTouches[0].pageY - e.targetTouches[1].pageY) * (e.targetTouches[0].pageY - e.targetTouches[1].pageY));\n  };\n\n  Zoom.prototype.pinchZoom = function () {\n    var _this = this;\n\n    var startDist = 0;\n    var pinchStarted = false;\n    var initScale = 1;\n    var $item = this.core.getSlideItem(this.core.index);\n    this.core.$inner.on('touchstart.lg', function (e) {\n      $item = _this.core.getSlideItem(_this.core.index);\n\n      if (!_this.isImageSlide()) {\n        return;\n      }\n\n      if (e.targetTouches.length === 2 && !_this.core.outer.hasClass('lg-first-slide-loading') && (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target))) {\n        initScale = _this.scale || 1;\n\n        _this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');\n\n        _this.core.touchAction = 'pinch';\n        startDist = _this.getTouchDistance(e);\n      }\n    });\n    this.core.$inner.on('touchmove.lg', function (e) {\n      if (e.targetTouches.length === 2 && _this.core.touchAction === 'pinch' && (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target))) {\n        e.preventDefault();\n\n        var endDist = _this.getTouchDistance(e);\n\n        var distance = startDist - endDist;\n\n        if (!pinchStarted && Math.abs(distance) > 5) {\n          pinchStarted = true;\n        }\n\n        if (pinchStarted) {\n          _this.scale = Math.max(1, initScale + -distance * 0.008);\n\n          _this.zoomImage(_this.scale);\n        }\n      }\n    });\n    this.core.$inner.on('touchend.lg', function (e) {\n      if (_this.core.touchAction === 'pinch' && (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target))) {\n        pinchStarted = false;\n        startDist = 0;\n\n        if (_this.scale <= 1) {\n          _this.resetZoom();\n        } else {\n          _this.scale = _this.getScale(_this.scale);\n\n          _this.zoomImage(_this.scale);\n\n          _this.core.outer.addClass('lg-zoomed');\n        }\n\n        _this.core.touchAction = undefined;\n      }\n    });\n  };\n\n  Zoom.prototype.touchendZoom = function (startCoords, endCoords, allowX, allowY, touchDuration, rotateValue) {\n    var distanceXnew = endCoords.x - startCoords.x;\n    var distanceYnew = endCoords.y - startCoords.y;\n    var speedX = Math.abs(distanceXnew) / touchDuration + 1;\n    var speedY = Math.abs(distanceYnew) / touchDuration + 1;\n\n    if (speedX > 2) {\n      speedX += 1;\n    }\n\n    if (speedY > 2) {\n      speedY += 1;\n    }\n\n    distanceXnew = distanceXnew * speedX;\n    distanceYnew = distanceYnew * speedY;\n\n    var _LGel = this.core.getSlideItem(this.core.index).find('.lg-img-wrap').first();\n\n    var distance = {};\n    distance.x = this.left + distanceXnew * this.modifierX;\n    distance.y = this.top + distanceYnew * this.modifierY;\n    var possibleSwipeCords = this.getPossibleSwipeDragCords(rotateValue);\n\n    if (Math.abs(distanceXnew) > 15 || Math.abs(distanceYnew) > 15) {\n      if (allowY) {\n        if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {\n          distance.y = possibleSwipeCords.minY;\n        } else if (this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)) {\n          distance.y = possibleSwipeCords.maxY;\n        }\n      }\n\n      if (allowX) {\n        if (this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)) {\n          distance.x = possibleSwipeCords.minX;\n        } else if (this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)) {\n          distance.x = possibleSwipeCords.maxX;\n        }\n      }\n\n      if (allowY) {\n        this.top = distance.y;\n      } else {\n        distance.y = this.top;\n      }\n\n      if (allowX) {\n        this.left = distance.x;\n      } else {\n        distance.x = this.left;\n      }\n\n      this.setZoomSwipeStyles(_LGel, distance);\n      this.positionChanged = true;\n    }\n  };\n\n  Zoom.prototype.getZoomSwipeCords = function (startCoords, endCoords, allowX, allowY, possibleSwipeCords) {\n    var distance = {};\n\n    if (allowY) {\n      distance.y = this.top + (endCoords.y - startCoords.y) * this.modifierY;\n\n      if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {\n        var diffMinY = possibleSwipeCords.minY - distance.y;\n        distance.y = possibleSwipeCords.minY - diffMinY / 6;\n      } else if (this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)) {\n        var diffMaxY = distance.y - possibleSwipeCords.maxY;\n        distance.y = possibleSwipeCords.maxY + diffMaxY / 6;\n      }\n    } else {\n      distance.y = this.top;\n    }\n\n    if (allowX) {\n      distance.x = this.left + (endCoords.x - startCoords.x) * this.modifierX;\n\n      if (this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)) {\n        var diffMinX = possibleSwipeCords.minX - distance.x;\n        distance.x = possibleSwipeCords.minX - diffMinX / 6;\n      } else if (this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)) {\n        var difMaxX = distance.x - possibleSwipeCords.maxX;\n        distance.x = possibleSwipeCords.maxX + difMaxX / 6;\n      }\n    } else {\n      distance.x = this.left;\n    }\n\n    return distance;\n  };\n\n  Zoom.prototype.isBeyondPossibleLeft = function (x, minX) {\n    return x >= minX;\n  };\n\n  Zoom.prototype.isBeyondPossibleRight = function (x, maxX) {\n    return x <= maxX;\n  };\n\n  Zoom.prototype.isBeyondPossibleTop = function (y, minY) {\n    return y >= minY;\n  };\n\n  Zoom.prototype.isBeyondPossibleBottom = function (y, maxY) {\n    return y <= maxY;\n  };\n\n  Zoom.prototype.isImageSlide = function () {\n    var currentItem = this.core.galleryItems[this.core.index];\n    return this.core.getSlideType(currentItem) === 'image';\n  };\n\n  Zoom.prototype.getPossibleSwipeDragCords = function (rotateValue, scale) {\n    var dataScale = scale || this.scale || 1;\n    var elDataScale = Math.abs(dataScale);\n    var _a = this.core.mediaContainerPosition,\n        top = _a.top,\n        bottom = _a.bottom;\n    var topBottomSpacing = Math.abs(top - bottom) / 2;\n    var minY = (this.imageYSize - this.containerRect.height) / 2 + topBottomSpacing * this.modifierX;\n    var maxY = this.containerRect.height - this.imageYSize * elDataScale + minY;\n    var minX = (this.imageXSize - this.containerRect.width) / 2;\n    var maxX = this.containerRect.width - this.imageXSize * elDataScale + minX;\n    var possibleSwipeCords = {\n      minY: minY,\n      maxY: maxY,\n      minX: minX,\n      maxX: maxX\n    };\n\n    if (Math.abs(rotateValue) === 90) {\n      possibleSwipeCords = {\n        minY: minX,\n        maxY: maxX,\n        minX: minY,\n        maxX: maxY\n      };\n    }\n\n    return possibleSwipeCords;\n  };\n\n  Zoom.prototype.setZoomSwipeStyles = function (LGel, distance) {\n    LGel.css('transform', 'translate3d(' + distance.x + 'px, ' + distance.y + 'px, 0)');\n  };\n\n  Zoom.prototype.zoomSwipe = function () {\n    var _this = this;\n\n    var startCoords = {};\n    var endCoords = {};\n    var isMoved = false; // Allow x direction drag\n\n    var allowX = false; // Allow Y direction drag\n\n    var allowY = false;\n    var startTime = new Date();\n    var endTime = new Date();\n    var possibleSwipeCords;\n\n    var _LGel;\n\n    var $item = this.core.getSlideItem(this.core.index);\n    this.core.$inner.on('touchstart.lg', function (e) {\n      // Allow zoom only on image\n      if (!_this.isImageSlide()) {\n        return;\n      }\n\n      $item = _this.core.getSlideItem(_this.core.index);\n\n      if ((_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target)) && e.targetTouches.length === 1 && _this.core.outer.hasClass('lg-zoomed')) {\n        e.preventDefault();\n        startTime = new Date();\n        _this.core.touchAction = 'zoomSwipe';\n        _LGel = _this.core.getSlideItem(_this.core.index).find('.lg-img-wrap').first();\n\n        var dragAllowedAxises = _this.getDragAllowedAxises(Math.abs(_this.rotateValue));\n\n        allowY = dragAllowedAxises.allowY;\n        allowX = dragAllowedAxises.allowX;\n\n        if (allowX || allowY) {\n          startCoords = _this.getSwipeCords(e, Math.abs(_this.rotateValue));\n        }\n\n        possibleSwipeCords = _this.getPossibleSwipeDragCords(_this.rotateValue); // reset opacity and transition duration\n\n        _this.core.outer.addClass('lg-zoom-dragging lg-zoom-drag-transition');\n      }\n    });\n    this.core.$inner.on('touchmove.lg', function (e) {\n      if (e.targetTouches.length === 1 && _this.core.touchAction === 'zoomSwipe' && (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target))) {\n        e.preventDefault();\n        _this.core.touchAction = 'zoomSwipe';\n        endCoords = _this.getSwipeCords(e, Math.abs(_this.rotateValue));\n\n        var distance = _this.getZoomSwipeCords(startCoords, endCoords, allowX, allowY, possibleSwipeCords);\n\n        if (Math.abs(endCoords.x - startCoords.x) > 15 || Math.abs(endCoords.y - startCoords.y) > 15) {\n          isMoved = true;\n\n          _this.setZoomSwipeStyles(_LGel, distance);\n        }\n      }\n    });\n    this.core.$inner.on('touchend.lg', function (e) {\n      if (_this.core.touchAction === 'zoomSwipe' && (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target))) {\n        _this.core.touchAction = undefined;\n\n        _this.core.outer.removeClass('lg-zoom-dragging');\n\n        if (!isMoved) {\n          return;\n        }\n\n        isMoved = false;\n        endTime = new Date();\n        var touchDuration = endTime.valueOf() - startTime.valueOf();\n\n        _this.touchendZoom(startCoords, endCoords, allowX, allowY, touchDuration, _this.rotateValue);\n      }\n    });\n  };\n\n  Zoom.prototype.zoomDrag = function () {\n    var _this = this;\n\n    var startCoords = {};\n    var endCoords = {};\n    var isDragging = false;\n    var isMoved = false; // Allow x direction drag\n\n    var allowX = false; // Allow Y direction drag\n\n    var allowY = false;\n    var startTime;\n    var endTime;\n    var possibleSwipeCords;\n\n    var _LGel;\n\n    this.core.outer.on('mousedown.lg.zoom', function (e) {\n      // Allow zoom only on image\n      if (!_this.isImageSlide()) {\n        return;\n      }\n\n      var $item = _this.core.getSlideItem(_this.core.index);\n\n      if (_this.$LG(e.target).hasClass('lg-item') || $item.get().contains(e.target)) {\n        startTime = new Date();\n        _LGel = _this.core.getSlideItem(_this.core.index).find('.lg-img-wrap').first();\n\n        var dragAllowedAxises = _this.getDragAllowedAxises(Math.abs(_this.rotateValue));\n\n        allowY = dragAllowedAxises.allowY;\n        allowX = dragAllowedAxises.allowX;\n\n        if (_this.core.outer.hasClass('lg-zoomed')) {\n          if (_this.$LG(e.target).hasClass('lg-object') && (allowX || allowY)) {\n            e.preventDefault();\n            startCoords = _this.getDragCords(e, Math.abs(_this.rotateValue));\n            possibleSwipeCords = _this.getPossibleSwipeDragCords(_this.rotateValue);\n            isDragging = true; // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n\n            _this.core.outer.get().scrollLeft += 1;\n            _this.core.outer.get().scrollLeft -= 1;\n\n            _this.core.outer.removeClass('lg-grab').addClass('lg-grabbing lg-zoom-drag-transition lg-zoom-dragging'); // reset opacity and transition duration\n\n          }\n        }\n      }\n    });\n    this.$LG(window).on(\"mousemove.lg.zoom.global\" + this.core.lgId, function (e) {\n      if (isDragging) {\n        isMoved = true;\n        endCoords = _this.getDragCords(e, Math.abs(_this.rotateValue));\n\n        var distance = _this.getZoomSwipeCords(startCoords, endCoords, allowX, allowY, possibleSwipeCords);\n\n        _this.setZoomSwipeStyles(_LGel, distance);\n      }\n    });\n    this.$LG(window).on(\"mouseup.lg.zoom.global\" + this.core.lgId, function (e) {\n      if (isDragging) {\n        endTime = new Date();\n        isDragging = false;\n\n        _this.core.outer.removeClass('lg-zoom-dragging'); // Fix for chrome mouse move on click\n\n\n        if (isMoved && (startCoords.x !== endCoords.x || startCoords.y !== endCoords.y)) {\n          endCoords = _this.getDragCords(e, Math.abs(_this.rotateValue));\n          var touchDuration = endTime.valueOf() - startTime.valueOf();\n\n          _this.touchendZoom(startCoords, endCoords, allowX, allowY, touchDuration, _this.rotateValue);\n        }\n\n        isMoved = false;\n      }\n\n      _this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n    });\n  };\n\n  Zoom.prototype.closeGallery = function () {\n    this.resetZoom();\n  };\n\n  Zoom.prototype.destroy = function () {\n    // Unbind all events added by lightGallery zoom plugin\n    this.$LG(window).off(\".lg.zoom.global\" + this.core.lgId);\n    this.core.LGel.off('.lg.zoom');\n    this.core.LGel.off('.zoom');\n    clearTimeout(this.zoomableTimeout);\n    this.zoomableTimeout = false;\n  };\n\n  return Zoom;\n}();\n\nexport default Zoom;","map":{"version":3,"sources":["../../../src/plugins/zoom/lg-zoom-settings.ts","../../../src/lg-events.ts","../../../src/plugins/zoom/lg-zoom.ts"],"names":[],"mappings":"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","sourcesContent":["export interface ActualSizeIcons {\n    zoomIn: 'lg-zoom-in' | 'lg-actual-size';\n    zoomOut: 'lg-zoom-out' | 'lg-actual-size';\n}\nexport interface ZoomSettings {\n    /**\n     * Value of zoom should be incremented/decremented\n     */\n    scale: number;\n\n    /**\n     * Enable/Disable zoom option\n     */\n    zoom: boolean;\n\n    /**\n     * Enable actual size icon.\n     */\n    actualSize: boolean;\n\n    /**\n     * Once the slide transition is completed, how much time should take zoom plugin to activate\n     * @description Some css styles will be added to the images if zoom is enabled.\n     * So it might conflict if you add any custom styles to the images such as the initial transition while opening the gallery.\n     * So you can delay adding zoom related styles to the images by changing the value of enableZoomAfter.\n     */\n    enableZoomAfter: number;\n\n    /**\n     * Show zoom in, zoom out icons\n     */\n    showZoomInOutIcons: boolean;\n\n    /**\n     * Actual size icons classnames.\n     * Specify classnames for both ZoomIn and ZoomOut states\n     * You can use `actualSizeIcons: { zoomIn: 'lg-actual-size', zoomOut: 'lg-zoom-out' }`\n     * to show actual size icons instead of zoom in and zoom out icons.\n     */\n    actualSizeIcons: ActualSizeIcons;\n}\n\nexport const zoomSettings: ZoomSettings = {\n    scale: 1,\n    zoom: true,\n    actualSize: true,\n    showZoomInOutIcons: false,\n    actualSizeIcons: {\n        zoomIn: 'lg-zoom-in',\n        zoomOut: 'lg-zoom-out',\n    } as ActualSizeIcons,\n    enableZoomAfter: 300,\n};\n","import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n};\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n","import { ZoomSettings, zoomSettings } from './lg-zoom-settings';\nimport { LgQuery, lgQuery } from '../../lgQuery';\nimport { LightGallery } from '../../lightgallery';\nimport { lGEvents } from '../../lg-events';\n\ninterface Coords {\n    x: number;\n    y: number;\n}\n\ninterface DragAllowedAxises {\n    allowX: boolean;\n    allowY: boolean;\n}\ninterface ZoomTouchEvent {\n    pageX: number;\n    targetTouches: { pageY: number; pageX: number }[];\n    pageY: number;\n}\ninterface PossibleCords {\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\nexport default class Zoom {\n    private core: LightGallery;\n    private settings: ZoomSettings;\n    private $LG!: LgQuery;\n    zoomableTimeout: any;\n    positionChanged!: boolean;\n    pageX!: number;\n    pageY!: number;\n    scale!: number;\n\n    imageYSize!: number;\n    imageXSize!: number;\n    containerRect!: ClientRect;\n    rotateValue!: number;\n    modifierX!: number;\n    modifierY!: number;\n    dragAllowedAxises!: DragAllowedAxises;\n    top!: number;\n    left!: number;\n    scrollTop!: number;\n    constructor(instance: LightGallery, $LG: LgQuery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n\n        this.settings = { ...zoomSettings, ...this.core.settings };\n\n        return this;\n    }\n\n    // Append Zoom controls. Actual size, Zoom-in, Zoom-out\n    buildTemplates(): void {\n        let zoomIcons = this.settings.showZoomInOutIcons\n            ? `<button id=\"${this.core.getIdName(\n                  'lg-zoom-in',\n              )}\" type=\"button\" aria-label=\"Zoom in\" class=\"lg-zoom-in lg-icon\"></button><button id=\"${this.core.getIdName(\n                  'lg-zoom-out',\n              )}\" type=\"button\" aria-label=\"Zoom out\" class=\"lg-zoom-out lg-icon\"></button>`\n            : '';\n\n        if (this.settings.actualSize) {\n            zoomIcons += `<button id=\"${this.core.getIdName(\n                'lg-actual-size',\n            )}\" type=\"button\" aria-label=\"View actual size\" class=\"${\n                this.settings.actualSizeIcons.zoomIn\n            } lg-icon\"></button>`;\n        }\n\n        this.core.outer.addClass('lg-use-transition-for-zoom');\n\n        this.core.$toolbar.first().append(zoomIcons);\n    }\n\n    /**\n     * @desc Enable zoom option only once the image is completely loaded\n     * If zoomFromOrigin is true, Zoom is enabled once the dummy image has been inserted\n     *\n     * Zoom styles are defined under lg-zoomable CSS class.\n     */\n    enableZoom(event: CustomEvent): void {\n        // delay will be 0 except first time\n        let _speed = this.settings.enableZoomAfter + event.detail.delay;\n\n        // set _speed value 0 if gallery opened from direct url and if it is first slide\n        if (\n            this.$LG('body').first().hasClass('lg-from-hash') &&\n            event.detail.delay\n        ) {\n            // will execute only once\n            _speed = 0;\n        } else {\n            // Remove lg-from-hash to enable starting animation.\n            this.$LG('body').first().removeClass('lg-from-hash');\n        }\n\n        this.zoomableTimeout = setTimeout(() => {\n            if (!this.isImageSlide()) {\n                return;\n            }\n            this.core.getSlideItem(event.detail.index).addClass('lg-zoomable');\n            if (event.detail.index === this.core.index) {\n                this.setZoomEssentials();\n            }\n        }, _speed + 30);\n    }\n\n    enableZoomOnSlideItemLoad(): void {\n        // Add zoomable class\n        this.core.LGel.on(\n            `${lGEvents.slideItemLoad}.zoom`,\n            this.enableZoom.bind(this),\n        );\n    }\n\n    getModifier(rotateValue: number, axis: string, el: HTMLElement): number {\n        const originalRotate = rotateValue;\n        rotateValue = Math.abs(rotateValue);\n        const transformValues = this.getCurrentTransform(el);\n        if (!transformValues) {\n            return 1;\n        }\n        let modifier = 1;\n        if (axis === 'X') {\n            const flipHorizontalValue = Math.sign(\n                parseFloat(transformValues[0]),\n            );\n            if (rotateValue === 0 || rotateValue === 180) {\n                modifier = 1;\n            } else if (rotateValue === 90) {\n                if (\n                    (originalRotate === -90 && flipHorizontalValue === 1) ||\n                    (originalRotate === 90 && flipHorizontalValue === -1)\n                ) {\n                    modifier = -1;\n                } else {\n                    modifier = 1;\n                }\n            }\n            modifier = modifier * flipHorizontalValue;\n        } else {\n            const flipVerticalValue = Math.sign(parseFloat(transformValues[3]));\n            if (rotateValue === 0 || rotateValue === 180) {\n                modifier = 1;\n            } else if (rotateValue === 90) {\n                const sinX = parseFloat(transformValues[1]);\n                const sinMinusX = parseFloat(transformValues[2]);\n                modifier = Math.sign(\n                    sinX * sinMinusX * originalRotate * flipVerticalValue,\n                );\n            }\n            modifier = modifier * flipVerticalValue;\n        }\n        return modifier;\n    }\n\n    getImageSize(\n        $image: HTMLImageElement,\n        rotateValue: number,\n        axis: string,\n    ): number {\n        const imageSizes: {\n            [key: string]: string;\n        } = {\n            y: 'offsetHeight',\n            x: 'offsetWidth',\n        };\n        if (Math.abs(rotateValue) === 90) {\n            // Swap axis\n            if (axis === 'x') {\n                axis = 'y';\n            } else {\n                axis = 'x';\n            }\n        }\n        return (($image as unknown) as any)[imageSizes[axis]];\n    }\n\n    getDragCords(e: MouseEvent, rotateValue: number): Coords {\n        if (rotateValue === 90) {\n            return {\n                x: e.pageY,\n                y: e.pageX,\n            };\n        } else {\n            return {\n                x: e.pageX,\n                y: e.pageY,\n            };\n        }\n    }\n    getSwipeCords(e: TouchEvent, rotateValue: number): Coords {\n        const x = e.targetTouches[0].pageX;\n        const y = e.targetTouches[0].pageY;\n        if (rotateValue === 90) {\n            return {\n                x: y,\n                y: x,\n            };\n        } else {\n            return {\n                x: x,\n                y: y,\n            };\n        }\n    }\n\n    getDragAllowedAxises(\n        rotateValue: number,\n        scale?: number,\n    ): DragAllowedAxises {\n        scale = scale || this.scale || 1;\n        const allowY = this.imageYSize * scale > this.containerRect.height;\n        const allowX = this.imageXSize * scale > this.containerRect.width;\n        if (rotateValue === 90) {\n            return {\n                allowX: allowY,\n                allowY: allowX,\n            };\n        } else {\n            return {\n                allowX: allowX,\n                allowY: allowY,\n            };\n        }\n    }\n\n    /**\n     *\n     * @param {Element} el\n     * @return matrix(cos(X), sin(X), -sin(X), cos(X), 0, 0);\n     * Get the current transform value\n     */\n    getCurrentTransform(el: HTMLElement): string[] | undefined {\n        if (!el) {\n            return;\n        }\n        const st = window.getComputedStyle(el, null);\n        const tm =\n            st.getPropertyValue('-webkit-transform') ||\n            st.getPropertyValue('-moz-transform') ||\n            st.getPropertyValue('-ms-transform') ||\n            st.getPropertyValue('-o-transform') ||\n            st.getPropertyValue('transform') ||\n            'none';\n        if (tm !== 'none') {\n            return tm.split('(')[1].split(')')[0].split(',');\n        }\n        return;\n    }\n\n    getCurrentRotation(el: HTMLElement): number {\n        if (!el) {\n            return 0;\n        }\n        const values: string[] | undefined = this.getCurrentTransform(el);\n        if (values) {\n            return Math.round(\n                Math.atan2(parseFloat(values[1]), parseFloat(values[0])) *\n                    (180 / Math.PI),\n            );\n            // If you want rotate in 360\n            //return (angle < 0 ? angle + 360 : angle);\n        }\n        return 0;\n    }\n\n    setZoomEssentials(): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n\n        const rotateEl = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first()\n            .get();\n        this.rotateValue = this.getCurrentRotation(rotateEl);\n\n        this.imageYSize = this.getImageSize(\n            $image.get() as HTMLImageElement,\n            this.rotateValue,\n            'y',\n        );\n        this.imageXSize = this.getImageSize(\n            $image.get() as HTMLImageElement,\n            this.rotateValue,\n            'x',\n        );\n        this.containerRect = this.core.outer.get().getBoundingClientRect();\n\n        this.modifierX = this.getModifier(this.rotateValue, 'X', rotateEl);\n        this.modifierY = this.getModifier(this.rotateValue, 'Y', rotateEl);\n    }\n\n    /**\n     * @desc Image zoom\n     * Translate the wrap and scale the image to get better user experience\n     *\n     * @param {String} scale - Zoom decrement/increment value\n     */\n    zoomImage(scale: number): void {\n        // Find offset manually to avoid issue after zoom\n        const offsetX =\n            (this.containerRect.width - this.imageXSize) / 2 +\n            this.containerRect.left;\n\n        const { top, bottom } = this.core.mediaContainerPosition;\n        const topBottomSpacing = Math.abs(top - bottom) / 2;\n\n        const offsetY =\n            (this.containerRect.height -\n                this.imageYSize -\n                topBottomSpacing * this.modifierX) /\n                2 +\n            this.scrollTop +\n            this.containerRect.top;\n\n        let originalX;\n        let originalY;\n\n        if (scale === 1) {\n            this.positionChanged = false;\n        }\n\n        const dragAllowedAxises = this.getDragAllowedAxises(\n            Math.abs(this.rotateValue),\n            scale,\n        );\n\n        const { allowY, allowX } = dragAllowedAxises;\n        if (this.positionChanged) {\n            originalX = this.left / (this.scale - 1);\n            originalY = this.top / (this.scale - 1);\n            this.pageX = Math.abs(originalX) + offsetX;\n            this.pageY = Math.abs(originalY) + offsetY;\n\n            this.positionChanged = false;\n        }\n\n        const possibleSwipeCords = this.getPossibleSwipeDragCords(\n            this.rotateValue,\n            scale,\n        );\n\n        const _x = offsetX - this.pageX;\n        const _y = offsetY - this.pageY;\n\n        let x = (scale - 1) * _x;\n        let y = (scale - 1) * _y;\n\n        if (allowX) {\n            if (this.isBeyondPossibleLeft(x, possibleSwipeCords.minX)) {\n                x = possibleSwipeCords.minX;\n            } else if (this.isBeyondPossibleRight(x, possibleSwipeCords.maxX)) {\n                x = possibleSwipeCords.maxX;\n            }\n        } else {\n            if (scale > 1) {\n                if (x < possibleSwipeCords.minX) {\n                    x = possibleSwipeCords.minX;\n                } else if (x > possibleSwipeCords.maxX) {\n                    x = possibleSwipeCords.maxX;\n                }\n            }\n        }\n\n        if (allowY) {\n            if (this.isBeyondPossibleTop(y, possibleSwipeCords.minY)) {\n                y = possibleSwipeCords.minY;\n            } else if (\n                this.isBeyondPossibleBottom(y, possibleSwipeCords.maxY)\n            ) {\n                y = possibleSwipeCords.maxY;\n            }\n        } else {\n            // If the translate value based on index of beyond the viewport, utilize the available space to prevent image being cut out\n            if (scale > 1) {\n                //If image goes beyond viewport top, use the minim possible translate value\n                if (y < possibleSwipeCords.minY) {\n                    y = possibleSwipeCords.minY;\n                } else if (y > possibleSwipeCords.maxY) {\n                    y = possibleSwipeCords.maxY;\n                }\n            }\n        }\n\n        this.setZoomStyles({\n            x: x,\n            y: y,\n            scale,\n        });\n    }\n\n    /**\n     * @desc apply scale3d to image and translate to image wrap\n     * @param {style} X,Y and scale\n     */\n    setZoomStyles(style: { x: number; y: number; scale: number }): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const $dummyImage = this.core.outer\n            .find('.lg-current .lg-dummy-img')\n            .first();\n        const $imageWrap = $image.parent();\n        this.scale = style.scale;\n        $image.css(\n            'transform',\n            'scale3d(' + style.scale + ', ' + style.scale + ', 1)',\n        );\n\n        $dummyImage.css(\n            'transform',\n            'scale3d(' + style.scale + ', ' + style.scale + ', 1)',\n        );\n\n        const transform =\n            'translate3d(' + style.x + 'px, ' + style.y + 'px, 0)';\n        $imageWrap.css('transform', transform);\n\n        this.left = style.x;\n        this.top = style.y;\n    }\n\n    /**\n     * @param index - Index of the current slide\n     * @param event - event will be available only if the function is called on clicking/taping the imags\n     */\n    setActualSize(index: number, event?: ZoomTouchEvent): void {\n        // Allow zoom only on image\n        if (\n            !this.isImageSlide() ||\n            this.core.outer.hasClass('lg-first-slide-loading')\n        ) {\n            return;\n        }\n        const scale = this.getCurrentImageActualSizeScale();\n        if (this.core.outer.hasClass('lg-zoomed')) {\n            this.scale = 1;\n        } else {\n            this.scale = this.getScale(scale);\n        }\n        this.setPageCords(event);\n\n        this.beginZoom(this.scale);\n        this.zoomImage(this.scale);\n\n        setTimeout(() => {\n            this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n        }, 10);\n    }\n\n    getNaturalWidth(index: number): number {\n        const $image = this.core.getSlideItem(index).find('.lg-image').first();\n\n        const naturalWidth = this.core.galleryItems[index].width;\n        return naturalWidth\n            ? parseFloat(naturalWidth)\n            : undefined || ($image.get() as any).naturalWidth;\n    }\n\n    getActualSizeScale(naturalWidth: number, width: number): number {\n        let _scale;\n        let scale;\n        if (naturalWidth > width) {\n            _scale = naturalWidth / width;\n            scale = _scale || 2;\n        } else {\n            scale = 1;\n        }\n        return scale;\n    }\n\n    getCurrentImageActualSizeScale(): number {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const width = $image.get().offsetWidth;\n        const naturalWidth = this.getNaturalWidth(this.core.index) || width;\n        return this.getActualSizeScale(naturalWidth, width);\n    }\n\n    getPageCords(event?: ZoomTouchEvent): Coords {\n        const cords: Coords = {} as Coords;\n        if (event) {\n            cords.x = event.pageX || event.targetTouches[0].pageX;\n            cords.y = event.pageY || event.targetTouches[0].pageY;\n        } else {\n            const containerRect = this.core.outer.get().getBoundingClientRect();\n            cords.x = containerRect.width / 2 + containerRect.left;\n            cords.y =\n                containerRect.height / 2 + this.scrollTop + containerRect.top;\n        }\n        return cords;\n    }\n\n    setPageCords(event?: ZoomTouchEvent): void {\n        const pageCords = this.getPageCords(event);\n\n        this.pageX = pageCords.x;\n        this.pageY = pageCords.y;\n    }\n\n    // If true, zoomed - in else zoomed out\n    beginZoom(scale: number): boolean {\n        this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');\n        if (scale > 1) {\n            this.core.outer.addClass('lg-zoomed');\n            const $actualSize = this.core.getElementById('lg-actual-size');\n            $actualSize\n                .removeClass(this.settings.actualSizeIcons.zoomIn)\n                .addClass(this.settings.actualSizeIcons.zoomOut);\n        } else {\n            this.resetZoom();\n        }\n        return scale > 1;\n    }\n\n    getScale(scale: number): number {\n        const actualSizeScale = this.getCurrentImageActualSizeScale();\n        if (scale < 1) {\n            scale = 1;\n        } else if (scale > actualSizeScale) {\n            scale = actualSizeScale;\n        }\n        return scale;\n    }\n\n    init(): void {\n        if (!this.settings.zoom) {\n            return;\n        }\n        this.buildTemplates();\n        this.enableZoomOnSlideItemLoad();\n\n        let tapped: ReturnType<typeof setTimeout> | null = null;\n\n        this.core.outer.on('dblclick.lg', (event) => {\n            if (!this.$LG(event.target).hasClass('lg-image')) {\n                return;\n            }\n            this.setActualSize(this.core.index, event);\n        });\n\n        this.core.outer.on('touchstart.lg', (event) => {\n            const $target = this.$LG(event.target);\n            if (\n                event.targetTouches.length === 1 &&\n                $target.hasClass('lg-image')\n            ) {\n                if (!tapped) {\n                    tapped = setTimeout(() => {\n                        tapped = null;\n                    }, 300);\n                } else {\n                    clearTimeout(tapped);\n                    tapped = null;\n                    event.preventDefault();\n                    this.setActualSize(this.core.index, event);\n                }\n            }\n        });\n\n        // Update zoom on resize and orientationchange\n        this.core.LGel.on(\n            `${lGEvents.containerResize}.zoom ${lGEvents.rotateRight}.zoom ${lGEvents.rotateLeft}.zoom ${lGEvents.flipHorizontal}.zoom ${lGEvents.flipVertical}.zoom`,\n            () => {\n                if (!this.core.lgOpened || !this.isImageSlide()) return;\n                this.setPageCords();\n                this.setZoomEssentials();\n                this.zoomImage(this.scale);\n            },\n        );\n        // Update zoom on resize and orientationchange\n        this.$LG(window).on(`scroll.lg.zoom.global${this.core.lgId}`, () => {\n            if (!this.core.lgOpened) return;\n            this.scrollTop = this.$LG(window).scrollTop();\n        });\n\n        this.core.getElementById('lg-zoom-out').on('click.lg', () => {\n            if (this.core.outer.find('.lg-current .lg-image').get()) {\n                this.scale -= this.settings.scale;\n\n                this.scale = this.getScale(this.scale);\n                this.beginZoom(this.scale);\n                this.zoomImage(this.scale);\n            }\n        });\n\n        this.core.getElementById('lg-zoom-in').on('click.lg', () => {\n            this.zoomIn();\n        });\n\n        this.core.getElementById('lg-actual-size').on('click.lg', () => {\n            this.setActualSize(this.core.index);\n        });\n\n        this.core.LGel.on(`${lGEvents.beforeOpen}.zoom`, () => {\n            this.core.outer.find('.lg-item').removeClass('lg-zoomable');\n        });\n        this.core.LGel.on(`${lGEvents.afterOpen}.zoom`, () => {\n            this.scrollTop = this.$LG(window).scrollTop();\n\n            // Set the initial value center\n            this.pageX = this.core.outer.width() / 2;\n            this.pageY = this.core.outer.height() / 2 + this.scrollTop;\n\n            this.scale = 1;\n        });\n\n        // Reset zoom on slide change\n        this.core.LGel.on(\n            `${lGEvents.afterSlide}.zoom`,\n            (event: CustomEvent) => {\n                const { prevIndex } = event.detail;\n                this.scale = 1;\n                this.positionChanged = false;\n                this.resetZoom(prevIndex);\n                if (this.isImageSlide()) {\n                    this.setZoomEssentials();\n                }\n            },\n        );\n\n        // Drag option after zoom\n        this.zoomDrag();\n\n        this.pinchZoom();\n\n        this.zoomSwipe();\n\n        // Store the zoomable timeout value just to clear it while closing\n        this.zoomableTimeout = false;\n        this.positionChanged = false;\n    }\n\n    zoomIn(scale?: number): void {\n        // Allow zoom only on image\n        if (!this.isImageSlide()) {\n            return;\n        }\n        if (scale) {\n            this.scale = scale;\n        } else {\n            this.scale += this.settings.scale;\n        }\n\n        this.scale = this.getScale(this.scale);\n        this.beginZoom(this.scale);\n        this.zoomImage(this.scale);\n    }\n\n    // Reset zoom effect\n    resetZoom(index?: number): void {\n        this.core.outer.removeClass('lg-zoomed lg-zoom-drag-transition');\n        const $actualSize = this.core.getElementById('lg-actual-size');\n        const $item = this.core.getSlideItem(\n            index !== undefined ? index : this.core.index,\n        );\n        $actualSize\n            .removeClass(this.settings.actualSizeIcons.zoomOut)\n            .addClass(this.settings.actualSizeIcons.zoomIn);\n        $item.find('.lg-img-wrap').first().removeAttr('style');\n        $item.find('.lg-image').first().removeAttr('style');\n        this.scale = 1;\n        this.left = 0;\n        this.top = 0;\n\n        // Reset pagx pagy values to center\n        this.setPageCords();\n    }\n\n    getTouchDistance(e: TouchEvent): number {\n        return Math.sqrt(\n            (e.targetTouches[0].pageX - e.targetTouches[1].pageX) *\n                (e.targetTouches[0].pageX - e.targetTouches[1].pageX) +\n                (e.targetTouches[0].pageY - e.targetTouches[1].pageY) *\n                    (e.targetTouches[0].pageY - e.targetTouches[1].pageY),\n        );\n    }\n\n    pinchZoom(): void {\n        let startDist = 0;\n        let pinchStarted = false;\n        let initScale = 1;\n\n        let $item = this.core.getSlideItem(this.core.index);\n\n        this.core.$inner.on('touchstart.lg', (e) => {\n            $item = this.core.getSlideItem(this.core.index);\n            if (!this.isImageSlide()) {\n                return;\n            }\n            if (\n                e.targetTouches.length === 2 &&\n                !this.core.outer.hasClass('lg-first-slide-loading') &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                initScale = this.scale || 1;\n                this.core.outer.removeClass(\n                    'lg-zoom-drag-transition lg-zoom-dragging',\n                );\n\n                this.core.touchAction = 'pinch';\n\n                startDist = this.getTouchDistance(e);\n            }\n        });\n\n        this.core.$inner.on('touchmove.lg', (e) => {\n            if (\n                e.targetTouches.length === 2 &&\n                this.core.touchAction === 'pinch' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                e.preventDefault();\n                const endDist = this.getTouchDistance(e);\n\n                const distance = startDist - endDist;\n                if (!pinchStarted && Math.abs(distance) > 5) {\n                    pinchStarted = true;\n                }\n                if (pinchStarted) {\n                    this.scale = Math.max(1, initScale + -distance * 0.008);\n\n                    this.zoomImage(this.scale);\n                }\n            }\n        });\n\n        this.core.$inner.on('touchend.lg', (e) => {\n            if (\n                this.core.touchAction === 'pinch' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                pinchStarted = false;\n                startDist = 0;\n                if (this.scale <= 1) {\n                    this.resetZoom();\n                } else {\n                    this.scale = this.getScale(this.scale);\n                    this.zoomImage(this.scale);\n\n                    this.core.outer.addClass('lg-zoomed');\n                }\n                this.core.touchAction = undefined;\n            }\n        });\n    }\n\n    touchendZoom(\n        startCoords: Coords,\n        endCoords: Coords,\n        allowX: boolean,\n        allowY: boolean,\n        touchDuration: number,\n        rotateValue: number,\n    ): void {\n        let distanceXnew = endCoords.x - startCoords.x;\n        let distanceYnew = endCoords.y - startCoords.y;\n\n        let speedX = Math.abs(distanceXnew) / touchDuration + 1;\n        let speedY = Math.abs(distanceYnew) / touchDuration + 1;\n\n        if (speedX > 2) {\n            speedX += 1;\n        }\n\n        if (speedY > 2) {\n            speedY += 1;\n        }\n\n        distanceXnew = distanceXnew * speedX;\n        distanceYnew = distanceYnew * speedY;\n\n        const _LGel = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-wrap')\n            .first();\n        const distance: Coords = {} as Coords;\n\n        distance.x = this.left + distanceXnew * this.modifierX;\n        distance.y = this.top + distanceYnew * this.modifierY;\n\n        const possibleSwipeCords = this.getPossibleSwipeDragCords(rotateValue);\n\n        if (Math.abs(distanceXnew) > 15 || Math.abs(distanceYnew) > 15) {\n            if (allowY) {\n                if (\n                    this.isBeyondPossibleTop(\n                        distance.y,\n                        possibleSwipeCords.minY,\n                    )\n                ) {\n                    distance.y = possibleSwipeCords.minY;\n                } else if (\n                    this.isBeyondPossibleBottom(\n                        distance.y,\n                        possibleSwipeCords.maxY,\n                    )\n                ) {\n                    distance.y = possibleSwipeCords.maxY;\n                }\n            }\n\n            if (allowX) {\n                if (\n                    this.isBeyondPossibleLeft(\n                        distance.x,\n                        possibleSwipeCords.minX,\n                    )\n                ) {\n                    distance.x = possibleSwipeCords.minX;\n                } else if (\n                    this.isBeyondPossibleRight(\n                        distance.x,\n                        possibleSwipeCords.maxX,\n                    )\n                ) {\n                    distance.x = possibleSwipeCords.maxX;\n                }\n            }\n\n            if (allowY) {\n                this.top = distance.y;\n            } else {\n                distance.y = this.top;\n            }\n\n            if (allowX) {\n                this.left = distance.x;\n            } else {\n                distance.x = this.left;\n            }\n\n            this.setZoomSwipeStyles(_LGel, distance);\n\n            this.positionChanged = true;\n        }\n    }\n\n    getZoomSwipeCords(\n        startCoords: Coords,\n        endCoords: Coords,\n        allowX: boolean,\n        allowY: boolean,\n        possibleSwipeCords: PossibleCords,\n    ): Coords {\n        const distance: Coords = {} as Coords;\n        if (allowY) {\n            distance.y =\n                this.top + (endCoords.y - startCoords.y) * this.modifierY;\n            if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {\n                const diffMinY = possibleSwipeCords.minY - distance.y;\n                distance.y = possibleSwipeCords.minY - diffMinY / 6;\n            } else if (\n                this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)\n            ) {\n                const diffMaxY = distance.y - possibleSwipeCords.maxY;\n                distance.y = possibleSwipeCords.maxY + diffMaxY / 6;\n            }\n        } else {\n            distance.y = this.top;\n        }\n\n        if (allowX) {\n            distance.x =\n                this.left + (endCoords.x - startCoords.x) * this.modifierX;\n            if (\n                this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)\n            ) {\n                const diffMinX = possibleSwipeCords.minX - distance.x;\n                distance.x = possibleSwipeCords.minX - diffMinX / 6;\n            } else if (\n                this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)\n            ) {\n                const difMaxX = distance.x - possibleSwipeCords.maxX;\n                distance.x = possibleSwipeCords.maxX + difMaxX / 6;\n            }\n        } else {\n            distance.x = this.left;\n        }\n\n        return distance;\n    }\n\n    private isBeyondPossibleLeft(x: number, minX: number) {\n        return x >= minX;\n    }\n    private isBeyondPossibleRight(x: number, maxX: number) {\n        return x <= maxX;\n    }\n    private isBeyondPossibleTop(y: number, minY: number) {\n        return y >= minY;\n    }\n    private isBeyondPossibleBottom(y: number, maxY: number) {\n        return y <= maxY;\n    }\n\n    isImageSlide(): boolean {\n        const currentItem = this.core.galleryItems[this.core.index];\n        return this.core.getSlideType(currentItem) === 'image';\n    }\n\n    getPossibleSwipeDragCords(\n        rotateValue: number,\n        scale?: number,\n    ): PossibleCords {\n        const dataScale = scale || this.scale || 1;\n        const elDataScale = Math.abs(dataScale);\n\n        const { top, bottom } = this.core.mediaContainerPosition;\n\n        const topBottomSpacing = Math.abs(top - bottom) / 2;\n\n        const minY =\n            (this.imageYSize - this.containerRect.height) / 2 +\n            topBottomSpacing * this.modifierX;\n        const maxY =\n            this.containerRect.height - this.imageYSize * elDataScale + minY;\n\n        const minX = (this.imageXSize - this.containerRect.width) / 2;\n\n        const maxX =\n            this.containerRect.width - this.imageXSize * elDataScale + minX;\n\n        let possibleSwipeCords = {\n            minY: minY,\n            maxY: maxY,\n            minX: minX,\n            maxX: maxX,\n        };\n\n        if (Math.abs(rotateValue) === 90) {\n            possibleSwipeCords = {\n                minY: minX,\n                maxY: maxX,\n                minX: minY,\n                maxX: maxY,\n            };\n        }\n\n        return possibleSwipeCords;\n    }\n\n    setZoomSwipeStyles(\n        LGel: lgQuery,\n        distance: { x: number; y: number },\n    ): void {\n        LGel.css(\n            'transform',\n            'translate3d(' + distance.x + 'px, ' + distance.y + 'px, 0)',\n        );\n    }\n\n    zoomSwipe(): void {\n        let startCoords = {} as Coords;\n        let endCoords = {} as Coords;\n        let isMoved = false;\n\n        // Allow x direction drag\n        let allowX = false;\n\n        // Allow Y direction drag\n        let allowY = false;\n\n        let startTime: Date = new Date();\n        let endTime: Date = new Date();\n        let possibleSwipeCords: PossibleCords;\n\n        let _LGel: lgQuery;\n\n        let $item = this.core.getSlideItem(this.core.index);\n\n        this.core.$inner.on('touchstart.lg', (e) => {\n            // Allow zoom only on image\n            if (!this.isImageSlide()) {\n                return;\n            }\n            $item = this.core.getSlideItem(this.core.index);\n            if (\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target)) &&\n                e.targetTouches.length === 1 &&\n                this.core.outer.hasClass('lg-zoomed')\n            ) {\n                e.preventDefault();\n                startTime = new Date();\n                this.core.touchAction = 'zoomSwipe';\n                _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n\n                const dragAllowedAxises = this.getDragAllowedAxises(\n                    Math.abs(this.rotateValue),\n                );\n\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n                if (allowX || allowY) {\n                    startCoords = this.getSwipeCords(\n                        e,\n                        Math.abs(this.rotateValue),\n                    );\n                }\n\n                possibleSwipeCords = this.getPossibleSwipeDragCords(\n                    this.rotateValue,\n                );\n\n                // reset opacity and transition duration\n                this.core.outer.addClass(\n                    'lg-zoom-dragging lg-zoom-drag-transition',\n                );\n            }\n        });\n\n        this.core.$inner.on('touchmove.lg', (e) => {\n            if (\n                e.targetTouches.length === 1 &&\n                this.core.touchAction === 'zoomSwipe' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                e.preventDefault();\n                this.core.touchAction = 'zoomSwipe';\n\n                endCoords = this.getSwipeCords(e, Math.abs(this.rotateValue));\n\n                const distance = this.getZoomSwipeCords(\n                    startCoords,\n                    endCoords,\n                    allowX,\n                    allowY,\n                    possibleSwipeCords,\n                );\n\n                if (\n                    Math.abs(endCoords.x - startCoords.x) > 15 ||\n                    Math.abs(endCoords.y - startCoords.y) > 15\n                ) {\n                    isMoved = true;\n                    this.setZoomSwipeStyles(_LGel, distance);\n                }\n            }\n        });\n\n        this.core.$inner.on('touchend.lg', (e) => {\n            if (\n                this.core.touchAction === 'zoomSwipe' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                this.core.touchAction = undefined;\n                this.core.outer.removeClass('lg-zoom-dragging');\n                if (!isMoved) {\n                    return;\n                }\n                isMoved = false;\n                endTime = new Date();\n                const touchDuration = endTime.valueOf() - startTime.valueOf();\n                this.touchendZoom(\n                    startCoords,\n                    endCoords,\n                    allowX,\n                    allowY,\n                    touchDuration,\n                    this.rotateValue,\n                );\n            }\n        });\n    }\n\n    zoomDrag(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isDragging = false;\n        let isMoved = false;\n\n        // Allow x direction drag\n        let allowX = false;\n\n        // Allow Y direction drag\n        let allowY = false;\n\n        let startTime: number | Date;\n        let endTime;\n\n        let possibleSwipeCords: PossibleCords;\n\n        let _LGel: lgQuery;\n\n        this.core.outer.on('mousedown.lg.zoom', (e) => {\n            // Allow zoom only on image\n            if (!this.isImageSlide()) {\n                return;\n            }\n            const $item = this.core.getSlideItem(this.core.index);\n            if (\n                this.$LG(e.target).hasClass('lg-item') ||\n                $item.get().contains(e.target)\n            ) {\n                startTime = new Date();\n                _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n\n                const dragAllowedAxises = this.getDragAllowedAxises(\n                    Math.abs(this.rotateValue),\n                );\n\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n\n                if (this.core.outer.hasClass('lg-zoomed')) {\n                    if (\n                        this.$LG(e.target).hasClass('lg-object') &&\n                        (allowX || allowY)\n                    ) {\n                        e.preventDefault();\n                        startCoords = this.getDragCords(\n                            e,\n                            Math.abs(this.rotateValue),\n                        );\n\n                        possibleSwipeCords = this.getPossibleSwipeDragCords(\n                            this.rotateValue,\n                        );\n\n                        isDragging = true;\n\n                        // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                        this.core.outer.get().scrollLeft += 1;\n                        this.core.outer.get().scrollLeft -= 1;\n\n                        this.core.outer\n                            .removeClass('lg-grab')\n                            .addClass(\n                                'lg-grabbing lg-zoom-drag-transition lg-zoom-dragging',\n                            );\n                        // reset opacity and transition duration\n                    }\n                }\n            }\n        });\n\n        this.$LG(window).on(\n            `mousemove.lg.zoom.global${this.core.lgId}`,\n            (e) => {\n                if (isDragging) {\n                    isMoved = true;\n                    endCoords = this.getDragCords(\n                        e,\n                        Math.abs(this.rotateValue),\n                    );\n\n                    const distance = this.getZoomSwipeCords(\n                        startCoords,\n                        endCoords,\n                        allowX,\n                        allowY,\n                        possibleSwipeCords,\n                    );\n\n                    this.setZoomSwipeStyles(_LGel, distance);\n                }\n            },\n        );\n\n        this.$LG(window).on(`mouseup.lg.zoom.global${this.core.lgId}`, (e) => {\n            if (isDragging) {\n                endTime = new Date();\n                isDragging = false;\n                this.core.outer.removeClass('lg-zoom-dragging');\n\n                // Fix for chrome mouse move on click\n                if (\n                    isMoved &&\n                    (startCoords.x !== endCoords.x ||\n                        startCoords.y !== endCoords.y)\n                ) {\n                    endCoords = this.getDragCords(\n                        e,\n                        Math.abs(this.rotateValue),\n                    );\n\n                    const touchDuration =\n                        endTime.valueOf() - startTime.valueOf();\n                    this.touchendZoom(\n                        startCoords,\n                        endCoords,\n                        allowX,\n                        allowY,\n                        touchDuration,\n                        this.rotateValue,\n                    );\n                }\n\n                isMoved = false;\n            }\n\n            this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n        });\n    }\n\n    closeGallery(): void {\n        this.resetZoom();\n    }\n\n    destroy(): void {\n        // Unbind all events added by lightGallery zoom plugin\n        this.$LG(window).off(`.lg.zoom.global${this.core.lgId}`);\n        this.core.LGel.off('.lg.zoom');\n        this.core.LGel.off('.zoom');\n        clearTimeout(this.zoomableTimeout);\n        this.zoomableTimeout = false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}