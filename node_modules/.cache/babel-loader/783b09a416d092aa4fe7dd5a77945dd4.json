{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VISITOR_KEYS = exports.NODE_PARENT_VALIDATIONS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.ALIAS_KEYS = void 0;\nexports.arrayOf = arrayOf;\nexports.arrayOfType = arrayOfType;\nexports.assertEach = assertEach;\nexports.assertNodeOrValueType = assertNodeOrValueType;\nexports.assertNodeType = assertNodeType;\nexports.assertOneOf = assertOneOf;\nexports.assertOptionalChainStart = assertOptionalChainStart;\nexports.assertShape = assertShape;\nexports.assertValueType = assertValueType;\nexports.chain = chain;\nexports.default = defineType;\nexports.defineAliasedType = defineAliasedType;\nexports.typeIs = typeIs;\nexports.validate = validate;\nexports.validateArrayOfType = validateArrayOfType;\nexports.validateOptional = validateOptional;\nexports.validateOptionalType = validateOptionalType;\nexports.validateType = validateType;\n\nvar _is = require(\"../validators/is\");\n\nvar _validate = require(\"../validators/validate\");\n\nconst VISITOR_KEYS = {};\nexports.VISITOR_KEYS = VISITOR_KEYS;\nconst ALIAS_KEYS = {};\nexports.ALIAS_KEYS = ALIAS_KEYS;\nconst FLIPPED_ALIAS_KEYS = {};\nexports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;\nconst NODE_FIELDS = {};\nexports.NODE_FIELDS = NODE_FIELDS;\nconst BUILDER_KEYS = {};\nexports.BUILDER_KEYS = BUILDER_KEYS;\nconst DEPRECATED_KEYS = {};\nexports.DEPRECATED_KEYS = DEPRECATED_KEYS;\nconst NODE_PARENT_VALIDATIONS = {};\nexports.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;\n\nfunction getType(val) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\nfunction validate(validate) {\n  return {\n    validate\n  };\n}\n\nfunction typeIs(typeName) {\n  return typeof typeName === \"string\" ? assertNodeType(typeName) : assertNodeType(...typeName);\n}\n\nfunction validateType(typeName) {\n  return validate(typeIs(typeName));\n}\n\nfunction validateOptional(validate) {\n  return {\n    validate,\n    optional: true\n  };\n}\n\nfunction validateOptionalType(typeName) {\n  return {\n    validate: typeIs(typeName),\n    optional: true\n  };\n}\n\nfunction arrayOf(elementType) {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nfunction arrayOfType(typeName) {\n  return arrayOf(typeIs(typeName));\n}\n\nfunction validateArrayOfType(typeName) {\n  return validate(arrayOfType(typeName));\n}\n\nfunction assertEach(callback) {\n  function validator(node, key, val) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) (0, _validate.validateChild)(node, subkey, v);\n    }\n  }\n\n  validator.each = callback;\n  return validator;\n}\n\nfunction assertOneOf(...values) {\n  function validate(node, key, val) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);\n    }\n  }\n\n  validate.oneOf = values;\n  return validate;\n}\n\nfunction assertNodeType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if ((0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);\n  }\n\n  validate.oneOfNodeTypes = types;\n  return validate;\n}\n\nfunction assertNodeOrValueType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if (getType(val) === type || (0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n  return validate;\n}\n\nfunction assertValueType(type) {\n  function validate(node, key, val) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);\n    }\n  }\n\n  validate.type = type;\n  return validate;\n}\n\nfunction assertShape(shape) {\n  function validate(node, key, val) {\n    const errors = [];\n\n    for (const property of Object.keys(shape)) {\n      try {\n        (0, _validate.validateField)(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n\n        throw error;\n      }\n    }\n\n    if (errors.length) {\n      throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\\n${errors.join(\"\\n\")}`);\n    }\n  }\n\n  validate.shapeOf = shape;\n  return validate;\n}\n\nfunction assertOptionalChainStart() {\n  function validate(node) {\n    var _current;\n\n    let current = node;\n\n    while (node) {\n      const {\n        type\n      } = current;\n\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n\n      break;\n    }\n\n    throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);\n  }\n\n  return validate;\n}\n\nfunction chain(...fns) {\n  function validate(...args) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n\n  validate.chainOf = fns;\n\n  if (fns.length >= 2 && \"type\" in fns[0] && fns[0].type === \"array\" && !(\"each\" in fns[1])) {\n    throw new Error(`An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`);\n  }\n\n  return validate;\n}\n\nconst validTypeOpts = [\"aliases\", \"builder\", \"deprecatedAlias\", \"fields\", \"inherits\", \"visitor\", \"validate\"];\nconst validFieldKeys = [\"default\", \"optional\", \"validate\"];\n\nfunction defineAliasedType(...aliases) {\n  return (type, opts = {}) => {\n    let defined = opts.aliases;\n\n    if (!defined) {\n      var _store$opts$inherits$, _defined;\n\n      if (opts.inherits) defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();\n      (_defined = defined) != null ? _defined : defined = [];\n      opts.aliases = defined;\n    }\n\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    return defineType(type, opts);\n  };\n}\n\nfunction defineType(type, opts = {}) {\n  const inherits = opts.inherits && store[opts.inherits] || {};\n  let fields = opts.fields;\n\n  if (!fields) {\n    fields = {};\n\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n\n        if (Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\") {\n          throw new Error(\"field defaults can only be primitives or empty arrays currently\");\n        }\n\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          validate: field.validate\n        };\n      }\n    }\n  }\n\n  const visitor = opts.visitor || inherits.visitor || [];\n  const aliases = opts.aliases || inherits.aliases || [];\n  const builder = opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type;\n  }\n\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n\nconst store = {};","map":{"version":3,"sources":["/Users/josh/Projects/GalaxyGirl/g-girl/node_modules/@babel/types/lib/definitions/utils.js"],"names":["Object","defineProperty","exports","value","VISITOR_KEYS","NODE_PARENT_VALIDATIONS","NODE_FIELDS","FLIPPED_ALIAS_KEYS","DEPRECATED_KEYS","BUILDER_KEYS","ALIAS_KEYS","arrayOf","arrayOfType","assertEach","assertNodeOrValueType","assertNodeType","assertOneOf","assertOptionalChainStart","assertShape","assertValueType","chain","default","defineType","defineAliasedType","typeIs","validate","validateArrayOfType","validateOptional","validateOptionalType","validateType","_is","require","_validate","getType","val","Array","isArray","typeName","optional","elementType","callback","validator","node","key","i","length","subkey","v","process","env","BABEL_TYPES_8_BREAKING","validateChild","each","values","indexOf","TypeError","JSON","stringify","oneOf","types","type","oneOfNodeTypes","oneOfNodeOrValueTypes","valid","shape","errors","property","keys","validateField","error","push","message","join","shapeOf","_current","current","callee","object","fns","args","fn","chainOf","Error","validTypeOpts","validFieldKeys","aliases","opts","defined","_store$opts$inherits$","_defined","inherits","store","slice","additional","filter","a","includes","unshift","fields","getOwnPropertyNames","field","def","visitor","builder","k","deprecatedAlias","concat","undefined","forEach","alias"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VISITOR_KEYS = exports.NODE_PARENT_VALIDATIONS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.ALIAS_KEYS = void 0;\nexports.arrayOf = arrayOf;\nexports.arrayOfType = arrayOfType;\nexports.assertEach = assertEach;\nexports.assertNodeOrValueType = assertNodeOrValueType;\nexports.assertNodeType = assertNodeType;\nexports.assertOneOf = assertOneOf;\nexports.assertOptionalChainStart = assertOptionalChainStart;\nexports.assertShape = assertShape;\nexports.assertValueType = assertValueType;\nexports.chain = chain;\nexports.default = defineType;\nexports.defineAliasedType = defineAliasedType;\nexports.typeIs = typeIs;\nexports.validate = validate;\nexports.validateArrayOfType = validateArrayOfType;\nexports.validateOptional = validateOptional;\nexports.validateOptionalType = validateOptionalType;\nexports.validateType = validateType;\n\nvar _is = require(\"../validators/is\");\n\nvar _validate = require(\"../validators/validate\");\n\nconst VISITOR_KEYS = {};\nexports.VISITOR_KEYS = VISITOR_KEYS;\nconst ALIAS_KEYS = {};\nexports.ALIAS_KEYS = ALIAS_KEYS;\nconst FLIPPED_ALIAS_KEYS = {};\nexports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;\nconst NODE_FIELDS = {};\nexports.NODE_FIELDS = NODE_FIELDS;\nconst BUILDER_KEYS = {};\nexports.BUILDER_KEYS = BUILDER_KEYS;\nconst DEPRECATED_KEYS = {};\nexports.DEPRECATED_KEYS = DEPRECATED_KEYS;\nconst NODE_PARENT_VALIDATIONS = {};\nexports.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;\n\nfunction getType(val) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\nfunction validate(validate) {\n  return {\n    validate\n  };\n}\n\nfunction typeIs(typeName) {\n  return typeof typeName === \"string\" ? assertNodeType(typeName) : assertNodeType(...typeName);\n}\n\nfunction validateType(typeName) {\n  return validate(typeIs(typeName));\n}\n\nfunction validateOptional(validate) {\n  return {\n    validate,\n    optional: true\n  };\n}\n\nfunction validateOptionalType(typeName) {\n  return {\n    validate: typeIs(typeName),\n    optional: true\n  };\n}\n\nfunction arrayOf(elementType) {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nfunction arrayOfType(typeName) {\n  return arrayOf(typeIs(typeName));\n}\n\nfunction validateArrayOfType(typeName) {\n  return validate(arrayOfType(typeName));\n}\n\nfunction assertEach(callback) {\n  function validator(node, key, val) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) (0, _validate.validateChild)(node, subkey, v);\n    }\n  }\n\n  validator.each = callback;\n  return validator;\n}\n\nfunction assertOneOf(...values) {\n  function validate(node, key, val) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);\n    }\n  }\n\n  validate.oneOf = values;\n  return validate;\n}\n\nfunction assertNodeType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if ((0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);\n  }\n\n  validate.oneOfNodeTypes = types;\n  return validate;\n}\n\nfunction assertNodeOrValueType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if (getType(val) === type || (0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n  return validate;\n}\n\nfunction assertValueType(type) {\n  function validate(node, key, val) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);\n    }\n  }\n\n  validate.type = type;\n  return validate;\n}\n\nfunction assertShape(shape) {\n  function validate(node, key, val) {\n    const errors = [];\n\n    for (const property of Object.keys(shape)) {\n      try {\n        (0, _validate.validateField)(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n\n        throw error;\n      }\n    }\n\n    if (errors.length) {\n      throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\\n${errors.join(\"\\n\")}`);\n    }\n  }\n\n  validate.shapeOf = shape;\n  return validate;\n}\n\nfunction assertOptionalChainStart() {\n  function validate(node) {\n    var _current;\n\n    let current = node;\n\n    while (node) {\n      const {\n        type\n      } = current;\n\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n\n      break;\n    }\n\n    throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);\n  }\n\n  return validate;\n}\n\nfunction chain(...fns) {\n  function validate(...args) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n\n  validate.chainOf = fns;\n\n  if (fns.length >= 2 && \"type\" in fns[0] && fns[0].type === \"array\" && !(\"each\" in fns[1])) {\n    throw new Error(`An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`);\n  }\n\n  return validate;\n}\n\nconst validTypeOpts = [\"aliases\", \"builder\", \"deprecatedAlias\", \"fields\", \"inherits\", \"visitor\", \"validate\"];\nconst validFieldKeys = [\"default\", \"optional\", \"validate\"];\n\nfunction defineAliasedType(...aliases) {\n  return (type, opts = {}) => {\n    let defined = opts.aliases;\n\n    if (!defined) {\n      var _store$opts$inherits$, _defined;\n\n      if (opts.inherits) defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();\n      (_defined = defined) != null ? _defined : defined = [];\n      opts.aliases = defined;\n    }\n\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    return defineType(type, opts);\n  };\n}\n\nfunction defineType(type, opts = {}) {\n  const inherits = opts.inherits && store[opts.inherits] || {};\n  let fields = opts.fields;\n\n  if (!fields) {\n    fields = {};\n\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n\n        if (Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\") {\n          throw new Error(\"field defaults can only be primitives or empty arrays currently\");\n        }\n\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          validate: field.validate\n        };\n      }\n    }\n  }\n\n  const visitor = opts.visitor || inherits.visitor || [];\n  const aliases = opts.aliases || inherits.aliases || [];\n  const builder = opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type;\n  }\n\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n\nconst store = {};"]},"metadata":{},"sourceType":"script"}