{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types$1.num:\n      case types$1.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types$1.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types$1.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types$1.decimal:\n        return this.estreeParseDecimalLiteral(this.state.value);\n\n      case types$1._null:\n        return this.estreeParseLiteral(null);\n\n      case types$1._true:\n        return this.estreeParseLiteral(true);\n\n      case types$1._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseMaybePrivateName(...args) {\n    const node = super.parseMaybePrivateName(...args);\n\n    if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    return node;\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n};\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = void 0;\n    this.isExpr = void 0;\n    this.preserveSpace = void 0;\n    this.override = void 0;\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\n\nconst types = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes$1.parenR.updateContext = types$1.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes$1.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types$1.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types$1._function && prevType !== types$1._class) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n};\n\ntypes$1.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.dollarBraceL.updateContext = function () {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n  this.state.context.push(statementParens ? types.parenStatement : types.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.incDec.updateContext = function () {};\n\ntypes$1._function.updateContext = types$1._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types$1.semi && prevType !== types$1._else && !(prevType === types$1._return && this.hasPrecedingLineBreak()) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes$1.backQuote.updateContext = function () {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes$1.braceHashL.updateContext = function () {\n  this.state.context.push(types.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.flags = void 0;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inStaticBlock() {\n    return (this.currentThisScope().flags & SCOPE_STATIC_BLOCK) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = [];\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.includes(name) && (scope.lexical.includes(name) || scope.functions.includes(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].declareFunctions.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types$1.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types$1.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types$1.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types$1.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types$1.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types$1.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types$1.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(types$1.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types$1._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types$1._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types$1._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types$1.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types$1._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types$1.braceL);\n\n    while (!this.match(types$1.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types$1._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types$1.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types$1._export);\n\n    if (this.eat(types$1._default)) {\n      if (this.match(types$1._function) || this.match(types$1._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types$1.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types$1.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types$1.eq)) {\n      this.eat(types$1.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types$1.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types$1.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types$1.bracketR);\n    this.expect(types$1.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types$1.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1._this)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(types$1.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types$1.braceBarL)) {\n      this.expect(types$1.braceBarL);\n      endDelim = types$1.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types$1.braceL);\n      endDelim = types$1.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types$1.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types$1.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types$1.ellipsis)) {\n      const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types$1.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types$1.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types$1.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types$1.bracketR)) break;\n      this.expect(types$1.comma);\n    }\n\n    this.expect(types$1.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === types$1._this;\n\n    if (lh.type === types$1.colon || lh.type === types$1.question) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(types$1.question)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(types$1._this)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types$1.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types$1.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types$1.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types$1.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types$1.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types$1.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(types$1.parenR);\n          this.expect(types$1.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types$1.parenL:\n        this.next();\n\n        if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          if (this.match(types$1.name) || this.match(types$1._this)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types$1.question && token !== types$1.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n            this.expect(types$1.parenR);\n            return type;\n          } else {\n            this.eat(types$1.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(types$1.parenR);\n        this.expect(types$1.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types$1._true:\n      case types$1._false:\n        node.value = this.match(types$1._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types$1.num)) {\n            return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          if (this.match(types$1.bigint)) {\n            return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types$1._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types$1._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types$1._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types$1.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(types$1.questionDot);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(types$1.bracketL);\n\n      if (!optional && this.match(types$1.bracketR)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(types$1.bracketR);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types$1.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types$1.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types$1.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types$1.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types$1.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types$1.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types$1.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types$1.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types$1.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(types$1.name, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types$1.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(types$1.questionDot, 2);\n      }\n\n      return this.finishOp(types$1.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types$1.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types$1.comma));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types$1.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types$1.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(types$1.eq) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types$1._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types$1.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentLoc = this.state.start;\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      if (firstIdent.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n      }\n\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types$1.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n\n        if (arrowExpression.type !== \"ArrowFunctionExpression\" && (_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) {\n          abort();\n        }\n\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types$1.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types$1.parenL);\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types$1.parenL);\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types$1.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types$1.comma) || this.match(types$1.braceR);\n\n    switch (this.state.type) {\n      case types$1.num:\n        {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1.string:\n        {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1._true:\n      case types$1._false:\n        {\n          const literal = this.parseBooleanLiteral();\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(types$1.braceR)) {\n      if (this.eat(types$1.ellipsis)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types$1.braceR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types$1.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types$1.braceL);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  updateContext(prevType) {\n    if (this.match(types$1.name) && this.state.value === \"of\" && prevType === types$1.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n      this.state.exprAllowed = false;\n    } else {\n      super.updateContext(prevType);\n    }\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\", false);\ntypes.j_cTag = new TokContext(\"</tag\", false);\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = function () {\n  this.state.context.push(types.j_expr);\n  this.state.context.push(types.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes$1.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types$1.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types$1.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types$1.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types$1.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types$1.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types$1.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types$1.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types$1.jsxTagStart:\n      case types$1.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types$1.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.braceL)) {\n      this.expect(types$1.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types$1.slash);\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types$1.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types$1.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types$1.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types$1.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types$1.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types$1.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types$1.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types$1.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types$1.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types$1.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types$1.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types.j_oTag) {\n        this.state.context.push(types.braceExpression);\n      } else if (curContext === types.j_expr) {\n        this.state.context.push(types.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types$1.slash) && prevType === types$1.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types$1.name);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types$1.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types$1.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types$1.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types$1.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types$1.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types$1.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types$1.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types$1.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types$1._import);\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types$1.parenR);\n\n    if (this.eat(types$1.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types$1.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n\n    if (this.match(types$1._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types$1._extends);\n    node.default = this.tsEatThenParseType(types$1.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types$1._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types$1.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types$1.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types$1.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n      this.expect(types$1.semi);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types$1.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types$1.name) && this.match(types$1.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types$1.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types$1.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types$1.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(types$1.colon, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types$1._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types$1.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types$1.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types$1.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types$1.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types$1._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types$1._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types$1.braceL);\n\n    if (this.match(types$1.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types$1.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types$1.bracketR);\n\n    if (this.match(types$1.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types$1.question);\n    } else if (this.eat(types$1.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types$1.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types$1.question);\n    const labeled = this.eat(types$1.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types$1.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(types$1.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types$1.num:\n        case types$1.bigint:\n        case types$1.string:\n        case types$1._true:\n        case types$1._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types$1.name:\n      case types$1._void:\n      case types$1._null:\n        {\n          const type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types$1.string:\n      case types$1.num:\n      case types$1.bigint:\n      case types$1._true:\n      case types$1._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types$1._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types$1._typeof:\n        return this.tsParseTypeQuery();\n\n      case types$1._import:\n        return this.tsParseImportType();\n\n      case types$1.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types$1.bracketL:\n        return this.tsParseTupleType();\n\n      case types$1.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types$1.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n      if (this.match(types$1.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types$1.name) || this.match(types$1._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types$1.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types$1.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n        return true;\n      }\n\n      if (this.match(types$1.parenR)) {\n        this.next();\n\n        if (this.match(types$1.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types$1._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types$1.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types$1.name) && !this.match(types$1._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types$1.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types$1.question);\n    node.trueType = this.tsParseType();\n    this.expect(types$1.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types$1._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types$1._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types$1.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types$1.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types$1.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types$1.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types$1.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types$1.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types$1.eq);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case types$1._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types$1._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types$1._const:\n          if (this.match(types$1._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types$1._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types$1.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types$1.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types$1.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types$1.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types$1.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types$1.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers !== undefined) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      if (allowModifiers === false && (accessibility || readonly)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types$1.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = false;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types$1.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types$1.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(types$1.name) && ahead.type === types$1.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types$1._import)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types$1.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types$1._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types$1.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types$1._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  parseClassMember(classBody, member, state) {\n    const invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n    const callParseClassMemberWithIsStatic = () => {\n      const isStatic = !!member.static;\n\n      if (isStatic && this.eat(types$1.braceL)) {\n        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types$1.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types$1.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types$1.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types$1.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(types$1.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types$1.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types$1.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types$1.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types$1._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types$1._class);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n};\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types$1.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types$1.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types$1.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types$1.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types$1.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types$1.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types$1.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types$1.modulo);\n\n      if (this.match(types$1.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types$1.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext != null && curContext.preserveSpace)) this.skipSpace();\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types$1.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types$1.braceHashL);\n      } else {\n        this.finishToken(types$1.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1());\n    } else {\n      this.finishOp(types$1.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types$1.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types$1.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types$1.star : types$1.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types$1.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types$1.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types$1.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types$1.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types$1.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types$1.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types$1.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types$1.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types$1.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types$1.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(types$1.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types$1.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types$1.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types$1.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types$1.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types$1.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types$1.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types$1.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types$1.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types$1.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types$1.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types$1.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types$1.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types$1.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.codePointAtPos(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types$1.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    this.finishToken(types$1.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types$1.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types$1.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types$1.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types$1.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types$1.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types$1.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || types$1.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types.functionExpression || parent === types.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types$1.colon && (parent === types.braceStatement || parent === types.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types$1._return || prevType === types$1.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {\n      return true;\n    }\n\n    if (prevType === types$1.braceL) {\n      return parent === types.braceStatement;\n    }\n\n    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {\n      return false;\n    }\n\n    if (prevType === types$1.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types$1.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types$1.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types$1.name);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.end, this.nextTokenStart()));\n  }\n\n  isLineTerminator() {\n    return this.eat(types$1.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.state.exportedIdentifiers;\n    this.state.exportedIdentifiers = [];\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.state.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types$1.braceL:\n        return this.parseObjectLike(types$1.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n      }\n\n      if (allowEmpty && this.match(types$1.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types$1.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types$1.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types$1.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types$1.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types$1.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types$1.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types$1.parenL) || this.match(types$1.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types$1.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types$1.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types$1.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === types$1.logicalOR || op === types$1.logicalAND;\n        const coalesce = op === types$1.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types$1.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types$1.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(types$1.exponent)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n      return this.parseModuleExpression();\n    }\n\n    const update = this.match(types$1.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types$1._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types$1._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types$1.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types$1.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types$1.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types$1.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types$1.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(types$1.privateName) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types$1.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types$1.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types$1._super:\n        return this.parseSuper();\n\n      case types$1._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types$1.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types$1.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types$1._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types$1.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types$1._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types$1.name)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(id);\n              } else {\n                return id;\n              }\n            } else if (this.match(types$1._do)) {\n              return this.parseDo(true);\n            }\n          }\n\n          if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types$1._do:\n        {\n          return this.parseDo(false);\n        }\n\n      case types$1.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types$1.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types$1._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types$1._true:\n      case types$1._false:\n        return this.parseBooleanLiteral();\n\n      case types$1.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types$1.bracketBarL:\n      case types$1.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types$1.bracketL:\n        {\n          return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types$1.braceBarL:\n      case types$1.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n        }\n\n      case types$1.braceL:\n        {\n          return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n        }\n\n      case types$1._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types$1.at:\n        this.parseDecorators();\n\n      case types$1._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types$1._new:\n        return this.parseNewOrNewTarget();\n\n      case types$1.backQuote:\n        return this.parseTemplate(false);\n\n      case types$1.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types$1.privateName:\n        {\n          const start = this.state.start;\n          const value = this.state.value;\n          node = this.parsePrivateName();\n\n          if (this.match(types$1._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(value, node.start);\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, value);\n          } else {\n            throw this.unexpected(start);\n          }\n\n          return node;\n        }\n\n      case types$1.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      case types$1.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    const node = this.startNode();\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types$1._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types$1.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types$1.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types$1.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types$1.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types$1.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types$1.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types$1.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types$1.parenL)) {\n      const args = this.parseExprList(types$1.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types$1.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.exprAllowed = false;\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types$1.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types$1.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types$1.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types$1.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types$1.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types$1.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types$1.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== types$1.privateName) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types$1.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types$1.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types$1.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types$1.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types$1.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types$1._class || type === types$1._function) && (curContext === types.functionStatement || curContext === types.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types$1.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types$1.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n\n    if (this.match(types$1.semi) || !this.match(types$1.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types$1.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(types$1.braceL);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, types$1.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(types$1.braceR);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types$1.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types$1.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types$1._break:\n      case types$1._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types$1._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types$1._do:\n        return this.parseDoStatement(node);\n\n      case types$1._for:\n        return this.parseForStatement(node);\n\n      case types$1._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types$1._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types$1._if:\n        return this.parseIfStatement(node);\n\n      case types$1._return:\n        return this.parseReturnStatement(node);\n\n      case types$1._switch:\n        return this.parseSwitchStatement(node);\n\n      case types$1._throw:\n        return this.parseThrowStatement(node);\n\n      case types$1._try:\n        return this.parseTryStatement(node);\n\n      case types$1._const:\n      case types$1._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types$1._while:\n        return this.parseWhileStatement(node);\n\n      case types$1._with:\n        return this.parseWithStatement(node);\n\n      case types$1.braceL:\n        return this.parseBlock();\n\n      case types$1.semi:\n        return this.parseEmptyStatement(node);\n\n      case types$1._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case types$1._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types$1._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types$1._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types$1.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types$1._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types$1.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types$1.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types$1.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types$1.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types$1.parenL);\n    const val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types$1.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types$1._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(types$1._in)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types$1.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types$1.braceR);) {\n      if (this.match(types$1._case) || this.match(types$1._default)) {\n        const isCase = this.match(types$1._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types$1.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types$1._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL)) {\n        this.expect(types$1.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types$1.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types$1.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types$1.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types$1._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types$1.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types$1.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types$1.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types$1.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types$1.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types$1.braceR)) {\n        if (this.eat(types$1.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types$1.star)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const isPrivate = this.match(types$1.privateName);\n    const key = this.parseClassElementName(member);\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types$1.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types$1.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === types$1.privateName && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types$1.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types$1._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types$1.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types$1.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types$1.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types$1._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types$1._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types$1._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types$1._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types$1.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type === \"StringLiteral\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types$1.string)) {\n      const result = this.parseLiteral(this.state.value, \"StringLiteral\");\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types$1.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types$1.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types$1.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types$1.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types$1.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (this.match(types$1.string)) {\n        node.key = this.parseLiteral(keyName, \"StringLiteral\");\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types$1.colon);\n\n      if (keyName !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n      }\n\n      if (attrNames.has(keyName)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types$1.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types$1.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types$1.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types$1.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;","map":{"version":3,"sources":["/Users/josh/Projects/GalaxyGirl/g-girl/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","name","options","token","set","createBinop","types$1","num","bigint","decimal","regexp","string","privateName","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","messages","templates","keys","forEach","reasonCode","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","params","raiseWithData","raiseOverwrite","message","replace","_","errorRecovery","errors","error","_raise","data","errorTemplate","errorContext","err","isLookahead","estree","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","bigInt","BigInt","_unused","String","estreeParseDecimalLiteral","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","_stmt$expression$extr","parenthesized","stmtToDirective","addExtra","parseBlockBody","args","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","refExpressionErrors","parseMaybePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","toAssignable","isLHS","toAssignableObjectExpressionProp","key","finishCallExpression","optional","callee","_node$arguments$","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","isExpr","preserveSpace","override","types","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","indexOf","checkLocalExport","FlowScope","declareFunctions","FlowScopeHandler","includes","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","getScopeHandler","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloPos","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","canInsertSemicolon","elementType","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","refNeedsArrowPos","result","tryParse","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","_node$extra","toAssignableList","trailingComma","checkParams","parse","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","readWord1","fullWord","getTokenFromCode","charCodeAt","finishOp","isBinding","element","operator","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","maybeInArrowParameters","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","j_oTag","j_expr","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","add","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","typescript","tsIsIdentifier","tsTokenCanFollowModifier","isLiteralPropertyName","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","isLineTerminator","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","containsEsc","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","prodParam","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","hasFollowingLineBreak","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","parseAccessModifier","elt","pp","parameter","bodilessType","isAmbientContext","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","parseStatementContent","tsHasSomeModifiers","modifiers","some","invalidModifersForStaticBlocks","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","inAbstractClass","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","toAssignableParenthesizedExpression","_expr$extra2","parseMaybeDecoratorArguments","checkCommaAfterRest","readToken_lt_gt","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","placeholder","PlaceHolderErrors","ClassNameIsRequired","placeholders","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","identifier","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","State","potentialArrowAt","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","strictErrors","exportedIdentifiers","tokensLength","curPosition","skipArrays","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","pushToken","checkKeywordEscapes","old","curr","skip","codePointAtPos","cp","trail","setStrict","clear","skipSpace","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","readWord","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","parent","update","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","from","declarePrivateName","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","UtilParser","op","nameStart","nameEnd","allowAsi","messageOrType","missingPlugin","expectOnePlugin","names","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","initializeScopes","oldLabels","oldExportedIdentifiers","oldInModule","oldScope","oldProdParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","_node$extra3","_node$extra2","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","elem","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","parseModuleExpression","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parsePrivateName","parseNoCallExpr","tag","quasi","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","lookaheadCh","codePointAt","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","isLetKeyword","nextCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","_unused2","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AAEA,MAAMC,UAAU,GAAG,IAAnB;AACA,MAAMC,UAAU,GAAG,IAAnB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,OAAO,GAAG,IAAhB;;AACA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAI,GAAG,EAAf,EAAmB;AAC5B,SAAKD,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKE,OAAL,GAAe,KAAK,CAApB;AACA,SAAKV,UAAL,GAAkB,KAAK,CAAvB;AACA,SAAKC,UAAL,GAAkB,KAAK,CAAvB;AACA,SAAKU,gBAAL,GAAwB,KAAK,CAA7B;AACA,SAAKT,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKC,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKC,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKC,OAAL,GAAe,KAAK,CAApB;AACA,SAAKO,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKC,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKL,KAAL,GAAaA,KAAb;AACA,SAAKE,OAAL,GAAeD,IAAI,CAACC,OAApB;AACA,SAAKV,UAAL,GAAkB,CAAC,CAACS,IAAI,CAACT,UAAzB;AACA,SAAKC,UAAL,GAAkB,CAAC,CAACQ,IAAI,CAACR,UAAzB;AACA,SAAKU,gBAAL,GAAwB,CAAC,CAACF,IAAI,CAACE,gBAA/B;AACA,SAAKT,MAAL,GAAc,CAAC,CAACO,IAAI,CAACP,MAArB;AACA,SAAKC,QAAL,GAAgB,CAAC,CAACM,IAAI,CAACN,QAAvB;AACA,SAAKC,MAAL,GAAc,CAAC,CAACK,IAAI,CAACL,MAArB;AACA,SAAKC,OAAL,GAAe,CAAC,CAACI,IAAI,CAACJ,OAAtB;AACA,SAAKO,KAAL,GAAaH,IAAI,CAACG,KAAL,IAAc,IAAd,GAAqBH,IAAI,CAACG,KAA1B,GAAkC,IAA/C;AACA,SAAKC,aAAL,GAAqB,IAArB;AACD;;AAxBa;;AA2BhB,MAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAAO,GAAG,EAAvC,EAA2C;AACzCA,EAAAA,OAAO,CAACR,OAAR,GAAkBO,IAAlB;AACA,QAAME,KAAK,GAAG,IAAIb,SAAJ,CAAcW,IAAd,EAAoBC,OAApB,CAAd;AACAJ,EAAAA,UAAU,CAACM,GAAX,CAAeH,IAAf,EAAqBE,KAArB;AACA,SAAOA,KAAP;AACD;;AAED,SAASE,WAAT,CAAqBJ,IAArB,EAA2BL,KAA3B,EAAkC;AAChC,SAAO,IAAIN,SAAJ,CAAcW,IAAd,EAAoB;AACzBjB,IAAAA,UADyB;AAEzBY,IAAAA;AAFyB,GAApB,CAAP;AAID;;AAED,MAAMU,OAAO,GAAG;AACdC,EAAAA,GAAG,EAAE,IAAIjB,SAAJ,CAAc,KAAd,EAAqB;AACxBL,IAAAA;AADwB,GAArB,CADS;AAIduB,EAAAA,MAAM,EAAE,IAAIlB,SAAJ,CAAc,QAAd,EAAwB;AAC9BL,IAAAA;AAD8B,GAAxB,CAJM;AAOdwB,EAAAA,OAAO,EAAE,IAAInB,SAAJ,CAAc,SAAd,EAAyB;AAChCL,IAAAA;AADgC,GAAzB,CAPK;AAUdyB,EAAAA,MAAM,EAAE,IAAIpB,SAAJ,CAAc,QAAd,EAAwB;AAC9BL,IAAAA;AAD8B,GAAxB,CAVM;AAad0B,EAAAA,MAAM,EAAE,IAAIrB,SAAJ,CAAc,QAAd,EAAwB;AAC9BL,IAAAA;AAD8B,GAAxB,CAbM;AAgBdgB,EAAAA,IAAI,EAAE,IAAIX,SAAJ,CAAc,MAAd,EAAsB;AAC1BL,IAAAA;AAD0B,GAAtB,CAhBQ;AAmBd2B,EAAAA,WAAW,EAAE,IAAItB,SAAJ,CAAc,OAAd,EAAuB;AAClCL,IAAAA;AADkC,GAAvB,CAnBC;AAsBd4B,EAAAA,GAAG,EAAE,IAAIvB,SAAJ,CAAc,KAAd,CAtBS;AAuBdwB,EAAAA,QAAQ,EAAE,IAAIxB,SAAJ,CAAc,GAAd,EAAmB;AAC3BN,IAAAA,UAD2B;AAE3BC,IAAAA;AAF2B,GAAnB,CAvBI;AA2Bd8B,EAAAA,YAAY,EAAE,IAAIzB,SAAJ,CAAc,IAAd,EAAoB;AAChCN,IAAAA,UADgC;AAEhCC,IAAAA;AAFgC,GAApB,CA3BA;AA+Bd+B,EAAAA,WAAW,EAAE,IAAI1B,SAAJ,CAAc,IAAd,EAAoB;AAC/BN,IAAAA,UAD+B;AAE/BC,IAAAA;AAF+B,GAApB,CA/BC;AAmCdgC,EAAAA,QAAQ,EAAE,IAAI3B,SAAJ,CAAc,GAAd,CAnCI;AAoCd4B,EAAAA,WAAW,EAAE,IAAI5B,SAAJ,CAAc,IAAd,CApCC;AAqCd6B,EAAAA,MAAM,EAAE,IAAI7B,SAAJ,CAAc,GAAd,EAAmB;AACzBN,IAAAA,UADyB;AAEzBC,IAAAA;AAFyB,GAAnB,CArCM;AAyCdmC,EAAAA,SAAS,EAAE,IAAI9B,SAAJ,CAAc,IAAd,EAAoB;AAC7BN,IAAAA,UAD6B;AAE7BC,IAAAA;AAF6B,GAApB,CAzCG;AA6CdoC,EAAAA,UAAU,EAAE,IAAI/B,SAAJ,CAAc,IAAd,EAAoB;AAC9BN,IAAAA,UAD8B;AAE9BC,IAAAA;AAF8B,GAApB,CA7CE;AAiDdqC,EAAAA,MAAM,EAAE,IAAIhC,SAAJ,CAAc,GAAd,CAjDM;AAkDdiC,EAAAA,SAAS,EAAE,IAAIjC,SAAJ,CAAc,IAAd,CAlDG;AAmDdkC,EAAAA,MAAM,EAAE,IAAIlC,SAAJ,CAAc,GAAd,EAAmB;AACzBN,IAAAA,UADyB;AAEzBC,IAAAA;AAFyB,GAAnB,CAnDM;AAuDdwC,EAAAA,MAAM,EAAE,IAAInC,SAAJ,CAAc,GAAd,CAvDM;AAwDdoC,EAAAA,KAAK,EAAE,IAAIpC,SAAJ,CAAc,GAAd,EAAmB;AACxBN,IAAAA;AADwB,GAAnB,CAxDO;AA2Dd2C,EAAAA,IAAI,EAAE,IAAIrC,SAAJ,CAAc,GAAd,EAAmB;AACvBN,IAAAA;AADuB,GAAnB,CA3DQ;AA8Dd4C,EAAAA,KAAK,EAAE,IAAItC,SAAJ,CAAc,GAAd,EAAmB;AACxBN,IAAAA;AADwB,GAAnB,CA9DO;AAiEd6C,EAAAA,WAAW,EAAE,IAAIvC,SAAJ,CAAc,IAAd,EAAoB;AAC/BN,IAAAA;AAD+B,GAApB,CAjEC;AAoEd8C,EAAAA,GAAG,EAAE,IAAIxC,SAAJ,CAAc,GAAd,CApES;AAqEdyC,EAAAA,QAAQ,EAAE,IAAIzC,SAAJ,CAAc,GAAd,EAAmB;AAC3BN,IAAAA;AAD2B,GAAnB,CArEI;AAwEdgD,EAAAA,WAAW,EAAE,IAAI1C,SAAJ,CAAc,IAAd,CAxEC;AAyEd2C,EAAAA,KAAK,EAAE,IAAI3C,SAAJ,CAAc,IAAd,EAAoB;AACzBN,IAAAA;AADyB,GAApB,CAzEO;AA4EdkD,EAAAA,QAAQ,EAAE,IAAI5C,SAAJ,CAAc,UAAd,CA5EI;AA6Ed6C,EAAAA,QAAQ,EAAE,IAAI7C,SAAJ,CAAc,KAAd,EAAqB;AAC7BN,IAAAA;AAD6B,GAArB,CA7EI;AAgFdoD,EAAAA,SAAS,EAAE,IAAI9C,SAAJ,CAAc,GAAd,EAAmB;AAC5BL,IAAAA;AAD4B,GAAnB,CAhFG;AAmFdoD,EAAAA,YAAY,EAAE,IAAI/C,SAAJ,CAAc,IAAd,EAAoB;AAChCN,IAAAA,UADgC;AAEhCC,IAAAA;AAFgC,GAApB,CAnFA;AAuFdqD,EAAAA,EAAE,EAAE,IAAIhD,SAAJ,CAAc,GAAd,CAvFU;AAwFdiD,EAAAA,IAAI,EAAE,IAAIjD,SAAJ,CAAc,GAAd,EAAmB;AACvBL,IAAAA;AADuB,GAAnB,CAxFQ;AA2FduD,EAAAA,oBAAoB,EAAE,IAAIlD,SAAJ,CAAc,OAAd,CA3FR;AA4FdmD,EAAAA,EAAE,EAAE,IAAInD,SAAJ,CAAc,GAAd,EAAmB;AACrBN,IAAAA,UADqB;AAErBG,IAAAA;AAFqB,GAAnB,CA5FU;AAgGduD,EAAAA,MAAM,EAAE,IAAIpD,SAAJ,CAAc,IAAd,EAAoB;AAC1BN,IAAAA,UAD0B;AAE1BG,IAAAA;AAF0B,GAApB,CAhGM;AAoGdwD,EAAAA,MAAM,EAAE,IAAIrD,SAAJ,CAAc,OAAd,EAAuB;AAC7BF,IAAAA,MAD6B;AAE7BC,IAAAA,OAF6B;AAG7BJ,IAAAA;AAH6B,GAAvB,CApGM;AAyGd2D,EAAAA,IAAI,EAAE,IAAItD,SAAJ,CAAc,GAAd,EAAmB;AACvBN,IAAAA,UADuB;AAEvBI,IAAAA,MAFuB;AAGvBH,IAAAA;AAHuB,GAAnB,CAzGQ;AA8Gd4D,EAAAA,KAAK,EAAE,IAAIvD,SAAJ,CAAc,GAAd,EAAmB;AACxBN,IAAAA,UADwB;AAExBI,IAAAA,MAFwB;AAGxBH,IAAAA;AAHwB,GAAnB,CA9GO;AAmHd6D,EAAAA,QAAQ,EAAEzC,WAAW,CAAC,IAAD,EAAO,CAAP,CAnHP;AAoHd0C,EAAAA,iBAAiB,EAAE1C,WAAW,CAAC,IAAD,EAAO,CAAP,CApHhB;AAqHd2C,EAAAA,SAAS,EAAE3C,WAAW,CAAC,IAAD,EAAO,CAAP,CArHR;AAsHd4C,EAAAA,UAAU,EAAE5C,WAAW,CAAC,IAAD,EAAO,CAAP,CAtHT;AAuHd6C,EAAAA,SAAS,EAAE7C,WAAW,CAAC,GAAD,EAAM,CAAN,CAvHR;AAwHd8C,EAAAA,UAAU,EAAE9C,WAAW,CAAC,GAAD,EAAM,CAAN,CAxHT;AAyHd+C,EAAAA,UAAU,EAAE/C,WAAW,CAAC,GAAD,EAAM,CAAN,CAzHT;AA0HdgD,EAAAA,QAAQ,EAAEhD,WAAW,CAAC,eAAD,EAAkB,CAAlB,CA1HP;AA2HdiD,EAAAA,UAAU,EAAEjD,WAAW,CAAC,WAAD,EAAc,CAAd,CA3HT;AA4HdkD,EAAAA,QAAQ,EAAElD,WAAW,CAAC,WAAD,EAAc,CAAd,CA5HP;AA6HdmD,EAAAA,OAAO,EAAE,IAAIlE,SAAJ,CAAc,KAAd,EAAqB;AAC5BN,IAAAA,UAD4B;AAE5BY,IAAAA,KAAK,EAAE,CAFqB;AAG5BR,IAAAA,MAH4B;AAI5BH,IAAAA;AAJ4B,GAArB,CA7HK;AAmIdwE,EAAAA,MAAM,EAAE,IAAInE,SAAJ,CAAc,GAAd,EAAmB;AACzBN,IAAAA,UADyB;AAEzBY,IAAAA,KAAK,EAAE,EAFkB;AAGzBX,IAAAA;AAHyB,GAAnB,CAnIM;AAwIdyE,EAAAA,IAAI,EAAE,IAAIpE,SAAJ,CAAc,GAAd,EAAmB;AACvBM,IAAAA,KAAK,EAAE;AADgB,GAAnB,CAxIQ;AA2Id+D,EAAAA,KAAK,EAAEtD,WAAW,CAAC,GAAD,EAAM,EAAN,CA3IJ;AA4IduD,EAAAA,QAAQ,EAAE,IAAItE,SAAJ,CAAc,IAAd,EAAoB;AAC5BN,IAAAA,UAD4B;AAE5BY,IAAAA,KAAK,EAAE,EAFqB;AAG5BD,IAAAA,gBAAgB,EAAE;AAHU,GAApB,CA5II;AAiJdkE,EAAAA,MAAM,EAAE7D,aAAa,CAAC,OAAD,CAjJP;AAkJd8D,EAAAA,KAAK,EAAE9D,aAAa,CAAC,MAAD,EAAS;AAC3BhB,IAAAA;AAD2B,GAAT,CAlJN;AAqJd+E,EAAAA,MAAM,EAAE/D,aAAa,CAAC,OAAD,CArJP;AAsJdgE,EAAAA,SAAS,EAAEhE,aAAa,CAAC,UAAD,CAtJV;AAuJdiE,EAAAA,SAAS,EAAEjE,aAAa,CAAC,UAAD,CAvJV;AAwJdkE,EAAAA,QAAQ,EAAElE,aAAa,CAAC,SAAD,EAAY;AACjChB,IAAAA;AADiC,GAAZ,CAxJT;AA2JdmF,EAAAA,GAAG,EAAEnE,aAAa,CAAC,IAAD,EAAO;AACvBd,IAAAA,MADuB;AAEvBF,IAAAA;AAFuB,GAAP,CA3JJ;AA+JdoF,EAAAA,KAAK,EAAEpE,aAAa,CAAC,MAAD,EAAS;AAC3BhB,IAAAA;AAD2B,GAAT,CA/JN;AAkKdqF,EAAAA,QAAQ,EAAErE,aAAa,CAAC,SAAD,CAlKT;AAmKdsE,EAAAA,IAAI,EAAEtE,aAAa,CAAC,KAAD,EAAQ;AACzBd,IAAAA;AADyB,GAAR,CAnKL;AAsKdqF,EAAAA,SAAS,EAAEvE,aAAa,CAAC,UAAD,EAAa;AACnCf,IAAAA;AADmC,GAAb,CAtKV;AAyKduF,EAAAA,GAAG,EAAExE,aAAa,CAAC,IAAD,CAzKJ;AA0KdyE,EAAAA,OAAO,EAAEzE,aAAa,CAAC,QAAD,EAAW;AAC/BhB,IAAAA;AAD+B,GAAX,CA1KR;AA6Kd0F,EAAAA,OAAO,EAAE1E,aAAa,CAAC,QAAD,CA7KR;AA8Kd2E,EAAAA,MAAM,EAAE3E,aAAa,CAAC,OAAD,EAAU;AAC7BhB,IAAAA,UAD6B;AAE7BI,IAAAA,MAF6B;AAG7BH,IAAAA;AAH6B,GAAV,CA9KP;AAmLd2F,EAAAA,IAAI,EAAE5E,aAAa,CAAC,KAAD,CAnLL;AAoLd6E,EAAAA,IAAI,EAAE7E,aAAa,CAAC,KAAD,CApLL;AAqLd8E,EAAAA,MAAM,EAAE9E,aAAa,CAAC,OAAD,CArLP;AAsLd+E,EAAAA,MAAM,EAAE/E,aAAa,CAAC,OAAD,EAAU;AAC7Bd,IAAAA;AAD6B,GAAV,CAtLP;AAyLd8F,EAAAA,KAAK,EAAEhF,aAAa,CAAC,MAAD,CAzLN;AA0LdiF,EAAAA,IAAI,EAAEjF,aAAa,CAAC,KAAD,EAAQ;AACzBhB,IAAAA,UADyB;AAEzBC,IAAAA;AAFyB,GAAR,CA1LL;AA8LdiG,EAAAA,KAAK,EAAElF,aAAa,CAAC,MAAD,EAAS;AAC3Bf,IAAAA;AAD2B,GAAT,CA9LN;AAiMdkG,EAAAA,MAAM,EAAEnF,aAAa,CAAC,OAAD,EAAU;AAC7Bf,IAAAA;AAD6B,GAAV,CAjMP;AAoMdmG,EAAAA,MAAM,EAAEpF,aAAa,CAAC,OAAD,EAAU;AAC7Bf,IAAAA;AAD6B,GAAV,CApMP;AAuMdoG,EAAAA,QAAQ,EAAErF,aAAa,CAAC,SAAD,EAAY;AACjChB,IAAAA;AADiC,GAAZ,CAvMT;AA0MdsG,EAAAA,OAAO,EAAEtF,aAAa,CAAC,QAAD,CA1MR;AA2MduF,EAAAA,OAAO,EAAEvF,aAAa,CAAC,QAAD,EAAW;AAC/Bf,IAAAA;AAD+B,GAAX,CA3MR;AA8MduG,EAAAA,KAAK,EAAExF,aAAa,CAAC,MAAD,EAAS;AAC3Bf,IAAAA;AAD2B,GAAT,CA9MN;AAiNdwG,EAAAA,KAAK,EAAEzF,aAAa,CAAC,MAAD,EAAS;AAC3Bf,IAAAA;AAD2B,GAAT,CAjNN;AAoNdyG,EAAAA,MAAM,EAAE1F,aAAa,CAAC,OAAD,EAAU;AAC7Bf,IAAAA;AAD6B,GAAV,CApNP;AAuNd0G,EAAAA,GAAG,EAAE3F,aAAa,CAAC,IAAD,EAAO;AACvBhB,IAAAA,UADuB;AAEvBY,IAAAA,KAAK,EAAE;AAFgB,GAAP,CAvNJ;AA2NdgG,EAAAA,WAAW,EAAE5F,aAAa,CAAC,YAAD,EAAe;AACvChB,IAAAA,UADuC;AAEvCY,IAAAA,KAAK,EAAE;AAFgC,GAAf,CA3NZ;AA+NdiG,EAAAA,OAAO,EAAE7F,aAAa,CAAC,QAAD,EAAW;AAC/BhB,IAAAA,UAD+B;AAE/BI,IAAAA,MAF+B;AAG/BH,IAAAA;AAH+B,GAAX,CA/NR;AAoOd6G,EAAAA,KAAK,EAAE9F,aAAa,CAAC,MAAD,EAAS;AAC3BhB,IAAAA,UAD2B;AAE3BI,IAAAA,MAF2B;AAG3BH,IAAAA;AAH2B,GAAT,CApON;AAyOd8G,EAAAA,OAAO,EAAE/F,aAAa,CAAC,QAAD,EAAW;AAC/BhB,IAAAA,UAD+B;AAE/BI,IAAAA,MAF+B;AAG/BH,IAAAA;AAH+B,GAAX;AAzOR,CAAhB;AAgPA,MAAM+G,SAAS,GAAG,wBAAlB;AACA,MAAMC,UAAU,GAAG,IAAIC,MAAJ,CAAWF,SAAS,CAACG,MAArB,EAA6B,GAA7B,CAAnB;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,UAAQA,IAAR;AACE,SAAK,EAAL;AACA,SAAK,EAAL;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACE,aAAO,IAAP;;AAEF;AACE,aAAO,KAAP;AARJ;AAUD;;AACD,MAAMC,cAAc,GAAG,+BAAvB;;AACA,SAASC,YAAT,CAAsBF,IAAtB,EAA4B;AAC1B,UAAQA,IAAR;AACE,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,EAAL;AACA,SAAK,GAAL;AACA,SAAK,IAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACE,aAAO,IAAP;;AAEF;AACE,aAAO,KAAP;AAzBJ;AA2BD;;AAED,MAAMG,QAAN,CAAe;AACbjH,EAAAA,WAAW,CAACkH,IAAD,EAAOC,GAAP,EAAY;AACrB,SAAKD,IAAL,GAAY,KAAK,CAAjB;AACA,SAAKE,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKE,MAAL,GAAcD,GAAd;AACD;;AANY;;AASf,MAAME,cAAN,CAAqB;AACnBrH,EAAAA,WAAW,CAACsH,KAAD,EAAQC,GAAR,EAAa;AACtB,SAAKD,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKC,GAAL,GAAW,KAAK,CAAhB;AACA,SAAKC,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKC,cAAL,GAAsB,KAAK,CAA3B;AACA,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,GAAL,GAAWA,GAAX;AACD;;AARkB;;AAWrB,SAASG,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,MAAIV,IAAI,GAAG,CAAX;AACA,MAAIW,SAAS,GAAG,CAAhB;AACA,MAAIC,KAAJ;AACApB,EAAAA,UAAU,CAACqB,SAAX,GAAuB,CAAvB;;AAEA,SAAO,CAACD,KAAK,GAAGpB,UAAU,CAACsB,IAAX,CAAgBL,KAAhB,CAAT,KAAoCG,KAAK,CAACG,KAAN,GAAcL,MAAzD,EAAiE;AAC/DV,IAAAA,IAAI;AACJW,IAAAA,SAAS,GAAGnB,UAAU,CAACqB,SAAvB;AACD;;AAED,SAAO,IAAId,QAAJ,CAAaC,IAAb,EAAmBU,MAAM,GAAGC,SAA5B,CAAP;AACD;;AAED,MAAMK,UAAN,CAAiB;AACflI,EAAAA,WAAW,GAAG;AACZ,SAAKmI,iBAAL,GAAyB,KAAzB;AACA,SAAKC,2BAAL,GAAmC,KAAnC;AACD;;AAEDC,EAAAA,SAAS,CAAC3H,IAAD,EAAO;AACd,WAAO,KAAK4H,OAAL,CAAaC,GAAb,CAAiB7H,IAAjB,CAAP;AACD;;AAED8H,EAAAA,eAAe,CAACC,MAAD,EAAS/H,IAAT,EAAe;AAC5B,QAAI,KAAK2H,SAAL,CAAeI,MAAf,CAAJ,EAA4B,OAAO,KAAKH,OAAL,CAAaI,GAAb,CAAiBD,MAAjB,EAAyB/H,IAAzB,CAAP;AAC7B;;AAZc;;AAgBjB,SAASiI,IAAT,CAAcC,KAAd,EAAqB;AACnB,SAAOA,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAZ;AACD;;AAED,MAAMC,cAAN,SAA6BZ,UAA7B,CAAwC;AACtCa,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,QAAI,KAAKxB,QAAT,EAAmBwB,OAAO,CAACC,GAAR,CAAYzB,QAAZ,GAAuB,KAAKA,QAA5B;AACnB,SAAK0B,KAAL,CAAWC,gBAAX,CAA4BC,IAA5B,CAAiCJ,OAAjC;AACA,SAAKE,KAAL,CAAWG,eAAX,CAA2BD,IAA3B,CAAgCJ,OAAhC;AACD;;AAEDM,EAAAA,gCAAgC,CAACC,IAAD,EAAOC,QAAP,EAAiBC,eAAjB,EAAkC;AAChE,QAAI,KAAKP,KAAL,CAAWG,eAAX,CAA2BR,MAA3B,KAAsC,CAA1C,EAA6C;AAC3C;AACD;;AAED,QAAIa,WAAW,GAAG,IAAlB;AACA,QAAIC,CAAC,GAAGH,QAAQ,CAACX,MAAjB;;AAEA,WAAOa,WAAW,KAAK,IAAhB,IAAwBC,CAAC,GAAG,CAAnC,EAAsC;AACpCD,MAAAA,WAAW,GAAGF,QAAQ,CAAC,EAAEG,CAAH,CAAtB;AACD;;AAED,QAAID,WAAW,KAAK,IAApB,EAA0B;AACxB;AACD;;AAED,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKV,KAAL,CAAWG,eAAX,CAA2BR,MAA/C,EAAuDe,CAAC,EAAxD,EAA4D;AAC1D,UAAI,KAAKV,KAAL,CAAWG,eAAX,CAA2BO,CAA3B,EAA8BrC,GAA9B,GAAoC,KAAK2B,KAAL,CAAWW,mBAAX,CAA+BtC,GAAvE,EAA4E;AAC1E,aAAK2B,KAAL,CAAWG,eAAX,CAA2BS,MAA3B,CAAkCF,CAAlC,EAAqC,CAArC;AACAA,QAAAA,CAAC;AACF;AACF;;AAED,UAAMG,mBAAmB,GAAG,EAA5B;;AAEA,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,KAAL,CAAWG,eAAX,CAA2BR,MAA/C,EAAuDc,CAAC,EAAxD,EAA4D;AAC1D,YAAMK,cAAc,GAAG,KAAKd,KAAL,CAAWG,eAAX,CAA2BM,CAA3B,CAAvB;;AAEA,UAAIK,cAAc,CAACzC,GAAf,GAAqBgC,IAAI,CAAChC,GAA9B,EAAmC;AACjCwC,QAAAA,mBAAmB,CAACX,IAApB,CAAyBY,cAAzB;;AAEA,YAAI,CAACP,eAAL,EAAsB;AACpB,eAAKP,KAAL,CAAWG,eAAX,CAA2BS,MAA3B,CAAkCH,CAAlC,EAAqC,CAArC;AACAA,UAAAA,CAAC;AACF;AACF,OAPD,MAOO;AACL,YAAIJ,IAAI,CAACJ,gBAAL,KAA0Bc,SAA9B,EAAyC;AACvCV,UAAAA,IAAI,CAACJ,gBAAL,GAAwB,EAAxB;AACD;;AAEDI,QAAAA,IAAI,CAACJ,gBAAL,CAAsBC,IAAtB,CAA2BY,cAA3B;AACD;AACF;;AAED,QAAIP,eAAJ,EAAqB,KAAKP,KAAL,CAAWG,eAAX,GAA6B,EAA7B;;AAErB,QAAIU,mBAAmB,CAAClB,MAApB,GAA6B,CAAjC,EAAoC;AAClCa,MAAAA,WAAW,CAACP,gBAAZ,GAA+BY,mBAA/B;AACD,KAFD,MAEO,IAAIL,WAAW,CAACP,gBAAZ,KAAiCc,SAArC,EAAgD;AACrDP,MAAAA,WAAW,CAACP,gBAAZ,GAA+B,EAA/B;AACD;AACF;;AAEDe,EAAAA,cAAc,CAACX,IAAD,EAAO;AACnB,QAAIA,IAAI,CAACY,IAAL,KAAc,SAAd,IAA2BZ,IAAI,CAACa,IAAL,CAAUvB,MAAV,GAAmB,CAAlD,EAAqD;AACrD,UAAMD,KAAK,GAAG,KAAKM,KAAL,CAAWmB,YAAzB;AACA,QAAIC,UAAJ,EAAgBC,SAAhB,EAA2BpB,gBAA3B,EAA6CQ,CAA7C,EAAgDC,CAAhD;;AAEA,QAAI,KAAKV,KAAL,CAAWC,gBAAX,CAA4BN,MAA5B,GAAqC,CAAzC,EAA4C;AAC1C,UAAI,KAAKK,KAAL,CAAWC,gBAAX,CAA4B,CAA5B,EAA+B7B,KAA/B,IAAwCiC,IAAI,CAAChC,GAAjD,EAAsD;AACpD4B,QAAAA,gBAAgB,GAAG,KAAKD,KAAL,CAAWC,gBAA9B;AACA,aAAKD,KAAL,CAAWC,gBAAX,GAA8B,EAA9B;AACD,OAHD,MAGO;AACL,aAAKD,KAAL,CAAWC,gBAAX,CAA4BN,MAA5B,GAAqC,CAArC;AACD;AACF,KAPD,MAOO,IAAID,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB;AAC3B,YAAM2B,WAAW,GAAG7B,IAAI,CAACC,KAAD,CAAxB;;AAEA,UAAI4B,WAAW,CAACrB,gBAAZ,IAAgCqB,WAAW,CAACrB,gBAAZ,CAA6B,CAA7B,EAAgC7B,KAAhC,IAAyCiC,IAAI,CAAChC,GAAlF,EAAuF;AACrF4B,QAAAA,gBAAgB,GAAGqB,WAAW,CAACrB,gBAA/B;AACA,eAAOqB,WAAW,CAACrB,gBAAnB;AACD;AACF;;AAED,QAAIP,KAAK,CAACC,MAAN,GAAe,CAAf,IAAoBF,IAAI,CAACC,KAAD,CAAJ,CAAYtB,KAAZ,IAAqBiC,IAAI,CAACjC,KAAlD,EAAyD;AACvDgD,MAAAA,UAAU,GAAG1B,KAAK,CAAC6B,GAAN,EAAb;AACD;;AAED,WAAO7B,KAAK,CAACC,MAAN,GAAe,CAAf,IAAoBF,IAAI,CAACC,KAAD,CAAJ,CAAYtB,KAAZ,IAAqBiC,IAAI,CAACjC,KAArD,EAA4D;AAC1DiD,MAAAA,SAAS,GAAG3B,KAAK,CAAC6B,GAAN,EAAZ;AACD;;AAED,QAAI,CAACF,SAAD,IAAcD,UAAlB,EAA8BC,SAAS,GAAGD,UAAZ;;AAE9B,QAAIA,UAAJ,EAAgB;AACd,cAAQf,IAAI,CAACY,IAAb;AACE,aAAK,kBAAL;AACE,eAAKb,gCAAL,CAAsCC,IAAtC,EAA4CA,IAAI,CAACmB,UAAjD;AACA;;AAEF,aAAK,eAAL;AACE,eAAKpB,gCAAL,CAAsCC,IAAtC,EAA4CA,IAAI,CAACmB,UAAjD,EAA6D,IAA7D;AACA;;AAEF,aAAK,gBAAL;AACE,eAAKpB,gCAAL,CAAsCC,IAAtC,EAA4CA,IAAI,CAACoB,SAAjD;AACA;;AAEF,aAAK,iBAAL;AACE,eAAKrB,gCAAL,CAAsCC,IAAtC,EAA4CA,IAAI,CAACC,QAAjD;AACA;;AAEF,aAAK,cAAL;AACE,eAAKF,gCAAL,CAAsCC,IAAtC,EAA4CA,IAAI,CAACC,QAAjD,EAA2D,IAA3D;AACA;AAnBJ;AAqBD,KAtBD,MAsBO,IAAI,KAAKN,KAAL,CAAWW,mBAAX,KAAmC,KAAKX,KAAL,CAAWW,mBAAX,CAA+BM,IAA/B,KAAwC,iBAAxC,IAA6DZ,IAAI,CAACY,IAAL,KAAc,iBAA3E,IAAgG,KAAKjB,KAAL,CAAWW,mBAAX,CAA+BM,IAA/B,KAAwC,iBAAxC,IAA6DZ,IAAI,CAACY,IAAL,KAAc,iBAA9M,CAAJ,EAAsO;AAC3O,WAAKb,gCAAL,CAAsCC,IAAtC,EAA4C,CAAC,KAAKL,KAAL,CAAWW,mBAAZ,CAA5C;AACD;;AAED,QAAIU,SAAJ,EAAe;AACb,UAAIA,SAAS,CAAClB,eAAd,EAA+B;AAC7B,YAAIkB,SAAS,KAAKhB,IAAd,IAAsBgB,SAAS,CAAClB,eAAV,CAA0BR,MAA1B,GAAmC,CAAzD,IAA8DF,IAAI,CAAC4B,SAAS,CAAClB,eAAX,CAAJ,CAAgC9B,GAAhC,IAAuCgC,IAAI,CAACjC,KAA9G,EAAqH;AACnHiC,UAAAA,IAAI,CAACF,eAAL,GAAuBkB,SAAS,CAAClB,eAAjC;AACA,iBAAOkB,SAAS,CAAClB,eAAjB;AACD,SAHD,MAGO;AACL,eAAKM,CAAC,GAAGY,SAAS,CAAClB,eAAV,CAA0BR,MAA1B,GAAmC,CAA5C,EAA+Cc,CAAC,IAAI,CAApD,EAAuD,EAAEA,CAAzD,EAA4D;AAC1D,gBAAIY,SAAS,CAAClB,eAAV,CAA0BM,CAA1B,EAA6BpC,GAA7B,IAAoCgC,IAAI,CAACjC,KAA7C,EAAoD;AAClDiC,cAAAA,IAAI,CAACF,eAAL,GAAuBkB,SAAS,CAAClB,eAAV,CAA0BS,MAA1B,CAAiC,CAAjC,EAAoCH,CAAC,GAAG,CAAxC,CAAvB;AACA;AACD;AACF;AACF;AACF;AACF,KAdD,MAcO,IAAI,KAAKT,KAAL,CAAWG,eAAX,CAA2BR,MAA3B,GAAoC,CAAxC,EAA2C;AAChD,UAAIF,IAAI,CAAC,KAAKO,KAAL,CAAWG,eAAZ,CAAJ,CAAiC9B,GAAjC,IAAwCgC,IAAI,CAACjC,KAAjD,EAAwD;AACtD,YAAI,KAAK4B,KAAL,CAAWW,mBAAf,EAAoC;AAClC,eAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKV,KAAL,CAAWG,eAAX,CAA2BR,MAA3C,EAAmDe,CAAC,EAApD,EAAwD;AACtD,gBAAI,KAAKV,KAAL,CAAWG,eAAX,CAA2BO,CAA3B,EAA8BrC,GAA9B,GAAoC,KAAK2B,KAAL,CAAWW,mBAAX,CAA+BtC,GAAvE,EAA4E;AAC1E,mBAAK2B,KAAL,CAAWG,eAAX,CAA2BS,MAA3B,CAAkCF,CAAlC,EAAqC,CAArC;AACAA,cAAAA,CAAC;AACF;AACF;AACF;;AAED,YAAI,KAAKV,KAAL,CAAWG,eAAX,CAA2BR,MAA3B,GAAoC,CAAxC,EAA2C;AACzCU,UAAAA,IAAI,CAACF,eAAL,GAAuB,KAAKH,KAAL,CAAWG,eAAlC;AACA,eAAKH,KAAL,CAAWG,eAAX,GAA6B,EAA7B;AACD;AACF,OAdD,MAcO;AACL,aAAKM,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKT,KAAL,CAAWG,eAAX,CAA2BR,MAA3C,EAAmDc,CAAC,EAApD,EAAwD;AACtD,cAAI,KAAKT,KAAL,CAAWG,eAAX,CAA2BM,CAA3B,EAA8BpC,GAA9B,GAAoCgC,IAAI,CAACjC,KAA7C,EAAoD;AAClD;AACD;AACF;;AAED,cAAM+B,eAAe,GAAG,KAAKH,KAAL,CAAWG,eAAX,CAA2BuB,KAA3B,CAAiC,CAAjC,EAAoCjB,CAApC,CAAxB;;AAEA,YAAIN,eAAe,CAACR,MAApB,EAA4B;AAC1BU,UAAAA,IAAI,CAACF,eAAL,GAAuBA,eAAvB;AACD;;AAEDF,QAAAA,gBAAgB,GAAG,KAAKD,KAAL,CAAWG,eAAX,CAA2BuB,KAA3B,CAAiCjB,CAAjC,CAAnB;;AAEA,YAAIR,gBAAgB,CAACN,MAAjB,KAA4B,CAAhC,EAAmC;AACjCM,UAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;AACF;;AAED,SAAKD,KAAL,CAAWW,mBAAX,GAAiCN,IAAjC;;AAEA,QAAIJ,gBAAJ,EAAsB;AACpB,UAAIA,gBAAgB,CAACN,MAAjB,IAA2BM,gBAAgB,CAAC,CAAD,CAAhB,CAAoB7B,KAApB,IAA6BiC,IAAI,CAACjC,KAA7D,IAAsEqB,IAAI,CAACQ,gBAAD,CAAJ,CAAuB5B,GAAvB,IAA8BgC,IAAI,CAAChC,GAA7G,EAAkH;AAChHgC,QAAAA,IAAI,CAACsB,aAAL,GAAqB1B,gBAArB;AACD,OAFD,MAEO;AACL,cAAM2B,yBAAyB,GAAG3B,gBAAgB,CAAC4B,SAAjB,CAA2B/B,OAAO,IAAIA,OAAO,CAACzB,GAAR,IAAegC,IAAI,CAAChC,GAA1D,CAAlC;;AAEA,YAAIuD,yBAAyB,GAAG,CAAhC,EAAmC;AACjCvB,UAAAA,IAAI,CAACsB,aAAL,GAAqB1B,gBAAgB,CAACyB,KAAjB,CAAuB,CAAvB,EAA0BE,yBAA1B,CAArB;AACAvB,UAAAA,IAAI,CAACJ,gBAAL,GAAwBA,gBAAgB,CAACyB,KAAjB,CAAuBE,yBAAvB,CAAxB;AACD,SAHD,MAGO;AACLvB,UAAAA,IAAI,CAACJ,gBAAL,GAAwBA,gBAAxB;AACD;AACF;AACF;;AAEDP,IAAAA,KAAK,CAACQ,IAAN,CAAWG,IAAX;AACD;;AAzLqC;;AA6LxC,MAAMyB,UAAU,GAAG3L,MAAM,CAAC4L,MAAP,CAAc;AAC/BC,EAAAA,WAAW,EAAE,2BADkB;AAE/BC,EAAAA,qBAAqB,EAAE;AAFQ,CAAd,CAAnB;AAKA,MAAMC,aAAa,GAAGC,kBAAkB,CAAC;AACvCC,EAAAA,mBAAmB,EAAE,gCADkB;AAEvCC,EAAAA,gBAAgB,EAAE,6DAFqB;AAGvCC,EAAAA,qCAAqC,EAAE,0EAHA;AAIvCC,EAAAA,sBAAsB,EAAE,6DAJe;AAKvCC,EAAAA,mCAAmC,EAAE,0DALE;AAMvCC,EAAAA,8BAA8B,EAAE,sDANO;AAOvCC,EAAAA,sBAAsB,EAAE,kFAPe;AAQvCC,EAAAA,uBAAuB,EAAE,iDARc;AASvCC,EAAAA,cAAc,EAAE,sDATuB;AAUvCC,EAAAA,cAAc,EAAE,yDAVuB;AAWvCC,EAAAA,sBAAsB,EAAE,iEAXe;AAYvCC,EAAAA,qBAAqB,EAAE,mDAZgB;AAavCC,EAAAA,4BAA4B,EAAE,4DAbS;AAcvCC,EAAAA,qBAAqB,EAAE,2CAdgB;AAevCC,EAAAA,kBAAkB,EAAE,yCAfmB;AAgBvCC,EAAAA,sBAAsB,EAAE,mCAhBe;AAiBvCC,EAAAA,6BAA6B,EAAE,uCAjBQ;AAkBvCC,EAAAA,qBAAqB,EAAE,mKAlBgB;AAmBvCC,EAAAA,oBAAoB,EAAE,iFAnBiB;AAoBvCC,EAAAA,oBAAoB,EAAE,kHApBiB;AAqBvCC,EAAAA,kBAAkB,EAAE,iDArBmB;AAsBvCC,EAAAA,oBAAoB,EAAE,+CAtBiB;AAuBvCC,EAAAA,kBAAkB,EAAE,0CAvBmB;AAwBvCC,EAAAA,sBAAsB,EAAE,oGAxBe;AAyBvCC,EAAAA,oBAAoB,EAAE,0CAzBiB;AA0BvCC,EAAAA,sBAAsB,EAAE,6CA1Be;AA2BvCC,EAAAA,eAAe,EAAE,sEA3BsB;AA4BvCC,EAAAA,cAAc,EAAE,qCA5BuB;AA6BvCC,EAAAA,oBAAoB,EAAE,oCA7BiB;AA8BvCC,EAAAA,gBAAgB,EAAE,oCA9BqB;AA+BvCC,EAAAA,0BAA0B,EAAE,yBA/BW;AAgCvCC,EAAAA,qBAAqB,EAAE,sIAhCgB;AAiCvCC,EAAAA,6BAA6B,EAAE,gEAjCQ;AAkCvCC,EAAAA,sBAAsB,EAAE,6DAlCe;AAmCvCC,EAAAA,UAAU,EAAE,yDAnC2B;AAoCvCC,EAAAA,QAAQ,EAAE,+DApC6B;AAqCvCC,EAAAA,iCAAiC,EAAE,qEArCI;AAsCvCC,EAAAA,oBAAoB,EAAE,iBAtCiB;AAuCvCC,EAAAA,4BAA4B,EAAE,4EAvCS;AAwCvCC,EAAAA,aAAa,EAAE,+BAxCwB;AAyCvCC,EAAAA,qBAAqB,EAAE,mGAzCgB;AA0CvCC,EAAAA,+BAA+B,EAAE,4DA1CM;AA2CvCC,EAAAA,eAAe,EAAE,iCA3CsB;AA4CvCC,EAAAA,0BAA0B,EAAE,kCA5CW;AA6CvCC,EAAAA,wBAAwB,EAAE,qCA7Ca;AA8CvCC,EAAAA,oBAAoB,EAAE,wBA9CiB;AA+CvCC,EAAAA,gBAAgB,EAAE,2BA/CqB;AAgDvCC,EAAAA,cAAc,EAAE,kBAhDuB;AAiDvCC,EAAAA,YAAY,EAAE,8BAjDyB;AAkDvCC,EAAAA,qBAAqB,EAAE,gCAlDgB;AAmDvCC,EAAAA,6BAA6B,EAAE,sCAnDQ;AAoDvCC,EAAAA,0BAA0B,EAAE,gCApDW;AAqDvCC,EAAAA,iBAAiB,EAAE,wBArDoB;AAsDvCC,EAAAA,UAAU,EAAE,+BAtD2B;AAuDvCC,EAAAA,iBAAiB,EAAE,uCAvDoB;AAwDvCC,EAAAA,aAAa,EAAE,iBAxDwB;AAyDvCC,EAAAA,wBAAwB,EAAE,gEAzDa;AA0DvCC,EAAAA,wBAAwB,EAAE,4BA1Da;AA2DvCC,EAAAA,8BAA8B,EAAE,2CA3DO;AA4DvCC,EAAAA,6BAA6B,EAAE,kCA5DQ;AA6DvCC,EAAAA,6BAA6B,EAAE,4BA7DQ;AA8DvCC,EAAAA,qBAAqB,EAAE,wEA9DgB;AA+DvCC,EAAAA,4BAA4B,EAAE,mCA/DS;AAgEvCC,EAAAA,kBAAkB,EAAE,iCAhEmB;AAiEvCC,EAAAA,mBAAmB,EAAE,6EAjEkB;AAkEvCC,EAAAA,yBAAyB,EAAE,uCAlEY;AAmEvCC,EAAAA,oBAAoB,EAAE,kCAnEiB;AAoEvCC,EAAAA,gBAAgB,EAAE,2BApEqB;AAqEvCC,EAAAA,qBAAqB,EAAE,6DArEgB;AAsEvCC,EAAAA,gBAAgB,EAAE,oBAtEqB;AAuEvCC,EAAAA,oBAAoB,EAAE,4CAvEiB;AAwEvCC,EAAAA,yBAAyB,EAAE,qFAxEY;AAyEvCC,EAAAA,gCAAgC,EAAE,+CAzEK;AA0EvCC,EAAAA,2BAA2B,EAAE,8DA1EU;AA2EvCC,EAAAA,iCAAiC,EAAE,yDA3EI;AA4EvCC,EAAAA,gCAAgC,EAAE,gEA5EK;AA6EvCC,EAAAA,qBAAqB,EAAE,6BA7EgB;AA8EvCC,EAAAA,wBAAwB,EAAE,2BA9Ea;AA+EvCC,EAAAA,iBAAiB,EAAE,8BA/EoB;AAgFvCC,EAAAA,gBAAgB,EAAE,kCAhFqB;AAiFvCC,EAAAA,gBAAgB,EAAE,mCAjFqB;AAkFvCC,EAAAA,gCAAgC,EAAE,6FAlFK;AAmFvCC,EAAAA,iBAAiB,EAAE,yFAnFoB;AAoFvCC,EAAAA,qBAAqB,EAAE,0DApFgB;AAqFvCC,EAAAA,0BAA0B,EAAE,4DArFW;AAsFvCC,EAAAA,qBAAqB,EAAE,iEAtFgB;AAuFvCC,EAAAA,SAAS,EAAE,sBAvF4B;AAwFvCC,EAAAA,kBAAkB,EAAE,gDAxFmB;AAyFvCC,EAAAA,gBAAgB,EAAE,uCAzFqB;AA0FvCC,EAAAA,mBAAmB,EAAE,mGA1FkB;AA2FvCC,EAAAA,8BAA8B,EAAE,iEA3FO;AA4FvCC,EAAAA,8BAA8B,EAAE,oEA5FO;AA6FvCC,EAAAA,mBAAmB,EAAE,8DA7FkB;AA8FvCC,EAAAA,sBAAsB,EAAE,sEA9Fe;AA+FvCC,EAAAA,iCAAiC,EAAE,8FA/FI;AAgGvCC,EAAAA,mBAAmB,EAAE,wGAhGkB;AAiGvCC,EAAAA,wBAAwB,EAAE,6BAjGa;AAkGvCC,EAAAA,yCAAyC,EAAE,mIAlGJ;AAmGvCC,EAAAA,2CAA2C,EAAE,qIAnGN;AAoGvCC,EAAAA,4CAA4C,EAAE,sIApGP;AAqGvCC,EAAAA,aAAa,EAAE,mDArGwB;AAsGvCC,EAAAA,iBAAiB,EAAE,+CAtGoB;AAuGvCC,EAAAA,cAAc,EAAE,0HAvGuB;AAwGvCC,EAAAA,eAAe,EAAE,uDAxGsB;AAyGvCC,EAAAA,YAAY,EAAE,yCAzGyB;AA0GvCC,EAAAA,mBAAmB,EAAE,mCA1GkB;AA2GvCC,EAAAA,0BAA0B,EAAE,8BA3GW;AA4GvCC,EAAAA,cAAc,EAAE,qFA5GuB;AA6GvCC,EAAAA,mBAAmB,EAAE,wDA7GkB;AA8GvCC,EAAAA,kBAAkB,EAAE,uDA9GmB;AA+GvCC,EAAAA,UAAU,EAAE,wBA/G2B;AAgHvCC,EAAAA,eAAe,EAAE,mJAhHsB;AAiHvCC,EAAAA,iBAAiB,EAAE,4CAjHoB;AAkHvCC,EAAAA,iBAAiB,EAAE,iDAlHoB;AAmHvCC,EAAAA,wCAAwC,EAAE,kIAnHH;AAoHvCC,EAAAA,0CAA0C,EAAE,oIApHL;AAqHvCC,EAAAA,2CAA2C,EAAE,qIArHN;AAsHvCC,EAAAA,6BAA6B,EAAE,kCAtHQ;AAuHvCC,EAAAA,gCAAgC,EAAE,0FAvHK;AAwHvCC,EAAAA,wBAAwB,EAAE,oCAxHa;AAyHvCC,EAAAA,sBAAsB,EAAE,yDAzHe;AA0HvCC,EAAAA,iBAAiB,EAAE,0BA1HoB;AA2HvCC,EAAAA,0BAA0B,EAAE,6DA3HW;AA4HvCC,EAAAA,4BAA4B,EAAE,kEA5HS;AA6HvCC,EAAAA,mBAAmB,EAAE,iEA7HkB;AA8HvCC,EAAAA,0BAA0B,EAAE,yDA9HW;AA+HvCC,EAAAA,sBAAsB,EAAE,yJA/He;AAgIvCC,EAAAA,sBAAsB,EAAE,gCAhIe;AAiIvCC,EAAAA,eAAe,EAAE,wDAjIsB;AAkIvCC,EAAAA,eAAe,EAAE,wBAlIsB;AAmIvCC,EAAAA,kCAAkC,EAAE,kFAnIG;AAoIvCC,EAAAA,eAAe,EAAE,iDApIsB;AAqIvCC,EAAAA,0BAA0B,EAAE,qDArIW;AAsIvCC,EAAAA,wBAAwB,EAAE,6EAtIa;AAuIvCC,EAAAA,iBAAiB,EAAE,2DAvIoB;AAwIvCC,EAAAA,uBAAuB,EAAE,+CAxIc;AAyIvCC,EAAAA,6BAA6B,EAAE,mDAzIQ;AA0IvCC,EAAAA,4BAA4B,EAAE,kEA1IS;AA2IvCC,EAAAA,gBAAgB,EAAE,uHA3IqB;AA4IvCC,EAAAA,mBAAmB,EAAE,uBA5IkB;AA6IvCC,EAAAA,kBAAkB,EAAE,kCA7ImB;AA8IvCC,EAAAA,kBAAkB,EAAE,+BA9ImB;AA+IvCC,EAAAA,oBAAoB,EAAE,wBA/IiB;AAgJvCC,EAAAA,gBAAgB,EAAE,4CAhJqB;AAiJvCC,EAAAA,sBAAsB,EAAE,uDAjJe;AAkJvCC,EAAAA,gBAAgB,EAAE,uDAlJqB;AAmJvCC,EAAAA,yBAAyB,EAAE;AAnJY,CAAD,EAoJrCxJ,UAAU,CAACE,WApJ0B,CAAxC;AAqJA,MAAMuJ,6BAA6B,GAAGpJ,kBAAkB,CAAC;AACvDqJ,EAAAA,uBAAuB,EAAG,yDAD6B;AAEvDC,EAAAA,mBAAmB,EAAG;AAFiC,CAAD,EAGrD3J,UAAU,CAACG,qBAH0C,CAAxD;;AAKA,SAASE,kBAAT,CAA4BuJ,QAA5B,EAAsC9N,IAAtC,EAA4C;AAC1C,QAAM+N,SAAS,GAAG,EAAlB;AACAxV,EAAAA,MAAM,CAACyV,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8BC,UAAU,IAAI;AAC1CH,IAAAA,SAAS,CAACG,UAAD,CAAT,GAAwB3V,MAAM,CAAC4L,MAAP,CAAc;AACpCnE,MAAAA,IADoC;AAEpCkO,MAAAA,UAFoC;AAGpCrS,MAAAA,QAAQ,EAAEiS,QAAQ,CAACI,UAAD;AAHkB,KAAd,CAAxB;AAKD,GAND;AAOA,SAAO3V,MAAM,CAAC4L,MAAP,CAAc4J,SAAd,CAAP;AACD;;AACD,MAAMI,WAAN,SAA0BnM,cAA1B,CAAyC;AACvCoM,EAAAA,sBAAsB,CAACC,GAAD,EAAM;AAC1B,QAAIlM,GAAJ;AACA,QAAIkM,GAAG,KAAK,KAAKjM,KAAL,CAAW5B,KAAvB,EAA8B2B,GAAG,GAAG,KAAKC,KAAL,CAAWkM,QAAjB,CAA9B,KAA6D,IAAID,GAAG,KAAK,KAAKjM,KAAL,CAAWmM,YAAvB,EAAqCpM,GAAG,GAAG,KAAKC,KAAL,CAAWoM,eAAjB,CAArC,KAA2E,IAAIH,GAAG,KAAK,KAAKjM,KAAL,CAAW3B,GAAvB,EAA4B0B,GAAG,GAAG,KAAKC,KAAL,CAAWqM,MAAjB,CAA5B,KAAyD,IAAIJ,GAAG,KAAK,KAAKjM,KAAL,CAAWsM,UAAvB,EAAmCvM,GAAG,GAAG,KAAKC,KAAL,CAAWuM,aAAjB,CAAnC,KAAuExM,GAAG,GAAGvB,WAAW,CAAC,KAAKC,KAAN,EAAawN,GAAb,CAAjB;AACxQ,WAAOlM,GAAP;AACD;;AAEDyM,EAAAA,KAAK,CAACP,GAAD,EAAM;AACTrO,IAAAA,IADS;AAETkO,IAAAA,UAFS;AAGTrS,IAAAA;AAHS,GAAN,EAIF,GAAGgT,MAJD,EAIS;AACZ,WAAO,KAAKC,aAAL,CAAmBT,GAAnB,EAAwB;AAC7BrO,MAAAA,IAD6B;AAE7BkO,MAAAA;AAF6B,KAAxB,EAGJrS,QAHI,EAGM,GAAGgT,MAHT,CAAP;AAID;;AAEDE,EAAAA,cAAc,CAACV,GAAD,EAAM;AAClBrO,IAAAA,IADkB;AAElBnE,IAAAA;AAFkB,GAAN,EAGX,GAAGgT,MAHQ,EAGA;AACZ,UAAM1M,GAAG,GAAG,KAAKiM,sBAAL,CAA4BC,GAA5B,CAAZ;AACA,UAAMW,OAAO,GAAGnT,QAAQ,CAACoT,OAAT,CAAiB,SAAjB,EAA4B,CAACC,CAAD,EAAIrM,CAAJ,KAAUgM,MAAM,CAAChM,CAAD,CAA5C,IAAoD,KAAIV,GAAG,CAAC/B,IAAK,IAAG+B,GAAG,CAAC7B,MAAO,GAA/F;;AAEA,QAAI,KAAKzG,OAAL,CAAasV,aAAjB,EAAgC;AAC9B,YAAMC,MAAM,GAAG,KAAKhN,KAAL,CAAWgN,MAA1B;;AAEA,WAAK,IAAIvM,CAAC,GAAGuM,MAAM,CAACrN,MAAP,GAAgB,CAA7B,EAAgCc,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,cAAMwM,KAAK,GAAGD,MAAM,CAACvM,CAAD,CAApB;;AAEA,YAAIwM,KAAK,CAAChB,GAAN,KAAcA,GAAlB,EAAuB;AACrB,iBAAO9V,MAAM,CAAC8D,MAAP,CAAcgT,KAAd,EAAqB;AAC1BL,YAAAA;AAD0B,WAArB,CAAP;AAGD,SAJD,MAIO,IAAIK,KAAK,CAAChB,GAAN,GAAYA,GAAhB,EAAqB;AAC1B;AACD;AACF;AACF;;AAED,WAAO,KAAKiB,MAAL,CAAY;AACjBtP,MAAAA,IADiB;AAEjBmC,MAAAA,GAFiB;AAGjBkM,MAAAA;AAHiB,KAAZ,EAIJW,OAJI,CAAP;AAKD;;AAEDF,EAAAA,aAAa,CAACT,GAAD,EAAMkB,IAAN,EAAYC,aAAZ,EAA2B,GAAGX,MAA9B,EAAsC;AACjD,UAAM1M,GAAG,GAAG,KAAKiM,sBAAL,CAA4BC,GAA5B,CAAZ;AACA,UAAMW,OAAO,GAAGQ,aAAa,CAACP,OAAd,CAAsB,SAAtB,EAAiC,CAACC,CAAD,EAAIrM,CAAJ,KAAUgM,MAAM,CAAChM,CAAD,CAAjD,IAAyD,KAAIV,GAAG,CAAC/B,IAAK,IAAG+B,GAAG,CAAC7B,MAAO,GAApG;AACA,WAAO,KAAKgP,MAAL,CAAY/W,MAAM,CAAC8D,MAAP,CAAc;AAC/B8F,MAAAA,GAD+B;AAE/BkM,MAAAA;AAF+B,KAAd,EAGhBkB,IAHgB,CAAZ,EAGGP,OAHH,CAAP;AAID;;AAEDM,EAAAA,MAAM,CAACG,YAAD,EAAeT,OAAf,EAAwB;AAC5B,UAAMU,GAAG,GAAG,IAAItL,WAAJ,CAAgB4K,OAAhB,CAAZ;AACAzW,IAAAA,MAAM,CAAC8D,MAAP,CAAcqT,GAAd,EAAmBD,YAAnB;;AAEA,QAAI,KAAK5V,OAAL,CAAasV,aAAjB,EAAgC;AAC9B,UAAI,CAAC,KAAKQ,WAAV,EAAuB,KAAKvN,KAAL,CAAWgN,MAAX,CAAkB9M,IAAlB,CAAuBoN,GAAvB;AACvB,aAAOA,GAAP;AACD,KAHD,MAGO;AACL,YAAMA,GAAN;AACD;AACF;;AAnEsC;;AAuEzC,IAAIE,MAAM,GAAIC,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACnDC,EAAAA,wBAAwB,CAAC;AACvBC,IAAAA,OADuB;AAEvBC,IAAAA;AAFuB,GAAD,EAGrB;AACD,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAI;AACFA,MAAAA,KAAK,GAAG,IAAIpQ,MAAJ,CAAWkQ,OAAX,EAAoBC,KAApB,CAAR;AACD,KAFD,CAEE,OAAOE,CAAP,EAAU,CAAE;;AAEd,UAAMzN,IAAI,GAAG,KAAK0N,kBAAL,CAAwBF,KAAxB,CAAb;AACAxN,IAAAA,IAAI,CAACwN,KAAL,GAAa;AACXF,MAAAA,OADW;AAEXC,MAAAA;AAFW,KAAb;AAIA,WAAOvN,IAAP;AACD;;AAED2N,EAAAA,wBAAwB,CAAC1X,KAAD,EAAQ;AAC9B,QAAI2X,MAAJ;;AAEA,QAAI;AACFA,MAAAA,MAAM,GAAGC,MAAM,CAAC5X,KAAD,CAAf;AACD,KAFD,CAEE,OAAO6X,OAAP,EAAgB;AAChBF,MAAAA,MAAM,GAAG,IAAT;AACD;;AAED,UAAM5N,IAAI,GAAG,KAAK0N,kBAAL,CAAwBE,MAAxB,CAAb;AACA5N,IAAAA,IAAI,CAACtI,MAAL,GAAcqW,MAAM,CAAC/N,IAAI,CAAC/J,KAAL,IAAcA,KAAf,CAApB;AACA,WAAO+J,IAAP;AACD;;AAEDgO,EAAAA,yBAAyB,CAAC/X,KAAD,EAAQ;AAC/B,UAAM0B,OAAO,GAAG,IAAhB;AACA,UAAMqI,IAAI,GAAG,KAAK0N,kBAAL,CAAwB/V,OAAxB,CAAb;AACAqI,IAAAA,IAAI,CAACrI,OAAL,GAAeoW,MAAM,CAAC/N,IAAI,CAAC/J,KAAL,IAAcA,KAAf,CAArB;AACA,WAAO+J,IAAP;AACD;;AAED0N,EAAAA,kBAAkB,CAACzX,KAAD,EAAQ;AACxB,WAAO,KAAKgY,YAAL,CAAkBhY,KAAlB,EAAyB,SAAzB,CAAP;AACD;;AAEDiY,EAAAA,eAAe,CAACC,SAAD,EAAY;AACzB,UAAMC,gBAAgB,GAAGD,SAAS,CAAClY,KAAnC;AACA,UAAMoY,IAAI,GAAG,KAAKC,WAAL,CAAiBH,SAAS,CAACpQ,KAA3B,EAAkCoQ,SAAS,CAACzO,GAAV,CAAc3B,KAAhD,CAAb;AACA,UAAMwQ,UAAU,GAAG,KAAKD,WAAL,CAAiBF,gBAAgB,CAACrQ,KAAlC,EAAyCqQ,gBAAgB,CAAC1O,GAAjB,CAAqB3B,KAA9D,CAAnB;AACAwQ,IAAAA,UAAU,CAACtY,KAAX,GAAmBmY,gBAAgB,CAACI,KAAjB,CAAuBC,eAA1C;AACAF,IAAAA,UAAU,CAACG,GAAX,GAAiBN,gBAAgB,CAACI,KAAjB,CAAuBE,GAAxC;AACAL,IAAAA,IAAI,CAACE,UAAL,GAAkB,KAAKI,YAAL,CAAkBJ,UAAlB,EAA8B,SAA9B,EAAyCH,gBAAgB,CAACpQ,GAA1D,EAA+DoQ,gBAAgB,CAAC1O,GAAjB,CAAqB1B,GAApF,CAAlB;AACAqQ,IAAAA,IAAI,CAACF,SAAL,GAAiBC,gBAAgB,CAACI,KAAjB,CAAuBE,GAAvB,CAA2BrN,KAA3B,CAAiC,CAAjC,EAAoC,CAAC,CAArC,CAAjB;AACA,WAAO,KAAKsN,YAAL,CAAkBN,IAAlB,EAAwB,qBAAxB,EAA+CF,SAAS,CAACnQ,GAAzD,EAA8DmQ,SAAS,CAACzO,GAAV,CAAc1B,GAA5E,CAAP;AACD;;AAED4Q,EAAAA,YAAY,CAAC5O,IAAD,EAAO6O,OAAP,EAAgB;AAC1B,UAAMD,YAAN,CAAmB5O,IAAnB,EAAyB6O,OAAzB;AACA7O,IAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAlB;AACD;;AAEDO,EAAAA,gBAAgB,CAAC9O,IAAD,EAAO;AACrB,QAAIA,IAAI,IAAI,IAAR,IAAgB,KAAK+O,gBAAL,CAAsB/O,IAAtB,CAApB,EAAiD;AAC/C,WAAK8O,gBAAL,CAAsB9O,IAAI,CAAC/J,KAA3B;AACD,KAFD,MAEO;AACL,YAAM6Y,gBAAN,CAAuB9O,IAAvB;AACD;AACF;;AAEDgP,EAAAA,4BAA4B,CAACC,MAAD,EAAS;AACnC,WAAOA,MAAM,CAAChZ,KAAP,CAAamW,MAApB;AACD;;AAED8C,EAAAA,gBAAgB,CAACb,IAAD,EAAO;AACrB,QAAIc,qBAAJ;;AAEA,WAAOd,IAAI,CAACzN,IAAL,KAAc,qBAAd,IAAuCyN,IAAI,CAACE,UAAL,CAAgB3N,IAAhB,KAAyB,SAAhE,IAA6E,OAAOyN,IAAI,CAACE,UAAL,CAAgBtY,KAAvB,KAAiC,QAA9G,IAA0H,EAAE,CAACkZ,qBAAqB,GAAGd,IAAI,CAACE,UAAL,CAAgBC,KAAzC,KAAmD,IAAnD,IAA2DW,qBAAqB,CAACC,aAAnF,CAAjI;AACD;;AAEDC,EAAAA,eAAe,CAAChB,IAAD,EAAO;AACpB,UAAMF,SAAS,GAAG,MAAMkB,eAAN,CAAsBhB,IAAtB,CAAlB;AACA,UAAMpY,KAAK,GAAGoY,IAAI,CAACE,UAAL,CAAgBtY,KAA9B;AACA,SAAKqZ,QAAL,CAAcnB,SAAS,CAAClY,KAAxB,EAA+B,iBAA/B,EAAkDA,KAAlD;AACA,WAAOkY,SAAP;AACD;;AAEDoB,EAAAA,cAAc,CAACvP,IAAD,EAAO,GAAGwP,IAAV,EAAgB;AAC5B,UAAMD,cAAN,CAAqBvP,IAArB,EAA2B,GAAGwP,IAA9B;AACA,UAAMC,mBAAmB,GAAGzP,IAAI,CAAC0P,UAAL,CAAgBC,GAAhB,CAAoBC,CAAC,IAAI,KAAK1B,eAAL,CAAqB0B,CAArB,CAAzB,CAA5B;AACA5P,IAAAA,IAAI,CAACa,IAAL,GAAY4O,mBAAmB,CAACI,MAApB,CAA2B7P,IAAI,CAACa,IAAhC,CAAZ;AACA,WAAOb,IAAI,CAAC0P,UAAZ;AACD;;AAEDI,EAAAA,eAAe,CAACC,SAAD,EAAYd,MAAZ,EAAoBe,WAApB,EAAiCnB,OAAjC,EAA0CoB,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzF,SAAKC,WAAL,CAAiBlB,MAAjB,EAAyBe,WAAzB,EAAsCnB,OAAtC,EAA+CoB,aAA/C,EAA8DC,iBAA9D,EAAiF,aAAjF,EAAgG,IAAhG;;AAEA,QAAIjB,MAAM,CAACmB,cAAX,EAA2B;AACzBnB,MAAAA,MAAM,CAAChZ,KAAP,CAAama,cAAb,GAA8BnB,MAAM,CAACmB,cAArC;AACA,aAAOnB,MAAM,CAACmB,cAAd;AACD;;AAEDL,IAAAA,SAAS,CAAClP,IAAV,CAAehB,IAAf,CAAoBoP,MAApB;AACD;;AAEDoB,EAAAA,aAAa,CAACC,mBAAD,EAAsB;AACjC,YAAQ,KAAK3Q,KAAL,CAAWiB,IAAnB;AACE,WAAKpJ,OAAO,CAACC,GAAb;AACA,WAAKD,OAAO,CAACK,MAAb;AACE,eAAO,KAAK6V,kBAAL,CAAwB,KAAK/N,KAAL,CAAW1J,KAAnC,CAAP;;AAEF,WAAKuB,OAAO,CAACI,MAAb;AACE,eAAO,KAAKyV,wBAAL,CAA8B,KAAK1N,KAAL,CAAW1J,KAAzC,CAAP;;AAEF,WAAKuB,OAAO,CAACE,MAAb;AACE,eAAO,KAAKiW,wBAAL,CAA8B,KAAKhO,KAAL,CAAW1J,KAAzC,CAAP;;AAEF,WAAKuB,OAAO,CAACG,OAAb;AACE,eAAO,KAAKqW,yBAAL,CAA+B,KAAKrO,KAAL,CAAW1J,KAA1C,CAAP;;AAEF,WAAKuB,OAAO,CAACkF,KAAb;AACE,eAAO,KAAKgR,kBAAL,CAAwB,IAAxB,CAAP;;AAEF,WAAKlW,OAAO,CAACmF,KAAb;AACE,eAAO,KAAK+Q,kBAAL,CAAwB,IAAxB,CAAP;;AAEF,WAAKlW,OAAO,CAACoF,MAAb;AACE,eAAO,KAAK8Q,kBAAL,CAAwB,KAAxB,CAAP;;AAEF;AACE,eAAO,MAAM2C,aAAN,CAAoBC,mBAApB,CAAP;AAxBJ;AA0BD;;AAEDC,EAAAA,qBAAqB,CAAC,GAAGf,IAAJ,EAAU;AAC7B,UAAMxP,IAAI,GAAG,MAAMuQ,qBAAN,CAA4B,GAAGf,IAA/B,CAAb;;AAEA,QAAIxP,IAAI,CAACY,IAAL,KAAc,aAAd,IAA+B,KAAK3B,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAnC,EAAoF;AAClF,aAAO,KAAKuR,qCAAL,CAA2CxQ,IAA3C,CAAP;AACD;;AAED,WAAOA,IAAP;AACD;;AAEDwQ,EAAAA,qCAAqC,CAACxQ,IAAD,EAAO;AAC1C,UAAM7I,IAAI,GAAG,MAAMsZ,gBAAN,CAAuBzQ,IAAvB,CAAb;AACAA,IAAAA,IAAI,GAAGA,IAAP;AACA,WAAOA,IAAI,CAAC0Q,EAAZ;AACA1Q,IAAAA,IAAI,CAAC7I,IAAL,GAAYA,IAAZ;AACA6I,IAAAA,IAAI,CAACY,IAAL,GAAY,mBAAZ;AACA,WAAOZ,IAAP;AACD;;AAED2Q,EAAAA,aAAa,CAAC3Q,IAAD,EAAO;AAClB,QAAI,CAAC,KAAKf,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAL,EAAsD;AACpD,aAAO,MAAM0R,aAAN,CAAoB3Q,IAApB,CAAP;AACD;;AAED,WAAOA,IAAI,CAACY,IAAL,KAAc,mBAArB;AACD;;AAED6P,EAAAA,gBAAgB,CAACzQ,IAAD,EAAO;AACrB,QAAI,CAAC,KAAKf,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAL,EAAsD;AACpD,aAAO,MAAMwR,gBAAN,CAAuBzQ,IAAvB,CAAP;AACD;;AAED,WAAOA,IAAI,CAAC7I,IAAZ;AACD;;AAED8W,EAAAA,YAAY,CAAChY,KAAD,EAAQ2K,IAAR,EAAcgQ,QAAd,EAAwB/E,QAAxB,EAAkC;AAC5C,UAAM7L,IAAI,GAAG,MAAMiO,YAAN,CAAmBhY,KAAnB,EAA0B2K,IAA1B,EAAgCgQ,QAAhC,EAA0C/E,QAA1C,CAAb;AACA7L,IAAAA,IAAI,CAAC0O,GAAL,GAAW1O,IAAI,CAACwO,KAAL,CAAWE,GAAtB;AACA,WAAO1O,IAAI,CAACwO,KAAZ;AACA,WAAOxO,IAAP;AACD;;AAED6Q,EAAAA,iBAAiB,CAAC7Q,IAAD,EAAO8Q,eAAP,EAAwBC,QAAQ,GAAG,KAAnC,EAA0C;AACzD,UAAMF,iBAAN,CAAwB7Q,IAAxB,EAA8B8Q,eAA9B,EAA+CC,QAA/C;AACA/Q,IAAAA,IAAI,CAACuO,UAAL,GAAkBvO,IAAI,CAACa,IAAL,CAAUD,IAAV,KAAmB,gBAArC;AACD;;AAEDuP,EAAAA,WAAW,CAACnQ,IAAD,EAAOgQ,WAAP,EAAoBnB,OAApB,EAA6BoB,aAA7B,EAA4Ce,gBAA5C,EAA8DpQ,IAA9D,EAAoEqQ,YAAY,GAAG,KAAnF,EAA0F;AACnG,QAAIC,QAAQ,GAAG,KAAKC,SAAL,EAAf;AACAD,IAAAA,QAAQ,CAACE,IAAT,GAAgBpR,IAAI,CAACoR,IAArB;AACAF,IAAAA,QAAQ,GAAG,MAAMf,WAAN,CAAkBe,QAAlB,EAA4BlB,WAA5B,EAAyCnB,OAAzC,EAAkDoB,aAAlD,EAAiEe,gBAAjE,EAAmFpQ,IAAnF,EAAyFqQ,YAAzF,CAAX;AACAC,IAAAA,QAAQ,CAACtQ,IAAT,GAAgB,oBAAhB;AACA,WAAOsQ,QAAQ,CAACE,IAAhB;AACApR,IAAAA,IAAI,CAAC/J,KAAL,GAAaib,QAAb;;AAEA,QAAItQ,IAAI,KAAK,oBAAb,EAAmC;AACjCZ,MAAAA,IAAI,CAACqR,QAAL,GAAgB,KAAhB;AACD;;AAEDzQ,IAAAA,IAAI,GAAG,kBAAP;AACA,WAAO,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsBY,IAAtB,CAAP;AACD;;AAED2Q,EAAAA,kBAAkB,CAAC,GAAG/B,IAAJ,EAAU;AAC1B,UAAMgC,YAAY,GAAG,MAAMD,kBAAN,CAAyB,GAAG/B,IAA5B,CAArB;;AAEA,QAAI,KAAKvQ,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAJ,EAAqD;AACnDuS,MAAAA,YAAY,CAAC5Q,IAAb,GAAoB,oBAApB;AACD;;AAED,WAAO4Q,YAAP;AACD;;AAEDC,EAAAA,yBAAyB,CAAC,GAAGjC,IAAJ,EAAU;AACjC,UAAMgC,YAAY,GAAG,MAAMC,yBAAN,CAAgC,GAAGjC,IAAnC,CAArB;;AAEA,QAAI,KAAKvQ,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAJ,EAAqD;AACnDuS,MAAAA,YAAY,CAAC5Q,IAAb,GAAoB,oBAApB;AACA4Q,MAAAA,YAAY,CAACH,QAAb,GAAwB,KAAxB;AACD;;AAED,WAAOG,YAAP;AACD;;AAEDE,EAAAA,iBAAiB,CAACC,IAAD,EAAO3B,WAAP,EAAoBnB,OAApB,EAA6B+C,SAA7B,EAAwCC,UAAxC,EAAoD;AACnE,UAAM7R,IAAI,GAAG,MAAM0R,iBAAN,CAAwBC,IAAxB,EAA8B3B,WAA9B,EAA2CnB,OAA3C,EAAoD+C,SAApD,EAA+DC,UAA/D,CAAb;;AAEA,QAAI7R,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACY,IAAL,GAAY,UAAZ;AACA,UAAIZ,IAAI,CAACoR,IAAL,KAAc,QAAlB,EAA4BpR,IAAI,CAACoR,IAAL,GAAY,MAAZ;AAC5BpR,MAAAA,IAAI,CAAC8R,SAAL,GAAiB,KAAjB;AACD;;AAED,WAAO9R,IAAP;AACD;;AAED+R,EAAAA,mBAAmB,CAACJ,IAAD,EAAOf,QAAP,EAAiB/E,QAAjB,EAA2B+F,SAA3B,EAAsCtB,mBAAtC,EAA2D;AAC5E,UAAMtQ,IAAI,GAAG,MAAM+R,mBAAN,CAA0BJ,IAA1B,EAAgCf,QAAhC,EAA0C/E,QAA1C,EAAoD+F,SAApD,EAA+DtB,mBAA/D,CAAb;;AAEA,QAAItQ,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACoR,IAAL,GAAY,MAAZ;AACApR,MAAAA,IAAI,CAACY,IAAL,GAAY,UAAZ;AACD;;AAED,WAAOZ,IAAP;AACD;;AAEDgS,EAAAA,YAAY,CAAChS,IAAD,EAAOiS,KAAK,GAAG,KAAf,EAAsB;AAChC,QAAIjS,IAAI,IAAI,IAAR,IAAgB,KAAK+O,gBAAL,CAAsB/O,IAAtB,CAApB,EAAiD;AAC/C,WAAKgS,YAAL,CAAkBhS,IAAI,CAAC/J,KAAvB,EAA8Bgc,KAA9B;AACA,aAAOjS,IAAP;AACD;;AAED,WAAO,MAAMgS,YAAN,CAAmBhS,IAAnB,EAAyBiS,KAAzB,CAAP;AACD;;AAEDC,EAAAA,gCAAgC,CAACP,IAAD,EAAO,GAAGnC,IAAV,EAAgB;AAC9C,QAAImC,IAAI,CAACP,IAAL,KAAc,KAAd,IAAuBO,IAAI,CAACP,IAAL,KAAc,KAAzC,EAAgD;AAC9C,WAAKjF,KAAL,CAAWwF,IAAI,CAACQ,GAAL,CAASpU,KAApB,EAA2B8D,aAAa,CAACyF,kBAAzC;AACD,KAFD,MAEO,IAAIqK,IAAI,CAAC1C,MAAT,EAAiB;AACtB,WAAK9C,KAAL,CAAWwF,IAAI,CAACQ,GAAL,CAASpU,KAApB,EAA2B8D,aAAa,CAAC0F,gBAAzC;AACD,KAFM,MAEA;AACL,YAAM2K,gCAAN,CAAuCP,IAAvC,EAA6C,GAAGnC,IAAhD;AACD;AACF;;AAED4C,EAAAA,oBAAoB,CAACpS,IAAD,EAAOqS,QAAP,EAAiB;AACnC,UAAMD,oBAAN,CAA2BpS,IAA3B,EAAiCqS,QAAjC;;AAEA,QAAIrS,IAAI,CAACsS,MAAL,CAAY1R,IAAZ,KAAqB,QAAzB,EAAmC;AACjCZ,MAAAA,IAAI,CAACY,IAAL,GAAY,kBAAZ;AACAZ,MAAAA,IAAI,CAAC3C,MAAL,GAAc2C,IAAI,CAACoB,SAAL,CAAe,CAAf,CAAd;;AAEA,UAAI,KAAKtC,SAAL,CAAe,kBAAf,CAAJ,EAAwC;AACtC,YAAIyT,gBAAJ;;AAEAvS,QAAAA,IAAI,CAACwS,UAAL,GAAkB,CAACD,gBAAgB,GAAGvS,IAAI,CAACoB,SAAL,CAAe,CAAf,CAApB,KAA0C,IAA1C,GAAiDmR,gBAAjD,GAAoE,IAAtF;AACD;;AAED,aAAOvS,IAAI,CAACoB,SAAZ;AACA,aAAOpB,IAAI,CAACsS,MAAZ;AACD;;AAED,WAAOtS,IAAP;AACD;;AAEDyS,EAAAA,qBAAqB,CAACzS,IAAD,EAAO;AAC1B,QAAIA,IAAI,CAACY,IAAL,KAAc,kBAAlB,EAAsC;AACpC;AACD;;AAED,UAAM6R,qBAAN,CAA4BzS,IAA5B;AACD;;AAED0S,EAAAA,WAAW,CAAC1S,IAAD,EAAO;AAChB,UAAM0S,WAAN,CAAkB1S,IAAlB;;AAEA,YAAQA,IAAI,CAACY,IAAb;AACE,WAAK,sBAAL;AACEZ,QAAAA,IAAI,CAAC2S,QAAL,GAAgB,IAAhB;AACA;;AAEF,WAAK,wBAAL;AACE,YAAI3S,IAAI,CAAC4S,UAAL,CAAgBtT,MAAhB,KAA2B,CAA3B,IAAgCU,IAAI,CAAC4S,UAAL,CAAgB,CAAhB,EAAmBhS,IAAnB,KAA4B,0BAAhE,EAA4F;AAC1FZ,UAAAA,IAAI,CAACY,IAAL,GAAY,sBAAZ;AACAZ,UAAAA,IAAI,CAAC2S,QAAL,GAAgB3S,IAAI,CAAC4S,UAAL,CAAgB,CAAhB,EAAmBD,QAAnC;AACA,iBAAO3S,IAAI,CAAC4S,UAAZ;AACD;;AAED;AAZJ;;AAeA,WAAO5S,IAAP;AACD;;AAED6S,EAAAA,cAAc,CAACC,IAAD,EAAOlC,QAAP,EAAiB/E,QAAjB,EAA2BkH,OAA3B,EAAoCpT,KAApC,EAA2C;AACvD,UAAMK,IAAI,GAAG,MAAM6S,cAAN,CAAqBC,IAArB,EAA2BlC,QAA3B,EAAqC/E,QAArC,EAA+CkH,OAA/C,EAAwDpT,KAAxD,CAAb;;AAEA,QAAIA,KAAK,CAACqT,mBAAV,EAA+B;AAC7B,UAAIhT,IAAI,CAACY,IAAL,KAAc,0BAAd,IAA4CZ,IAAI,CAACY,IAAL,KAAc,wBAA9D,EAAwF;AACtFZ,QAAAA,IAAI,CAACY,IAAL,GAAYZ,IAAI,CAACY,IAAL,CAAUqS,SAAV,CAAoB,CAApB,CAAZ;AACD;;AAED,UAAItT,KAAK,CAACuT,IAAV,EAAgB;AACd,cAAMC,KAAK,GAAG,KAAKC,eAAL,CAAqBpT,IAArB,CAAd;AACAmT,QAAAA,KAAK,CAAC5E,UAAN,GAAmBvO,IAAnB;AACA,eAAO,KAAKsR,UAAL,CAAgB6B,KAAhB,EAAuB,iBAAvB,CAAP;AACD;AACF,KAVD,MAUO,IAAInT,IAAI,CAACY,IAAL,KAAc,kBAAd,IAAoCZ,IAAI,CAACY,IAAL,KAAc,gBAAtD,EAAwE;AAC7EZ,MAAAA,IAAI,CAACqS,QAAL,GAAgB,KAAhB;AACD;;AAED,WAAOrS,IAAP;AACD;;AAEDqT,EAAAA,wBAAwB,CAACrT,IAAD,EAAO;AAC7B,QAAIA,IAAI,CAACY,IAAL,KAAc,iBAAlB,EAAqC;AACnCZ,MAAAA,IAAI,GAAGA,IAAI,CAACuO,UAAZ;AACD;;AAED,WAAO,MAAM8E,wBAAN,CAA+BrT,IAA/B,CAAP;AACD;;AAEDsT,EAAAA,eAAe,CAACtT,IAAD,EAAO;AACpB,WAAOA,IAAI,CAACY,IAAL,KAAc,iBAArB;AACD;;AAEDmO,EAAAA,gBAAgB,CAAC/O,IAAD,EAAO;AACrB,WAAOA,IAAI,CAACY,IAAL,KAAc,UAAd,IAA4BZ,IAAI,CAACoR,IAAL,KAAc,MAA1C,IAAoD,CAACpR,IAAI,CAACiP,MAAjE;AACD;;AAEDsE,EAAAA,cAAc,CAACvT,IAAD,EAAO;AACnB,WAAOA,IAAI,CAACiP,MAAL,IAAejP,IAAI,CAACoR,IAAL,KAAc,KAA7B,IAAsCpR,IAAI,CAACoR,IAAL,KAAc,KAA3D;AACD;;AAzVkD,CAArD;;AA6VA,MAAMoC,UAAN,CAAiB;AACf/c,EAAAA,WAAW,CAACY,KAAD,EAAQoc,MAAR,EAAgBC,aAAhB,EAA+BC,QAA/B,EAAyC;AAClD,SAAKtc,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKoc,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKC,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKC,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKtc,KAAL,GAAaA,KAAb;AACA,SAAKoc,MAAL,GAAc,CAAC,CAACA,MAAhB;AACA,SAAKC,aAAL,GAAqB,CAAC,CAACA,aAAvB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAVc;;AAajB,MAAMC,KAAK,GAAG;AACZC,EAAAA,cAAc,EAAE,IAAIL,UAAJ,CAAe,GAAf,EAAoB,KAApB,CADJ;AAEZM,EAAAA,eAAe,EAAE,IAAIN,UAAJ,CAAe,GAAf,EAAoB,IAApB,CAFL;AAGZO,EAAAA,gBAAgB,EAAE,IAAIP,UAAJ,CAAe,IAAf,EAAqB,IAArB,CAHN;AAIZQ,EAAAA,aAAa,EAAE,IAAIR,UAAJ,CAAe,IAAf,EAAqB,KAArB,CAJH;AAKZS,EAAAA,cAAc,EAAE,IAAIT,UAAJ,CAAe,GAAf,EAAoB,KAApB,CALJ;AAMZU,EAAAA,eAAe,EAAE,IAAIV,UAAJ,CAAe,GAAf,EAAoB,IAApB,CANL;AAOZpa,EAAAA,QAAQ,EAAE,IAAIoa,UAAJ,CAAe,GAAf,EAAoB,IAApB,EAA0B,IAA1B,EAAgCW,CAAC,IAAIA,CAAC,CAACC,aAAF,EAArC,CAPE;AAQZC,EAAAA,kBAAkB,EAAE,IAAIb,UAAJ,CAAe,UAAf,EAA2B,IAA3B,CARR;AASZc,EAAAA,iBAAiB,EAAE,IAAId,UAAJ,CAAe,UAAf,EAA2B,KAA3B;AATP,CAAd;;AAYAhc,OAAO,CAACmB,MAAR,CAAe5B,aAAf,GAA+BS,OAAO,CAACgB,MAAR,CAAezB,aAAf,GAA+B,YAAY;AACxE,MAAI,KAAK4I,KAAL,CAAW4U,OAAX,CAAmBjV,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,SAAKK,KAAL,CAAW6U,WAAX,GAAyB,IAAzB;AACA;AACD;;AAED,MAAIC,GAAG,GAAG,KAAK9U,KAAL,CAAW4U,OAAX,CAAmBrT,GAAnB,EAAV;;AAEA,MAAIuT,GAAG,KAAKb,KAAK,CAACC,cAAd,IAAgC,KAAKa,UAAL,GAAkBrd,KAAlB,KAA4B,UAAhE,EAA4E;AAC1Eod,IAAAA,GAAG,GAAG,KAAK9U,KAAL,CAAW4U,OAAX,CAAmBrT,GAAnB,EAAN;AACD;;AAED,OAAKvB,KAAL,CAAW6U,WAAX,GAAyB,CAACC,GAAG,CAAChB,MAA9B;AACD,CAbD;;AAeAjc,OAAO,CAACL,IAAR,CAAaJ,aAAb,GAA6B,UAAU4d,QAAV,EAAoB;AAC/C,MAAIC,OAAO,GAAG,KAAd;;AAEA,MAAID,QAAQ,KAAKnd,OAAO,CAACwB,GAAzB,EAA8B;AAC5B,QAAI,KAAK2G,KAAL,CAAW1J,KAAX,KAAqB,IAArB,IAA6B,CAAC,KAAK0J,KAAL,CAAW6U,WAAzC,IAAwDG,QAAQ,KAAKnd,OAAO,CAACiE,SAA7E,IAA0FkZ,QAAQ,KAAKnd,OAAO,CAAC8E,MAAnH,EAA2H;AACzHsY,MAAAA,OAAO,GAAG,IAAV;AACD;AACF;;AAED,OAAKjV,KAAL,CAAW6U,WAAX,GAAyBI,OAAzB;AACD,CAVD;;AAYApd,OAAO,CAACa,MAAR,CAAetB,aAAf,GAA+B,UAAU4d,QAAV,EAAoB;AACjD,OAAKhV,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB,KAAKgV,YAAL,CAAkBF,QAAlB,IAA8Bf,KAAK,CAACC,cAApC,GAAqDD,KAAK,CAACE,eAAnF;AACA,OAAKnU,KAAL,CAAW6U,WAAX,GAAyB,IAAzB;AACD,CAHD;;AAKAhd,OAAO,CAAC+B,YAAR,CAAqBxC,aAArB,GAAqC,YAAY;AAC/C,OAAK4I,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB+T,KAAK,CAACI,aAA9B;AACA,OAAKrU,KAAL,CAAW6U,WAAX,GAAyB,IAAzB;AACD,CAHD;;AAKAhd,OAAO,CAACkB,MAAR,CAAe3B,aAAf,GAA+B,UAAU4d,QAAV,EAAoB;AACjD,QAAMG,eAAe,GAAGH,QAAQ,KAAKnd,OAAO,CAACkE,GAArB,IAA4BiZ,QAAQ,KAAKnd,OAAO,CAACgE,IAAjD,IAAyDmZ,QAAQ,KAAKnd,OAAO,CAAC0E,KAA9E,IAAuFyY,QAAQ,KAAKnd,OAAO,CAACyE,MAApI;AACA,OAAK0D,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwBiV,eAAe,GAAGlB,KAAK,CAACK,cAAT,GAA0BL,KAAK,CAACM,eAAvE;AACA,OAAKvU,KAAL,CAAW6U,WAAX,GAAyB,IAAzB;AACD,CAJD;;AAMAhd,OAAO,CAACqC,MAAR,CAAe9C,aAAf,GAA+B,YAAY,CAAE,CAA7C;;AAEAS,OAAO,CAACiE,SAAR,CAAkB1E,aAAlB,GAAkCS,OAAO,CAAC8E,MAAR,CAAevF,aAAf,GAA+B,UAAU4d,QAAV,EAAoB;AACnF,MAAIA,QAAQ,CAACze,UAAT,IAAuBye,QAAQ,KAAKnd,OAAO,CAACqB,IAA5C,IAAoD8b,QAAQ,KAAKnd,OAAO,CAAC8D,KAAzE,IAAkF,EAAEqZ,QAAQ,KAAKnd,OAAO,CAACmE,OAArB,IAAgC,KAAKoZ,qBAAL,EAAlC,CAAlF,IAAqJ,EAAE,CAACJ,QAAQ,KAAKnd,OAAO,CAACsB,KAArB,IAA8B6b,QAAQ,KAAKnd,OAAO,CAACa,MAApD,KAA+D,KAAKqc,UAAL,OAAsBd,KAAK,CAACoB,MAA7F,CAAzJ,EAA+P;AAC7P,SAAKrV,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB+T,KAAK,CAACS,kBAA9B;AACD,GAFD,MAEO;AACL,SAAK1U,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB+T,KAAK,CAACU,iBAA9B;AACD;;AAED,OAAK3U,KAAL,CAAW6U,WAAX,GAAyB,KAAzB;AACD,CARD;;AAUAhd,OAAO,CAAC8B,SAAR,CAAkBvC,aAAlB,GAAkC,YAAY;AAC5C,MAAI,KAAK2d,UAAL,OAAsBd,KAAK,CAACxa,QAAhC,EAA0C;AACxC,SAAKuG,KAAL,CAAW4U,OAAX,CAAmBrT,GAAnB;AACD,GAFD,MAEO;AACL,SAAKvB,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB+T,KAAK,CAACxa,QAA9B;AACD;;AAED,OAAKuG,KAAL,CAAW6U,WAAX,GAAyB,KAAzB;AACD,CARD;;AAUAhd,OAAO,CAACe,UAAR,CAAmBxB,aAAnB,GAAmC,YAAY;AAC7C,OAAK4I,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB+T,KAAK,CAACG,gBAA9B;AACA,OAAKpU,KAAL,CAAW6U,WAAX,GAAyB,IAAzB;AACD,CAHD;;AAKA,IAAIS,4BAA4B,GAAG,urIAAnC;AACA,IAAIC,uBAAuB,GAAG,sjFAA9B;AACA,MAAMC,uBAAuB,GAAG,IAAI/X,MAAJ,CAAW,MAAM6X,4BAAN,GAAqC,GAAhD,CAAhC;AACA,MAAMG,kBAAkB,GAAG,IAAIhY,MAAJ,CAAW,MAAM6X,4BAAN,GAAqCC,uBAArC,GAA+D,GAA1E,CAA3B;AACAD,4BAA4B,GAAGC,uBAAuB,GAAG,IAAzD;AACA,MAAMG,0BAA0B,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,EAAX,EAAe,CAAf,EAAkB,EAAlB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,CAAnC,EAAsC,EAAtC,EAA0C,EAA1C,EAA8C,GAA9C,EAAmD,EAAnD,EAAuD,EAAvD,EAA2D,GAA3D,EAAgE,EAAhE,EAAoE,CAApE,EAAuE,EAAvE,EAA2E,EAA3E,EAA+E,EAA/E,EAAmF,EAAnF,EAAuF,EAAvF,EAA2F,CAA3F,EAA8F,EAA9F,EAAkG,EAAlG,EAAsG,EAAtG,EAA0G,CAA1G,EAA6G,EAA7G,EAAiH,CAAjH,EAAoH,CAApH,EAAuH,CAAvH,EAA0H,CAA1H,EAA6H,EAA7H,EAAiI,GAAjI,EAAsI,EAAtI,EAA0I,EAA1I,EAA8I,CAA9I,EAAiJ,EAAjJ,EAAqJ,CAArJ,EAAwJ,EAAxJ,EAA4J,CAA5J,EAA+J,EAA/J,EAAmK,GAAnK,EAAwK,GAAxK,EAA6K,EAA7K,EAAiL,EAAjL,EAAqL,EAArL,EAAyL,CAAzL,EAA4L,GAA5L,EAAiM,CAAjM,EAAoM,CAApM,EAAuM,CAAvM,EAA0M,CAA1M,EAA6M,EAA7M,EAAiN,CAAjN,EAAoN,CAApN,EAAuN,CAAvN,EAA0N,CAA1N,EAA6N,CAA7N,EAAgO,EAAhO,EAAoO,EAApO,EAAwO,EAAxO,EAA4O,EAA5O,EAAgP,EAAhP,EAAoP,EAApP,EAAwP,EAAxP,EAA4P,CAA5P,EAA+P,CAA/P,EAAkQ,EAAlQ,EAAsQ,EAAtQ,EAA0Q,EAA1Q,EAA8Q,EAA9Q,EAAkR,EAAlR,EAAsR,EAAtR,EAA0R,CAA1R,EAA6R,CAA7R,EAAgS,EAAhS,EAAoS,CAApS,EAAuS,EAAvS,EAA2S,CAA3S,EAA8S,CAA9S,EAAiT,CAAjT,EAAoT,CAApT,EAAuT,EAAvT,EAA2T,EAA3T,EAA+T,EAA/T,EAAmU,CAAnU,EAAsU,EAAtU,EAA0U,EAA1U,EAA8U,CAA9U,EAAiV,CAAjV,EAAoV,EAApV,EAAwV,EAAxV,EAA4V,EAA5V,EAAgW,EAAhW,EAAoW,EAApW,EAAwW,EAAxW,EAA4W,EAA5W,EAAgX,EAAhX,EAAoX,EAApX,EAAwX,GAAxX,EAA6X,EAA7X,EAAiY,EAAjY,EAAqY,EAArY,EAAyY,EAAzY,EAA6Y,EAA7Y,EAAiZ,EAAjZ,EAAqZ,EAArZ,EAAyZ,GAAzZ,EAA8Z,EAA9Z,EAAka,CAAla,EAAqa,CAAra,EAAwa,EAAxa,EAA4a,EAA5a,EAAgb,EAAhb,EAAob,CAApb,EAAub,CAAvb,EAA0b,EAA1b,EAA8b,GAA9b,EAAmc,EAAnc,EAAuc,EAAvc,EAA2c,EAA3c,EAA+c,EAA/c,EAAmd,EAAnd,EAAud,EAAvd,EAA2d,EAA3d,EAA+d,EAA/d,EAAme,EAAne,EAAue,EAAve,EAA2e,EAA3e,EAA+e,EAA/e,EAAmf,CAAnf,EAAsf,CAAtf,EAAyf,CAAzf,EAA4f,CAA5f,EAA+f,EAA/f,EAAmgB,CAAngB,EAAsgB,CAAtgB,EAAygB,EAAzgB,EAA6gB,EAA7gB,EAAihB,EAAjhB,EAAqhB,CAArhB,EAAwhB,EAAxhB,EAA4hB,CAA5hB,EAA+hB,CAA/hB,EAAkiB,CAAliB,EAAqiB,EAAriB,EAAyiB,EAAziB,EAA6iB,CAA7iB,EAAgjB,EAAhjB,EAAojB,EAApjB,EAAwjB,CAAxjB,EAA2jB,CAA3jB,EAA8jB,CAA9jB,EAAikB,CAAjkB,EAAokB,CAApkB,EAAukB,CAAvkB,EAA0kB,EAA1kB,EAA8kB,CAA9kB,EAAilB,CAAjlB,EAAolB,CAAplB,EAAulB,EAAvlB,EAA2lB,EAA3lB,EAA+lB,CAA/lB,EAAkmB,CAAlmB,EAAqmB,CAArmB,EAAwmB,CAAxmB,EAA2mB,EAA3mB,EAA+mB,CAA/mB,EAAknB,CAAlnB,EAAqnB,CAArnB,EAAwnB,CAAxnB,EAA2nB,CAA3nB,EAA8nB,CAA9nB,EAAioB,CAAjoB,EAAooB,CAApoB,EAAuoB,EAAvoB,EAA2oB,CAA3oB,EAA8oB,EAA9oB,EAAkpB,CAAlpB,EAAqpB,GAArpB,EAA0pB,EAA1pB,EAA8pB,EAA9pB,EAAkqB,CAAlqB,EAAqqB,EAArqB,EAAyqB,CAAzqB,EAA4qB,EAA5qB,EAAgrB,EAAhrB,EAAorB,EAAprB,EAAwrB,CAAxrB,EAA2rB,CAA3rB,EAA8rB,CAA9rB,EAAisB,GAAjsB,EAAssB,EAAtsB,EAA0sB,EAA1sB,EAA8sB,CAA9sB,EAAitB,EAAjtB,EAAqtB,EAArtB,EAAytB,EAAztB,EAA6tB,CAA7tB,EAAguB,EAAhuB,EAAouB,EAApuB,EAAwuB,EAAxuB,EAA4uB,CAA5uB,EAA+uB,EAA/uB,EAAmvB,EAAnvB,EAAuvB,GAAvvB,EAA4vB,EAA5vB,EAAgwB,GAAhwB,EAAqwB,EAArwB,EAAywB,EAAzwB,EAA6wB,CAA7wB,EAAgxB,CAAhxB,EAAmxB,CAAnxB,EAAsxB,CAAtxB,EAAyxB,CAAzxB,EAA4xB,CAA5xB,EAA+xB,CAA/xB,EAAkyB,CAAlyB,EAAqyB,EAAryB,EAAyyB,EAAzyB,EAA6yB,CAA7yB,EAAgzB,CAAhzB,EAAmzB,CAAnzB,EAAszB,EAAtzB,EAA0zB,CAA1zB,EAA6zB,CAA7zB,EAAg0B,EAAh0B,EAAo0B,EAAp0B,EAAw0B,CAAx0B,EAA20B,CAA30B,EAA80B,CAA90B,EAAi1B,EAAj1B,EAAq1B,CAAr1B,EAAw1B,EAAx1B,EAA41B,EAA51B,EAAg2B,CAAh2B,EAAm2B,CAAn2B,EAAs2B,EAAt2B,EAA02B,CAA12B,EAA62B,EAA72B,EAAi3B,EAAj3B,EAAq3B,EAAr3B,EAAy3B,CAAz3B,EAA43B,EAA53B,EAAg4B,EAAh4B,EAAo4B,GAAp4B,EAAy4B,CAAz4B,EAA44B,CAA54B,EAA+4B,EAA/4B,EAAm5B,EAAn5B,EAAu5B,CAAv5B,EAA05B,EAA15B,EAA85B,EAA95B,EAAk6B,GAAl6B,EAAu6B,CAAv6B,EAA06B,CAA16B,EAA66B,CAA76B,EAAg7B,CAAh7B,EAAm7B,EAAn7B,EAAu7B,EAAv7B,EAA27B,CAA37B,EAA87B,EAA97B,EAAk8B,CAAl8B,EAAq8B,CAAr8B,EAAw8B,CAAx8B,EAA28B,CAA38B,EAA88B,EAA98B,EAAk9B,EAAl9B,EAAs9B,CAAt9B,EAAy9B,GAAz9B,EAA89B,EAA99B,EAAk+B,GAAl+B,EAAu+B,CAAv+B,EAA0+B,EAA1+B,EAA8+B,GAA9+B,EAAm/B,GAAn/B,EAAw/B,GAAx/B,EAA6/B,EAA7/B,EAAigC,GAAjgC,EAAsgC,IAAtgC,EAA4gC,IAA5gC,EAAkhC,IAAlhC,EAAwhC,GAAxhC,EAA6hC,IAA7hC,EAAmiC,GAAniC,EAAwiC,CAAxiC,EAA2iC,EAA3iC,EAA+iC,GAA/iC,EAAojC,EAApjC,EAAwjC,EAAxjC,EAA4jC,EAA5jC,EAAgkC,EAAhkC,EAAokC,CAApkC,EAAukC,EAAvkC,EAA2kC,EAA3kC,EAA+kC,CAA/kC,EAAklC,EAAllC,EAAslC,GAAtlC,EAA2lC,EAA3lC,EAA+lC,GAA/lC,EAAomC,EAApmC,EAAwmC,CAAxmC,EAA2mC,CAA3mC,EAA8mC,EAA9mC,EAAknC,EAAlnC,EAAsnC,EAAtnC,EAA0nC,CAA1nC,EAA6nC,CAA7nC,EAAgoC,CAAhoC,EAAmoC,EAAnoC,EAAuoC,IAAvoC,EAA6oC,CAA7oC,EAAgpC,IAAhpC,EAAspC,EAAtpC,EAA0pC,CAA1pC,EAA6pC,IAA7pC,EAAmqC,GAAnqC,EAAwqC,EAAxqC,EAA4qC,CAA5qC,EAA+qC,EAA/qC,EAAmrC,CAAnrC,EAAsrC,CAAtrC,EAAyrC,GAAzrC,EAA8rC,IAA9rC,EAAosC,GAApsC,EAAysC,CAAzsC,EAA4sC,EAA5sC,EAAgtC,CAAhtC,EAAmtC,CAAntC,EAAstC,CAAttC,EAAytC,CAAztC,EAA4tC,IAA5tC,EAAkuC,EAAluC,EAAsuC,CAAtuC,EAAyuC,EAAzuC,EAA6uC,CAA7uC,EAAgvC,CAAhvC,EAAmvC,CAAnvC,EAAsvC,CAAtvC,EAAyvC,CAAzvC,EAA4vC,CAA5vC,EAA+vC,CAA/vC,EAAkwC,CAAlwC,EAAqwC,CAArwC,EAAwwC,EAAxwC,EAA4wC,CAA5wC,EAA+wC,CAA/wC,EAAkxC,CAAlxC,EAAqxC,CAArxC,EAAwxC,CAAxxC,EAA2xC,EAA3xC,EAA+xC,CAA/xC,EAAkyC,CAAlyC,EAAqyC,CAAryC,EAAwyC,CAAxyC,EAA2yC,CAA3yC,EAA8yC,CAA9yC,EAAizC,CAAjzC,EAAozC,EAApzC,EAAwzC,CAAxzC,EAA2zC,CAA3zC,EAA8zC,CAA9zC,EAAi0C,CAAj0C,EAAo0C,CAAp0C,EAAu0C,CAAv0C,EAA00C,CAA10C,EAA60C,CAA70C,EAAg1C,CAAh1C,EAAm1C,GAAn1C,EAAw1C,CAAx1C,EAA21C,EAA31C,EAA+1C,CAA/1C,EAAk2C,EAAl2C,EAAs2C,CAAt2C,EAAy2C,EAAz2C,EAA62C,CAA72C,EAAg3C,EAAh3C,EAAo3C,CAAp3C,EAAu3C,EAAv3C,EAA23C,CAA33C,EAA83C,EAA93C,EAAk4C,CAAl4C,EAAq4C,EAAr4C,EAAy4C,CAAz4C,EAA44C,EAA54C,EAAg5C,CAAh5C,EAAm5C,EAAn5C,EAAu5C,CAAv5C,EAA05C,EAA15C,EAA85C,CAA95C,EAAi6C,CAAj6C,EAAo6C,IAAp6C,EAA06C,EAA16C,EAA86C,EAA96C,EAAk7C,CAAl7C,EAAq7C,EAAr7C,EAAy7C,CAAz7C,EAA47C,GAA57C,EAAi8C,EAAj8C,EAAq8C,IAAr8C,EAA28C,GAA38C,EAAg9C,EAAh9C,EAAo9C,EAAp9C,EAAw9C,CAAx9C,EAA29C,CAA39C,EAA89C,IAA99C,EAAo+C,CAAp+C,EAAu+C,CAAv+C,EAA0+C,EAA1+C,EAA8+C,CAA9+C,EAAi/C,CAAj/C,EAAo/C,CAAp/C,EAAu/C,CAAv/C,EAA0/C,CAA1/C,EAA6/C,CAA7/C,EAAggD,CAAhgD,EAAmgD,CAAngD,EAAsgD,CAAtgD,EAAygD,CAAzgD,EAA4gD,CAA5gD,EAA+gD,CAA/gD,EAAkhD,CAAlhD,EAAqhD,CAArhD,EAAwhD,CAAxhD,EAA2hD,CAA3hD,EAA8hD,CAA9hD,EAAiiD,CAAjiD,EAAoiD,CAApiD,EAAuiD,CAAviD,EAA0iD,CAA1iD,EAA6iD,CAA7iD,EAAgjD,CAAhjD,EAAmjD,CAAnjD,EAAsjD,CAAtjD,EAAyjD,CAAzjD,EAA4jD,CAA5jD,EAA+jD,CAA/jD,EAAkkD,CAAlkD,EAAqkD,CAArkD,EAAwkD,CAAxkD,EAA2kD,CAA3kD,EAA8kD,CAA9kD,EAAilD,CAAjlD,EAAolD,CAAplD,EAAulD,CAAvlD,EAA0lD,CAA1lD,EAA6lD,CAA7lD,EAAgmD,CAAhmD,EAAmmD,CAAnmD,EAAsmD,CAAtmD,EAAymD,CAAzmD,EAA4mD,CAA5mD,EAA+mD,CAA/mD,EAAknD,CAAlnD,EAAqnD,CAArnD,EAAwnD,CAAxnD,EAA2nD,CAA3nD,EAA8nD,CAA9nD,EAAioD,CAAjoD,EAAooD,CAApoD,EAAuoD,CAAvoD,EAA0oD,CAA1oD,EAA6oD,CAA7oD,EAAgpD,CAAhpD,EAAmpD,EAAnpD,EAAupD,CAAvpD,EAA0pD,CAA1pD,EAA6pD,CAA7pD,EAAgqD,CAAhqD,EAAmqD,CAAnqD,EAAsqD,EAAtqD,EAA0qD,IAA1qD,EAAgrD,KAAhrD,EAAurD,EAAvrD,EAA2rD,IAA3rD,EAAisD,EAAjsD,EAAqsD,GAArsD,EAA0sD,CAA1sD,EAA6sD,IAA7sD,EAAmtD,EAAntD,EAAutD,IAAvtD,EAA6tD,IAA7tD,EAAmuD,GAAnuD,EAAwuD,IAAxuD,EAA8uD,IAA9uD,CAAnC;AACA,MAAMC,qBAAqB,GAAG,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,CAAd,EAAiB,GAAjB,EAAsB,CAAtB,EAAyB,GAAzB,EAA8B,CAA9B,EAAiC,IAAjC,EAAuC,CAAvC,EAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,EAAtD,EAA0D,CAA1D,EAA6D,CAA7D,EAAgE,CAAhE,EAAmE,GAAnE,EAAwE,CAAxE,EAA2E,GAA3E,EAAgF,CAAhF,EAAmF,CAAnF,EAAsF,CAAtF,EAAyF,GAAzF,EAA8F,CAA9F,EAAiG,GAAjG,EAAsG,EAAtG,EAA0G,GAA1G,EAA+G,CAA/G,EAAkH,EAAlH,EAAsH,EAAtH,EAA0H,EAA1H,EAA8H,CAA9H,EAAiI,EAAjI,EAAqI,CAArI,EAAwI,EAAxI,EAA4I,EAA5I,EAAgJ,EAAhJ,EAAoJ,CAApJ,EAAuJ,CAAvJ,EAA0J,CAA1J,EAA6J,EAA7J,EAAiK,EAAjK,EAAqK,CAArK,EAAwK,CAAxK,EAA2K,CAA3K,EAA8K,CAA9K,EAAiL,EAAjL,EAAqL,CAArL,EAAwL,EAAxL,EAA4L,CAA5L,EAA+L,EAA/L,EAAmM,EAAnM,EAAuM,CAAvM,EAA0M,CAA1M,EAA6M,CAA7M,EAAgN,EAAhN,EAAoN,EAApN,EAAwN,EAAxN,EAA4N,CAA5N,EAA+N,CAA/N,EAAkO,GAAlO,EAAuO,EAAvO,EAA2O,CAA3O,EAA8O,CAA9O,EAAiP,CAAjP,EAAoP,CAApP,EAAuP,EAAvP,EAA2P,CAA3P,EAA8P,CAA9P,EAAiQ,CAAjQ,EAAoQ,CAApQ,EAAuQ,CAAvQ,EAA0Q,CAA1Q,EAA6Q,CAA7Q,EAAgR,EAAhR,EAAoR,CAApR,EAAuR,EAAvR,EAA2R,CAA3R,EAA8R,CAA9R,EAAiS,CAAjS,EAAoS,CAApS,EAAuS,CAAvS,EAA0S,GAA1S,EAA+S,EAA/S,EAAmT,EAAnT,EAAuT,CAAvT,EAA0T,CAA1T,EAA6T,CAA7T,EAAgU,EAAhU,EAAoU,EAApU,EAAwU,EAAxU,EAA4U,CAA5U,EAA+U,GAA/U,EAAoV,CAApV,EAAuV,CAAvV,EAA0V,CAA1V,EAA6V,EAA7V,EAAiW,CAAjW,EAAoW,EAApW,EAAwW,EAAxW,EAA4W,EAA5W,EAAgX,CAAhX,EAAmX,EAAnX,EAAuX,EAAvX,EAA2X,CAA3X,EAA8X,CAA9X,EAAiY,EAAjY,EAAqY,EAArY,EAAyY,CAAzY,EAA4Y,CAA5Y,EAA+Y,GAA/Y,EAAoZ,EAApZ,EAAwZ,GAAxZ,EAA6Z,CAA7Z,EAAga,EAAha,EAAoa,CAApa,EAAua,CAAva,EAA0a,CAA1a,EAA6a,CAA7a,EAAgb,CAAhb,EAAmb,CAAnb,EAAsb,CAAtb,EAAyb,CAAzb,EAA4b,CAA5b,EAA+b,EAA/b,EAAmc,CAAnc,EAAsc,GAAtc,EAA2c,CAA3c,EAA8c,CAA9c,EAAid,CAAjd,EAAod,CAApd,EAAud,CAAvd,EAA0d,EAA1d,EAA8d,CAA9d,EAAie,EAAje,EAAqe,CAAre,EAAwe,CAAxe,EAA2e,CAA3e,EAA8e,CAA9e,EAAif,CAAjf,EAAof,EAApf,EAAwf,EAAxf,EAA4f,EAA5f,EAAggB,EAAhgB,EAAogB,GAApgB,EAAygB,CAAzgB,EAA4gB,CAA5gB,EAA+gB,CAA/gB,EAAkhB,EAAlhB,EAAshB,CAAthB,EAAyhB,EAAzhB,EAA6hB,EAA7hB,EAAiiB,CAAjiB,EAAoiB,EAApiB,EAAwiB,GAAxiB,EAA6iB,CAA7iB,EAAgjB,CAAhjB,EAAmjB,CAAnjB,EAAsjB,CAAtjB,EAAyjB,CAAzjB,EAA4jB,CAA5jB,EAA+jB,CAA/jB,EAAkkB,CAAlkB,EAAqkB,CAArkB,EAAwkB,CAAxkB,EAA2kB,CAA3kB,EAA8kB,EAA9kB,EAAklB,CAAllB,EAAqlB,CAArlB,EAAwlB,CAAxlB,EAA2lB,CAA3lB,EAA8lB,CAA9lB,EAAimB,CAAjmB,EAAomB,CAApmB,EAAumB,GAAvmB,EAA4mB,CAA5mB,EAA+mB,KAA/mB,EAAsnB,CAAtnB,EAAynB,GAAznB,EAA8nB,CAA9nB,EAAioB,EAAjoB,EAAqoB,CAAroB,EAAwoB,EAAxoB,EAA4oB,CAA5oB,EAA+oB,IAA/oB,EAAqpB,CAArpB,EAAwpB,CAAxpB,EAA2pB,EAA3pB,EAA+pB,CAA/pB,EAAkqB,CAAlqB,EAAqqB,EAArqB,EAAyqB,CAAzqB,EAA4qB,EAA5qB,EAAgrB,CAAhrB,EAAmrB,KAAnrB,EAA0rB,CAA1rB,EAA6rB,IAA7rB,EAAmsB,CAAnsB,EAAssB,CAAtsB,EAAysB,CAAzsB,EAA4sB,CAA5sB,EAA+sB,CAA/sB,EAAktB,CAAltB,EAAqtB,CAArtB,EAAwtB,EAAxtB,EAA4tB,CAA5tB,EAA+tB,GAA/tB,EAAouB,CAApuB,EAAuuB,IAAvuB,EAA6uB,EAA7uB,EAAivB,GAAjvB,EAAsvB,EAAtvB,EAA0vB,CAA1vB,EAA6vB,EAA7vB,EAAiwB,CAAjwB,EAAowB,CAApwB,EAAuwB,EAAvwB,EAA2wB,CAA3wB,EAA8wB,EAA9wB,EAAkxB,CAAlxB,EAAqxB,CAArxB,EAAwxB,EAAxxB,EAA4xB,IAA5xB,EAAkyB,CAAlyB,EAAqyB,CAAryB,EAAwyB,EAAxyB,EAA4yB,CAA5yB,EAA+yB,CAA/yB,EAAkzB,CAAlzB,EAAqzB,CAArzB,EAAwzB,CAAxzB,EAA2zB,CAA3zB,EAA8zB,GAA9zB,EAAm0B,CAAn0B,EAAs0B,EAAt0B,EAA00B,CAA10B,EAA60B,GAA70B,EAAk1B,EAAl1B,EAAs1B,IAAt1B,EAA41B,CAA51B,EAA+1B,GAA/1B,EAAo2B,CAAp2B,EAAu2B,CAAv2B,EAA02B,CAA12B,EAA62B,IAA72B,EAAm3B,CAAn3B,EAAs3B,MAAt3B,EAA83B,GAA93B,CAA9B;;AAEA,SAASC,aAAT,CAAuBhY,IAAvB,EAA6BjG,GAA7B,EAAkC;AAChC,MAAIsU,GAAG,GAAG,OAAV;;AAEA,OAAK,IAAIxL,CAAC,GAAG,CAAR,EAAWd,MAAM,GAAGhI,GAAG,CAACgI,MAA7B,EAAqCc,CAAC,GAAGd,MAAzC,EAAiDc,CAAC,IAAI,CAAtD,EAAyD;AACvDwL,IAAAA,GAAG,IAAItU,GAAG,CAAC8I,CAAD,CAAV;AACA,QAAIwL,GAAG,GAAGrO,IAAV,EAAgB,OAAO,KAAP;AAChBqO,IAAAA,GAAG,IAAItU,GAAG,CAAC8I,CAAC,GAAG,CAAL,CAAV;AACA,QAAIwL,GAAG,IAAIrO,IAAX,EAAiB,OAAO,IAAP;AAClB;;AAED,SAAO,KAAP;AACD;;AAED,SAASiY,iBAAT,CAA2BjY,IAA3B,EAAiC;AAC/B,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,IAAI,EAAZ,EAAgB,OAAO,IAAP;AAChB,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,IAAI,GAAZ,EAAiB,OAAO,IAAP;;AAEjB,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAClB,WAAOA,IAAI,IAAI,IAAR,IAAgB4X,uBAAuB,CAACM,IAAxB,CAA6B1H,MAAM,CAAC2H,YAAP,CAAoBnY,IAApB,CAA7B,CAAvB;AACD;;AAED,SAAOgY,aAAa,CAAChY,IAAD,EAAO8X,0BAAP,CAApB;AACD;;AACD,SAASM,gBAAT,CAA0BpY,IAA1B,EAAgC;AAC9B,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAO,IAAP;AACf,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAO,KAAP;AACf,MAAIA,IAAI,IAAI,EAAZ,EAAgB,OAAO,IAAP;AAChB,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,IAAI,GAAZ,EAAiB,OAAO,IAAP;;AAEjB,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAClB,WAAOA,IAAI,IAAI,IAAR,IAAgB6X,kBAAkB,CAACK,IAAnB,CAAwB1H,MAAM,CAAC2H,YAAP,CAAoBnY,IAApB,CAAxB,CAAvB;AACD;;AAED,SAAOgY,aAAa,CAAChY,IAAD,EAAO8X,0BAAP,CAAb,IAAmDE,aAAa,CAAChY,IAAD,EAAO+X,qBAAP,CAAvE;AACD;;AAED,MAAMM,aAAa,GAAG;AACpBhf,EAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA2B,UAA3B,EAAuC,UAAvC,EAAmD,SAAnD,EAA8D,IAA9D,EAAoE,MAApE,EAA4E,SAA5E,EAAuF,KAAvF,EAA8F,UAA9F,EAA0G,IAA1G,EAAgH,QAAhH,EAA0H,QAA1H,EAAoI,OAApI,EAA6I,KAA7I,EAAoJ,KAApJ,EAA2J,OAA3J,EAAoK,OAApK,EAA6K,MAA7K,EAAqL,KAArL,EAA4L,MAA5L,EAAoM,OAApM,EAA6M,OAA7M,EAAsN,SAAtN,EAAiO,QAAjO,EAA2O,QAA3O,EAAqP,MAArP,EAA6P,MAA7P,EAAqQ,OAArQ,EAA8Q,IAA9Q,EAAoR,YAApR,EAAkS,QAAlS,EAA4S,MAA5S,EAAoT,QAApT,CADW;AAEpBif,EAAAA,MAAM,EAAE,CAAC,YAAD,EAAe,WAAf,EAA4B,KAA5B,EAAmC,SAAnC,EAA8C,SAA9C,EAAyD,WAAzD,EAAsE,QAAtE,EAAgF,QAAhF,EAA0F,OAA1F,CAFY;AAGpBC,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,WAAT;AAHQ,CAAtB;AAKA,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,CAAQJ,aAAa,CAAChf,OAAtB,CAAjB;AACA,MAAMqf,sBAAsB,GAAG,IAAID,GAAJ,CAAQJ,aAAa,CAACC,MAAtB,CAA/B;AACA,MAAMK,0BAA0B,GAAG,IAAIF,GAAJ,CAAQJ,aAAa,CAACE,UAAtB,CAAnC;;AACA,SAASK,cAAT,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACtC,SAAOA,QAAQ,IAAID,IAAI,KAAK,OAArB,IAAgCA,IAAI,KAAK,MAAhD;AACD;;AACD,SAASE,oBAAT,CAA8BF,IAA9B,EAAoCC,QAApC,EAA8C;AAC5C,SAAOF,cAAc,CAACC,IAAD,EAAOC,QAAP,CAAd,IAAkCJ,sBAAsB,CAACjX,GAAvB,CAA2BoX,IAA3B,CAAzC;AACD;;AACD,SAASG,4BAAT,CAAsCH,IAAtC,EAA4C;AAC1C,SAAOF,0BAA0B,CAAClX,GAA3B,CAA+BoX,IAA/B,CAAP;AACD;;AACD,SAASI,wBAAT,CAAkCJ,IAAlC,EAAwCC,QAAxC,EAAkD;AAChD,SAAOC,oBAAoB,CAACF,IAAD,EAAOC,QAAP,CAApB,IAAwCE,4BAA4B,CAACH,IAAD,CAA3E;AACD;;AACD,SAASK,SAAT,CAAmBL,IAAnB,EAAyB;AACvB,SAAOL,QAAQ,CAAC/W,GAAT,CAAaoX,IAAb,CAAP;AACD;;AAED,MAAMM,yBAAyB,GAAG,iBAAlC;;AACA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,IAAlC,EAAwC;AACtC,SAAOD,OAAO,KAAK,EAAZ,IAAkBC,IAAI,KAAK,EAAlC;AACD;;AAED,MAAMC,WAAW,GAAG,WAApB;AAAA,MACMC,aAAa,GAAG,WADtB;AAAA,MAEMC,cAAc,GAAG,WAFvB;AAAA,MAGMC,WAAW,GAAG,WAHpB;AAAA,MAIMC,kBAAkB,GAAG,WAJ3B;AAAA,MAKMC,WAAW,GAAG,WALpB;AAAA,MAMMC,kBAAkB,GAAG,WAN3B;AAAA,MAOMC,WAAW,GAAG,WAPpB;AAAA,MAQMC,kBAAkB,GAAG,WAR3B;AAAA,MASMC,eAAe,GAAG,WATxB;AAAA,MAUMC,SAAS,GAAGT,aAAa,GAAGC,cAAhB,GAAiCO,eAVnD;AAWA,MAAME,eAAe,GAAG,cAAxB;AAAA,MACMC,cAAc,GAAG,cADvB;AAAA,MAEMC,cAAc,GAAG,cAFvB;AAAA,MAGMC,kBAAkB,GAAG,cAH3B;AAAA,MAIMC,mBAAmB,GAAG,cAJ5B;AAAA,MAKMC,eAAe,GAAG,cALxB;AAAA,MAMMC,gBAAgB,GAAG,cANzB;AAAA,MAOMC,kBAAkB,GAAG,cAP3B;AAAA,MAQMC,wBAAwB,GAAG,cARjC;AAAA,MASMC,yBAAyB,GAAG,cATlC;AAAA,MAUMC,0BAA0B,GAAG,cAVnC;AAWA,MAAMC,UAAU,GAAGX,eAAe,GAAGC,cAAlB,GAAmCE,kBAAnC,GAAwDG,gBAA3E;AAAA,MACMM,YAAY,GAAGZ,eAAe,GAAG,CAAlB,GAAsBG,kBAAtB,GAA2C,CADhE;AAAA,MAEMU,QAAQ,GAAGb,eAAe,GAAG,CAAlB,GAAsBE,cAAtB,GAAuC,CAFxD;AAAA,MAGMY,aAAa,GAAGd,eAAe,GAAG,CAAlB,GAAsBI,mBAAtB,GAA4C,CAHlE;AAAA,MAIMW,iBAAiB,GAAG,IAAId,cAAJ,GAAqB,CAArB,GAAyBK,gBAJnD;AAAA,MAKMU,YAAY,GAAG,IAAIf,cAAJ,GAAqB,CAArB,GAAyB,CAL9C;AAAA,MAMMgB,YAAY,GAAGjB,eAAe,GAAGC,cAAlB,GAAmCE,kBAAnC,GAAwDI,kBAN7E;AAAA,MAOMW,eAAe,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAYT,yBAPpC;AAAA,MAQMU,SAAS,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAYd,eAR9B;AAAA,MASMe,YAAY,GAAGpB,eAAe,GAAG,CAAlB,GAAsB,CAAtB,GAA0BK,eAT/C;AAAA,MAUMgB,kBAAkB,GAAGJ,YAAY,GAAGT,wBAV1C;AAAA,MAWMc,iBAAiB,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAYb,yBAXtC;AAAA,MAYMc,oBAAoB,GAAGb,0BAZ7B;AAaA,MAAMc,yBAAyB,GAAG,KAAlC;AAAA,MACMC,yBAAyB,GAAG,KADlC;AAAA,MAEMC,yBAAyB,GAAG,KAFlC;AAAA,MAGMC,2BAA2B,GAAGF,yBAAyB,GAAGC,yBAHhE;AAIA,MAAME,2BAA2B,GAAGH,yBAAyB,GAAGD,yBAAhE;AAAA,MACMK,2BAA2B,GAAGH,yBAAyB,GAAGF,yBADhE;AAAA,MAEMM,6BAA6B,GAAGL,yBAFtC;AAAA,MAGMM,6BAA6B,GAAGL,yBAHtC;AAAA,MAIMM,mBAAmB,GAAG,CAJ5B;;AAMA,MAAMC,KAAN,CAAY;AACVjjB,EAAAA,WAAW,CAAC8W,KAAD,EAAQ;AACjB,SAAKA,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKoM,GAAL,GAAW,EAAX;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKtM,KAAL,GAAaA,KAAb;AACD;;AAPS;;AAUZ,MAAMuM,YAAN,CAAmB;AACjBrjB,EAAAA,WAAW,CAAC0V,KAAD,EAAQkK,QAAR,EAAkB;AAC3B,SAAK0D,UAAL,GAAkB,EAAlB;AACA,SAAKC,gBAAL,GAAwB,IAAI/iB,GAAJ,EAAxB;AACA,SAAKgjB,qBAAL,GAA6B,IAAIhjB,GAAJ,EAA7B;AACA,SAAKkV,KAAL,GAAaA,KAAb;AACA,SAAKkK,QAAL,GAAgBA,QAAhB;AACD;;AAEa,MAAV6D,UAAU,GAAG;AACf,WAAO,CAAC,KAAKC,eAAL,GAAuB5M,KAAvB,GAA+ByJ,cAAhC,IAAkD,CAAzD;AACD;;AAEa,MAAVoD,UAAU,GAAG;AACf,WAAO,CAAC,KAAKC,gBAAL,GAAwB9M,KAAxB,GAAgC4J,WAAjC,IAAgD,CAAvD;AACD;;AAEmB,MAAhBnG,gBAAgB,GAAG;AACrB,WAAO,CAAC,KAAKqJ,gBAAL,GAAwB9M,KAAxB,GAAgC6J,kBAAjC,IAAuD,CAA9D;AACD;;AAEU,MAAPkD,OAAO,GAAG;AACZ,WAAO,CAAC,KAAKD,gBAAL,GAAwB9M,KAAxB,GAAgC8J,WAAjC,IAAgD,CAAvD;AACD;;AAEgB,MAAbkD,aAAa,GAAG;AAClB,WAAO,CAAC,KAAKF,gBAAL,GAAwB9M,KAAxB,GAAgC+J,kBAAjC,IAAuD,CAA9D;AACD;;AAEqB,MAAlBkD,kBAAkB,GAAG;AACvB,WAAO,CAAC,KAAKH,gBAAL,GAAwB9M,KAAxB,GAAgCyJ,cAAjC,IAAmD,CAA1D;AACD;;AAEsB,MAAnByD,mBAAmB,GAAG;AACxB,WAAO,KAAKC,0BAAL,CAAgC,KAAKC,YAAL,EAAhC,CAAP;AACD;;AAEDC,EAAAA,WAAW,CAACrN,KAAD,EAAQ;AACjB,WAAO,IAAImM,KAAJ,CAAUnM,KAAV,CAAP;AACD;;AAEDsN,EAAAA,KAAK,CAACtN,KAAD,EAAQ;AACX,SAAKwM,UAAL,CAAgBla,IAAhB,CAAqB,KAAK+a,WAAL,CAAiBrN,KAAjB,CAArB;AACD;;AAEDuN,EAAAA,IAAI,GAAG;AACL,SAAKf,UAAL,CAAgB7Y,GAAhB;AACD;;AAEDwZ,EAAAA,0BAA0B,CAACK,KAAD,EAAQ;AAChC,WAAO,CAAC,EAAEA,KAAK,CAACxN,KAAN,GAAcyJ,cAAd,IAAgC,CAAC,KAAKX,QAAN,IAAkB0E,KAAK,CAACxN,KAAN,GAAcwJ,aAAlE,CAAR;AACD;;AAEDiE,EAAAA,WAAW,CAAC7jB,IAAD,EAAO8jB,WAAP,EAAoBrP,GAApB,EAAyB;AAClC,QAAImP,KAAK,GAAG,KAAKJ,YAAL,EAAZ;;AAEA,QAAIM,WAAW,GAAGrD,kBAAd,IAAoCqD,WAAW,GAAGpD,mBAAtD,EAA2E;AACzE,WAAKqD,yBAAL,CAA+BH,KAA/B,EAAsC5jB,IAAtC,EAA4C8jB,WAA5C,EAAyDrP,GAAzD;;AAEA,UAAIqP,WAAW,GAAGpD,mBAAlB,EAAuC;AACrCkD,QAAAA,KAAK,CAAClB,SAAN,CAAgBha,IAAhB,CAAqB1I,IAArB;AACD,OAFD,MAEO;AACL4jB,QAAAA,KAAK,CAACnB,OAAN,CAAc/Z,IAAd,CAAmB1I,IAAnB;AACD;;AAED,UAAI8jB,WAAW,GAAGrD,kBAAlB,EAAsC;AACpC,aAAKuD,kBAAL,CAAwBJ,KAAxB,EAA+B5jB,IAA/B;AACD;AACF,KAZD,MAYO,IAAI8jB,WAAW,GAAGtD,cAAlB,EAAkC;AACvC,WAAK,IAAIvX,CAAC,GAAG,KAAK2Z,UAAL,CAAgBza,MAAhB,GAAyB,CAAtC,EAAyCc,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpD2a,QAAAA,KAAK,GAAG,KAAKhB,UAAL,CAAgB3Z,CAAhB,CAAR;AACA,aAAK8a,yBAAL,CAA+BH,KAA/B,EAAsC5jB,IAAtC,EAA4C8jB,WAA5C,EAAyDrP,GAAzD;AACAmP,QAAAA,KAAK,CAACpB,GAAN,CAAU9Z,IAAV,CAAe1I,IAAf;AACA,aAAKgkB,kBAAL,CAAwBJ,KAAxB,EAA+B5jB,IAA/B;AACA,YAAI4jB,KAAK,CAACxN,KAAN,GAAciK,SAAlB,EAA6B;AAC9B;AACF;;AAED,QAAI,KAAKnB,QAAL,IAAiB0E,KAAK,CAACxN,KAAN,GAAcwJ,aAAnC,EAAkD;AAChD,WAAKiD,gBAAL,CAAsBoB,MAAtB,CAA6BjkB,IAA7B;AACD;AACF;;AAEDgkB,EAAAA,kBAAkB,CAACJ,KAAD,EAAQ5jB,IAAR,EAAc;AAC9B,QAAI,KAAKkf,QAAL,IAAiB0E,KAAK,CAACxN,KAAN,GAAcwJ,aAAnC,EAAkD;AAChD,WAAKiD,gBAAL,CAAsBoB,MAAtB,CAA6BjkB,IAA7B;AACD;AACF;;AAED+jB,EAAAA,yBAAyB,CAACH,KAAD,EAAQ5jB,IAAR,EAAc8jB,WAAd,EAA2BrP,GAA3B,EAAgC;AACvD,QAAI,KAAKyP,mBAAL,CAAyBN,KAAzB,EAAgC5jB,IAAhC,EAAsC8jB,WAAtC,CAAJ,EAAwD;AACtD,WAAK9O,KAAL,CAAWP,GAAX,EAAgB/J,aAAa,CAACiJ,gBAA9B,EAAgD3T,IAAhD;AACD;AACF;;AAEDkkB,EAAAA,mBAAmB,CAACN,KAAD,EAAQ5jB,IAAR,EAAc8jB,WAAd,EAA2B;AAC5C,QAAI,EAAEA,WAAW,GAAGxD,eAAhB,CAAJ,EAAsC,OAAO,KAAP;;AAEtC,QAAIwD,WAAW,GAAGrD,kBAAlB,EAAsC;AACpC,aAAOmD,KAAK,CAACnB,OAAN,CAAc0B,OAAd,CAAsBnkB,IAAtB,IAA8B,CAAC,CAA/B,IAAoC4jB,KAAK,CAAClB,SAAN,CAAgByB,OAAhB,CAAwBnkB,IAAxB,IAAgC,CAAC,CAArE,IAA0E4jB,KAAK,CAACpB,GAAN,CAAU2B,OAAV,CAAkBnkB,IAAlB,IAA0B,CAAC,CAA5G;AACD;;AAED,QAAI8jB,WAAW,GAAGpD,mBAAlB,EAAuC;AACrC,aAAOkD,KAAK,CAACnB,OAAN,CAAc0B,OAAd,CAAsBnkB,IAAtB,IAA8B,CAAC,CAA/B,IAAoC,CAAC,KAAKujB,0BAAL,CAAgCK,KAAhC,CAAD,IAA2CA,KAAK,CAACpB,GAAN,CAAU2B,OAAV,CAAkBnkB,IAAlB,IAA0B,CAAC,CAAjH;AACD;;AAED,WAAO4jB,KAAK,CAACnB,OAAN,CAAc0B,OAAd,CAAsBnkB,IAAtB,IAA8B,CAAC,CAA/B,IAAoC,EAAE4jB,KAAK,CAACxN,KAAN,GAAc2J,kBAAd,IAAoC6D,KAAK,CAACnB,OAAN,CAAc,CAAd,MAAqBziB,IAA3D,CAApC,IAAwG,CAAC,KAAKujB,0BAAL,CAAgCK,KAAhC,CAAD,IAA2CA,KAAK,CAAClB,SAAN,CAAgByB,OAAhB,CAAwBnkB,IAAxB,IAAgC,CAAC,CAA3L;AACD;;AAEDokB,EAAAA,gBAAgB,CAAC7K,EAAD,EAAK;AACnB,QAAI,KAAKqJ,UAAL,CAAgB,CAAhB,EAAmBH,OAAnB,CAA2B0B,OAA3B,CAAmC5K,EAAE,CAACvZ,IAAtC,MAAgD,CAAC,CAAjD,IAAsD,KAAK4iB,UAAL,CAAgB,CAAhB,EAAmBJ,GAAnB,CAAuB2B,OAAvB,CAA+B5K,EAAE,CAACvZ,IAAlC,MAA4C,CAAC,CAAnG,IAAwG,KAAK4iB,UAAL,CAAgB,CAAhB,EAAmBF,SAAnB,CAA6ByB,OAA7B,CAAqC5K,EAAE,CAACvZ,IAAxC,MAAkD,CAAC,CAA/J,EAAkK;AAChK,WAAK6iB,gBAAL,CAAsB1iB,GAAtB,CAA0BoZ,EAAE,CAACvZ,IAA7B,EAAmCuZ,EAAE,CAAC3S,KAAtC;AACD;AACF;;AAED4c,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKZ,UAAL,CAAgB,KAAKA,UAAL,CAAgBza,MAAhB,GAAyB,CAAzC,CAAP;AACD;;AAED6a,EAAAA,eAAe,GAAG;AAChB,SAAK,IAAI/Z,CAAC,GAAG,KAAK2Z,UAAL,CAAgBza,MAAhB,GAAyB,CAAtC,GAA0Cc,CAAC,EAA3C,EAA+C;AAC7C,YAAM2a,KAAK,GAAG,KAAKhB,UAAL,CAAgB3Z,CAAhB,CAAd;;AAEA,UAAI2a,KAAK,CAACxN,KAAN,GAAciK,SAAlB,EAA6B;AAC3B,eAAOuD,KAAP;AACD;AACF;AACF;;AAEDV,EAAAA,gBAAgB,GAAG;AACjB,SAAK,IAAIja,CAAC,GAAG,KAAK2Z,UAAL,CAAgBza,MAAhB,GAAyB,CAAtC,GAA0Cc,CAAC,EAA3C,EAA+C;AAC7C,YAAM2a,KAAK,GAAG,KAAKhB,UAAL,CAAgB3Z,CAAhB,CAAd;;AAEA,UAAI,CAAC2a,KAAK,CAACxN,KAAN,GAAciK,SAAd,IAA2BuD,KAAK,CAACxN,KAAN,GAAc8J,WAA1C,KAA0D,EAAE0D,KAAK,CAACxN,KAAN,GAAc0J,WAAhB,CAA9D,EAA4F;AAC1F,eAAO8D,KAAP;AACD;AACF;AACF;;AAzIgB;;AA6InB,MAAMS,SAAN,SAAwB9B,KAAxB,CAA8B;AAC5BjjB,EAAAA,WAAW,CAAC,GAAG+Y,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;AACA,SAAKiM,gBAAL,GAAwB,EAAxB;AACD;;AAJ2B;;AAQ9B,MAAMC,gBAAN,SAA+B5B,YAA/B,CAA4C;AAC1Cc,EAAAA,WAAW,CAACrN,KAAD,EAAQ;AACjB,WAAO,IAAIiO,SAAJ,CAAcjO,KAAd,CAAP;AACD;;AAEDyN,EAAAA,WAAW,CAAC7jB,IAAD,EAAO8jB,WAAP,EAAoBrP,GAApB,EAAyB;AAClC,UAAMmP,KAAK,GAAG,KAAKJ,YAAL,EAAd;;AAEA,QAAIM,WAAW,GAAG9C,0BAAlB,EAA8C;AAC5C,WAAK+C,yBAAL,CAA+BH,KAA/B,EAAsC5jB,IAAtC,EAA4C8jB,WAA5C,EAAyDrP,GAAzD;AACA,WAAKuP,kBAAL,CAAwBJ,KAAxB,EAA+B5jB,IAA/B;AACA4jB,MAAAA,KAAK,CAACU,gBAAN,CAAuB5b,IAAvB,CAA4B1I,IAA5B;AACA;AACD;;AAED,UAAM6jB,WAAN,CAAkB,GAAG5Z,SAArB;AACD;;AAEDia,EAAAA,mBAAmB,CAACN,KAAD,EAAQ5jB,IAAR,EAAc8jB,WAAd,EAA2B;AAC5C,QAAI,MAAMI,mBAAN,CAA0B,GAAGja,SAA7B,CAAJ,EAA6C,OAAO,IAAP;;AAE7C,QAAI6Z,WAAW,GAAG9C,0BAAlB,EAA8C;AAC5C,aAAO,CAAC4C,KAAK,CAACU,gBAAN,CAAuBE,QAAvB,CAAgCxkB,IAAhC,CAAD,KAA2C4jB,KAAK,CAACnB,OAAN,CAAc+B,QAAd,CAAuBxkB,IAAvB,KAAgC4jB,KAAK,CAAClB,SAAN,CAAgB8B,QAAhB,CAAyBxkB,IAAzB,CAA3E,CAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDokB,EAAAA,gBAAgB,CAAC7K,EAAD,EAAK;AACnB,QAAI,KAAKqJ,UAAL,CAAgB,CAAhB,EAAmB0B,gBAAnB,CAAoCH,OAApC,CAA4C5K,EAAE,CAACvZ,IAA/C,MAAyD,CAAC,CAA9D,EAAiE;AAC/D,YAAMokB,gBAAN,CAAuB7K,EAAvB;AACD;AACF;;AAhCyC;;AAoC5C,MAAMkL,aAAa,GAAG,IAAI5F,GAAJ,CAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,MAAb,EAAqB,SAArB,EAAgC,OAAhC,EAAyC,SAAzC,EAAoD,OAApD,EAA6D,WAA7D,EAA0E,OAA1E,EAAmF,MAAnF,EAA2F,QAA3F,EAAqG,QAArG,EAA+G,QAA/G,EAAyH,MAAzH,EAAiI,QAAjI,EAA2I,MAA3I,CAAR,CAAtB;AACA,MAAM6F,UAAU,GAAG/Z,kBAAkB,CAAC;AACpCga,EAAAA,yBAAyB,EAAE,gFADS;AAEpCC,EAAAA,0BAA0B,EAAE,wKAFQ;AAGpCC,EAAAA,kBAAkB,EAAE,oCAHgB;AAIpCC,EAAAA,mBAAmB,EAAE,yDAJe;AAKpCC,EAAAA,4BAA4B,EAAE,qEALM;AAMpCC,EAAAA,6BAA6B,EAAE,+CANK;AAOpCC,EAAAA,+BAA+B,EAAE,qGAPG;AAQpCC,EAAAA,uBAAuB,EAAE,mGARW;AASpCC,EAAAA,4BAA4B,EAAE,8KATM;AAUpCC,EAAAA,uBAAuB,EAAE,kGAVW;AAWpCC,EAAAA,sCAAsC,EAAE,sGAXJ;AAYpCC,EAAAA,uCAAuC,EAAE,+EAZL;AAapCC,EAAAA,sCAAsC,EAAE,oEAbJ;AAcpCC,EAAAA,uCAAuC,EAAE,gHAdL;AAepCC,EAAAA,qBAAqB,EAAE,0HAfa;AAgBpCC,EAAAA,8BAA8B,EAAE,yEAhBI;AAiBpCC,EAAAA,yCAAyC,EAAE,6GAjBP;AAkBpCC,EAAAA,yBAAyB,EAAE,0CAlBS;AAmBpCC,EAAAA,mCAAmC,EAAE,wKAnBD;AAoBpCC,EAAAA,kBAAkB,EAAE,6EApBgB;AAqBpCC,EAAAA,sBAAsB,EAAE,0EArBY;AAsBpCC,EAAAA,eAAe,EAAE,+CAtBmB;AAuBpCC,EAAAA,mCAAmC,EAAE,yFAvBD;AAwBpCC,EAAAA,uBAAuB,EAAE,yGAxBW;AAyBpCC,EAAAA,mBAAmB,EAAE,kEAzBe;AA0BpCC,EAAAA,iBAAiB,EAAE,yDA1BiB;AA2BpCC,EAAAA,sBAAsB,EAAE,gFA3BY;AA4BpCC,EAAAA,yBAAyB,EAAE,0CA5BS;AA6BpCC,EAAAA,cAAc,EAAE,yCA7BoB;AA8BpCC,EAAAA,2BAA2B,EAAE,yDA9BO;AA+BpCC,EAAAA,4BAA4B,EAAE,mGA/BM;AAgCpCC,EAAAA,yBAAyB,EAAE,0CAhCS;AAiCpCC,EAAAA,oBAAoB,EAAE,4DAjCc;AAkCpCC,EAAAA,kBAAkB,EAAE,oDAlCgB;AAmCpCC,EAAAA,qBAAqB,EAAE,mHAnCa;AAoCpCC,EAAAA,iBAAiB,EAAE,sEApCiB;AAqCpCC,EAAAA,iCAAiC,EAAE,sEArCC;AAsCpCC,EAAAA,sBAAsB,EAAE,8BAtCY;AAuCpCC,EAAAA,4BAA4B,EAAE,wDAvCM;AAwCpCC,EAAAA,kCAAkC,EAAE,uDAxCA;AAyCpCC,EAAAA,oBAAoB,EAAE,kEAzCc;AA0CpCC,EAAAA,4BAA4B,EAAE,kDA1CM;AA2CpCC,EAAAA,iCAAiC,EAAE,mEA3CC;AA4CpCC,EAAAA,+CAA+C,EAAE,mHA5Cb;AA6CpCC,EAAAA,4BAA4B,EAAE,yDA7CM;AA8CpCC,EAAAA,mCAAmC,EAAE,mEA9CD;AA+CpCC,EAAAA,uBAAuB,EAAE;AA/CW,CAAD,EAgDlCnd,UAAU,CAACE,WAhDuB,CAArC;;AAkDA,SAASkd,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,SAAOA,WAAW,CAACle,IAAZ,KAAqB,6BAArB,IAAsDke,WAAW,CAACle,IAAZ,KAAqB,0BAArB,KAAoD,CAACke,WAAW,CAACC,WAAb,IAA4BD,WAAW,CAACC,WAAZ,CAAwBne,IAAxB,KAAiC,WAAjC,IAAgDke,WAAW,CAACC,WAAZ,CAAwBne,IAAxB,KAAiC,sBAAjK,CAA7D;AACD;;AAED,SAASoe,iBAAT,CAA2Bhf,IAA3B,EAAiC;AAC/B,SAAOA,IAAI,CAACif,UAAL,KAAoB,MAApB,IAA8Bjf,IAAI,CAACif,UAAL,KAAoB,QAAzD;AACD;;AAED,SAASC,oBAAT,CAA8Bvf,KAA9B,EAAqC;AACnC,SAAO,CAACA,KAAK,CAACiB,IAAN,KAAepJ,OAAO,CAACL,IAAvB,IAA+B,CAAC,CAACwI,KAAK,CAACiB,IAAN,CAAWhK,OAA7C,KAAyD+I,KAAK,CAAC1J,KAAN,KAAgB,MAAhF;AACD;;AAED,MAAMkpB,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,oBADiB;AAExBC,EAAAA,GAAG,EAAE,oBAFmB;AAGxBze,EAAAA,IAAI,EAAE,aAHkB;AAIxB0e,EAAAA,SAAS,EAAE;AAJa,CAA1B;;AAOA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB/J,IAAzB,EAA+B;AAC7B,QAAMgK,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAItf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGof,IAAI,CAAClgB,MAAzB,EAAiCc,CAAC,EAAlC,EAAsC;AACpC,KAACqV,IAAI,CAAC+J,IAAI,CAACpf,CAAD,CAAL,EAAUA,CAAV,EAAaof,IAAb,CAAJ,GAAyBC,KAAzB,GAAiCC,KAAlC,EAAyC7f,IAAzC,CAA8C2f,IAAI,CAACpf,CAAD,CAAlD;AACD;;AAED,SAAO,CAACqf,KAAD,EAAQC,KAAR,CAAP;AACD;;AAED,MAAMC,iBAAiB,GAAG,wBAA1B;;AACA,IAAIC,IAAI,GAAIxS,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACjD3W,EAAAA,WAAW,CAAC,GAAG+Y,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;AACA,SAAKqQ,UAAL,GAAkBnf,SAAlB;AACD;;AAEDof,EAAAA,eAAe,GAAG;AAChB,WAAOpE,gBAAP;AACD;;AAEDqE,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAK9gB,eAAL,CAAqB,MAArB,EAA6B,KAA7B,KAAuC,KAAK4gB,UAAL,KAAoB,MAAlE;AACD;;AAEDG,EAAAA,gBAAgB,GAAG;AACjB,WAAO,CAAC,CAAC,KAAK/gB,eAAL,CAAqB,MAArB,EAA6B,OAA7B,CAAT;AACD;;AAEDghB,EAAAA,WAAW,CAACrf,IAAD,EAAOsf,GAAP,EAAY;AACrB,QAAItf,IAAI,KAAKpJ,OAAO,CAACK,MAAjB,IAA2B+I,IAAI,KAAKpJ,OAAO,CAACqB,IAA5C,IAAoD+H,IAAI,KAAKpJ,OAAO,CAACkC,oBAAzE,EAA+F;AAC7F,UAAI,KAAKmmB,UAAL,KAAoBnf,SAAxB,EAAmC;AACjC,aAAKmf,UAAL,GAAkB,IAAlB;AACD;AACF;;AAED,WAAO,MAAMI,WAAN,CAAkBrf,IAAlB,EAAwBsf,GAAxB,CAAP;AACD;;AAED1gB,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,QAAI,KAAKogB,UAAL,KAAoBnf,SAAxB,EAAmC;AACjC,YAAMyf,OAAO,GAAGR,iBAAiB,CAAClhB,IAAlB,CAAuBgB,OAAO,CAACxJ,KAA/B,CAAhB;AAEA,UAAI,CAACkqB,OAAL,EAAc,CAAd,KAAqB,IAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,MAAnB,EAA2B;AAC9C,aAAKN,UAAL,GAAkB,MAAlB;AACD,OAFoB,MAEd,IAAIM,OAAO,CAAC,CAAD,CAAP,KAAe,QAAnB,EAA6B;AAClC,aAAKN,UAAL,GAAkB,QAAlB;AACD,OAFM,MAEA;AACL,cAAM,IAAIO,KAAJ,CAAU,wBAAV,CAAN;AACD;AACF;;AAED,WAAO,MAAM5gB,UAAN,CAAiBC,OAAjB,CAAP;AACD;;AAED4gB,EAAAA,wBAAwB,CAACC,GAAD,EAAM;AAC5B,UAAMC,SAAS,GAAG,KAAK5gB,KAAL,CAAW6gB,MAA7B;AACA,SAAK7gB,KAAL,CAAW6gB,MAAX,GAAoB,IAApB;AACA,SAAKC,MAAL,CAAYH,GAAG,IAAI9oB,OAAO,CAACsB,KAA3B;AACA,UAAM8H,IAAI,GAAG,KAAK8f,aAAL,EAAb;AACA,SAAK/gB,KAAL,CAAW6gB,MAAX,GAAoBD,SAApB;AACA,WAAO3f,IAAP;AACD;;AAED+f,EAAAA,kBAAkB,GAAG;AACnB,UAAM3gB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,UAAMyP,SAAS,GAAG,KAAKjhB,KAAL,CAAW5B,KAA7B;AACA,SAAK8Y,IAAL;AACA,SAAKgK,gBAAL,CAAsB,QAAtB;;AAEA,QAAI,KAAKlhB,KAAL,CAAWmM,YAAX,GAA0B8U,SAAS,GAAG,CAA1C,EAA6C;AAC3C,WAAKzU,KAAL,CAAWyU,SAAX,EAAsB/E,UAAU,CAACwC,kCAAjC;AACD;;AAED,QAAI,KAAKyC,GAAL,CAAStpB,OAAO,CAACkB,MAAjB,CAAJ,EAA8B;AAC5BsH,MAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAK8qB,eAAL,EAAb;AACA,WAAKN,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACA,aAAO,KAAK2Y,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD,KAJD,MAIO;AACL,aAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;AACF;;AAEDghB,EAAAA,oCAAoC,GAAG;AACrC,UAAMT,SAAS,GAAG,KAAK5gB,KAAL,CAAW6gB,MAA7B;AACA,SAAK7gB,KAAL,CAAW6gB,MAAX,GAAoB,IAApB;AACA,SAAKC,MAAL,CAAYjpB,OAAO,CAACsB,KAApB;AACA,QAAI8H,IAAI,GAAG,IAAX;AACA,QAAIqgB,SAAS,GAAG,IAAhB;;AAEA,QAAI,KAAK1iB,KAAL,CAAW/G,OAAO,CAACmD,MAAnB,CAAJ,EAAgC;AAC9B,WAAKgF,KAAL,CAAW6gB,MAAX,GAAoBD,SAApB;AACAU,MAAAA,SAAS,GAAG,KAAKN,kBAAL,EAAZ;AACD,KAHD,MAGO;AACL/f,MAAAA,IAAI,GAAG,KAAK8f,aAAL,EAAP;AACA,WAAK/gB,KAAL,CAAW6gB,MAAX,GAAoBD,SAApB;;AAEA,UAAI,KAAKhiB,KAAL,CAAW/G,OAAO,CAACmD,MAAnB,CAAJ,EAAgC;AAC9BsmB,QAAAA,SAAS,GAAG,KAAKN,kBAAL,EAAZ;AACD;AACF;;AAED,WAAO,CAAC/f,IAAD,EAAOqgB,SAAP,CAAP;AACD;;AAEDC,EAAAA,qBAAqB,CAAClhB,IAAD,EAAO;AAC1B,SAAK6W,IAAL;AACA,SAAKsK,qBAAL,CAA2BnhB,IAA3B,EAAiC,IAAjC;AACA,WAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDohB,EAAAA,wBAAwB,CAACphB,IAAD,EAAO;AAC7B,SAAK6W,IAAL;AACA,UAAMnG,EAAE,GAAG1Q,IAAI,CAAC0Q,EAAL,GAAU,KAAK2Q,eAAL,EAArB;AACA,UAAMC,QAAQ,GAAG,KAAKnQ,SAAL,EAAjB;AACA,UAAMoQ,aAAa,GAAG,KAAKpQ,SAAL,EAAtB;;AAEA,QAAI,KAAKqQ,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BF,MAAAA,QAAQ,CAAClR,cAAT,GAA0B,KAAKqR,iCAAL,EAA1B;AACD,KAFD,MAEO;AACLH,MAAAA,QAAQ,CAAClR,cAAT,GAA0B,IAA1B;AACD;;AAED,SAAKqQ,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;AACA,UAAMgpB,GAAG,GAAG,KAAKC,2BAAL,EAAZ;AACAL,IAAAA,QAAQ,CAAClV,MAAT,GAAkBsV,GAAG,CAACtV,MAAtB;AACAkV,IAAAA,QAAQ,CAACM,IAAT,GAAgBF,GAAG,CAACE,IAApB;AACAN,IAAAA,QAAQ,CAACO,IAAT,GAAgBH,GAAG,CAACtlB,KAApB;AACA,SAAKqkB,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACA,KAAC2oB,QAAQ,CAACQ,UAAV,EAAsB9hB,IAAI,CAACihB,SAA3B,IAAwC,KAAKD,oCAAL,EAAxC;AACAO,IAAAA,aAAa,CAACQ,cAAd,GAA+B,KAAKzQ,UAAL,CAAgBgQ,QAAhB,EAA0B,wBAA1B,CAA/B;AACA5Q,IAAAA,EAAE,CAACqR,cAAH,GAAoB,KAAKzQ,UAAL,CAAgBiQ,aAAhB,EAA+B,gBAA/B,CAApB;AACA,SAAKS,gBAAL,CAAsBtR,EAAtB;AACA,SAAKuR,SAAL;AACA,SAAKlH,KAAL,CAAWC,WAAX,CAAuBhb,IAAI,CAAC0Q,EAAL,CAAQvZ,IAA/B,EAAqC6hB,oBAArC,EAA2DhZ,IAAI,CAAC0Q,EAAL,CAAQ3S,KAAnE;AACA,WAAO,KAAKuT,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDkiB,EAAAA,gBAAgB,CAACliB,IAAD,EAAOmiB,YAAP,EAAqB;AACnC,QAAI,KAAK5jB,KAAL,CAAW/G,OAAO,CAAC8E,MAAnB,CAAJ,EAAgC;AAC9B,aAAO,KAAK4kB,qBAAL,CAA2BlhB,IAA3B,CAAP;AACD,KAFD,MAEO,IAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACiE,SAAnB,CAAJ,EAAmC;AACxC,aAAO,KAAK2lB,wBAAL,CAA8BphB,IAA9B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACuE,IAAnB,CAAJ,EAA8B;AACnC,aAAO,KAAKqmB,wBAAL,CAA8BpiB,IAA9B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKqiB,aAAL,CAAmB,QAAnB,CAAJ,EAAkC;AACvC,UAAI,KAAK9jB,KAAL,CAAW/G,OAAO,CAACwB,GAAnB,CAAJ,EAA6B;AAC3B,eAAO,KAAKspB,6BAAL,CAAmCtiB,IAAnC,CAAP;AACD,OAFD,MAEO;AACL,YAAImiB,YAAJ,EAAkB;AAChB,eAAKhW,KAAL,CAAW,KAAKxM,KAAL,CAAWmM,YAAtB,EAAoC+P,UAAU,CAACyB,mBAA/C;AACD;;AAED,eAAO,KAAKiF,sBAAL,CAA4BviB,IAA5B,CAAP;AACD;AACF,KAVM,MAUA,IAAI,KAAKwiB,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AACpC,aAAO,KAAKC,yBAAL,CAA+BziB,IAA/B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKwiB,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AACtC,aAAO,KAAKE,0BAAL,CAAgC1iB,IAAhC,CAAP;AACD,KAFM,MAEA,IAAI,KAAKwiB,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AACzC,aAAO,KAAKG,yBAAL,CAA+B3iB,IAA/B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACgF,OAAnB,CAAJ,EAAiC;AACtC,aAAO,KAAKomB,iCAAL,CAAuC5iB,IAAvC,EAA6CmiB,YAA7C,CAAP;AACD,KAFM,MAEA;AACL,YAAM,KAAKU,UAAL,EAAN;AACD;AACF;;AAEDT,EAAAA,wBAAwB,CAACpiB,IAAD,EAAO;AAC7B,SAAK6W,IAAL;AACA7W,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAKoS,kCAAL,CAAwC,IAAxC,CAAV;AACA,SAAK/H,KAAL,CAAWC,WAAX,CAAuBhb,IAAI,CAAC0Q,EAAL,CAAQvZ,IAA/B,EAAqCmhB,QAArC,EAA+CtY,IAAI,CAAC0Q,EAAL,CAAQ3S,KAAvD;AACA,SAAKkkB,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDuiB,EAAAA,sBAAsB,CAACviB,IAAD,EAAO;AAC3B,SAAK+a,KAAL,CAAWF,KAAX,CAAiB/D,WAAjB;;AAEA,QAAI,KAAKvY,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAJ,EAAgC;AAC9BmI,MAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAKL,aAAL,EAAV;AACD,KAFD,MAEO;AACLrQ,MAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2Q,eAAL,EAAV;AACD;;AAED,UAAM0B,QAAQ,GAAG/iB,IAAI,CAACa,IAAL,GAAY,KAAKsQ,SAAL,EAA7B;AACA,UAAMtQ,IAAI,GAAGkiB,QAAQ,CAACliB,IAAT,GAAgB,EAA7B;AACA,SAAK4f,MAAL,CAAYjpB,OAAO,CAACa,MAApB;;AAEA,WAAO,CAAC,KAAKkG,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAR,EAAoC;AAClC,UAAIuqB,QAAQ,GAAG,KAAK5R,SAAL,EAAf;;AAEA,UAAI,KAAK5S,KAAL,CAAW/G,OAAO,CAACiF,OAAnB,CAAJ,EAAiC;AAC/B,aAAKoa,IAAL;;AAEA,YAAI,CAAC,KAAK2L,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKjkB,KAAL,CAAW/G,OAAO,CAACuF,OAAnB,CAAnC,EAAgE;AAC9D,eAAKoP,KAAL,CAAW,KAAKxM,KAAL,CAAWmM,YAAtB,EAAoC+P,UAAU,CAACuB,mCAA/C;AACD;;AAED,aAAK4F,WAAL,CAAiBD,QAAjB;AACD,OARD,MAQO;AACL,aAAKlC,gBAAL,CAAsB,SAAtB,EAAiChF,UAAU,CAAC8C,mCAA5C;AACAoE,QAAAA,QAAQ,GAAG,KAAKb,gBAAL,CAAsBa,QAAtB,EAAgC,IAAhC,CAAX;AACD;;AAEDliB,MAAAA,IAAI,CAAChB,IAAL,CAAUkjB,QAAV;AACD;;AAED,SAAKhI,KAAL,CAAWD,IAAX;AACA,SAAK2F,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,SAAK8Y,UAAL,CAAgByR,QAAhB,EAA0B,gBAA1B;AACA,QAAI3R,IAAI,GAAG,IAAX;AACA,QAAI6R,eAAe,GAAG,KAAtB;AACApiB,IAAAA,IAAI,CAAC2K,OAAL,CAAasT,WAAW,IAAI;AAC1B,UAAID,cAAc,CAACC,WAAD,CAAlB,EAAiC;AAC/B,YAAI1N,IAAI,KAAK,UAAb,EAAyB;AACvB,eAAKjF,KAAL,CAAW2S,WAAW,CAAC/gB,KAAvB,EAA8B8d,UAAU,CAACE,0BAAzC;AACD;;AAED3K,QAAAA,IAAI,GAAG,IAAP;AACD,OAND,MAMO,IAAI0N,WAAW,CAACle,IAAZ,KAAqB,sBAAzB,EAAiD;AACtD,YAAIqiB,eAAJ,EAAqB;AACnB,eAAK9W,KAAL,CAAW2S,WAAW,CAAC/gB,KAAvB,EAA8B8d,UAAU,CAACM,6BAAzC;AACD;;AAED,YAAI/K,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAKjF,KAAL,CAAW2S,WAAW,CAAC/gB,KAAvB,EAA8B8d,UAAU,CAACE,0BAAzC;AACD;;AAED3K,QAAAA,IAAI,GAAG,UAAP;AACA6R,QAAAA,eAAe,GAAG,IAAlB;AACD;AACF,KAnBD;AAoBAjjB,IAAAA,IAAI,CAACoR,IAAL,GAAYA,IAAI,IAAI,UAApB;AACA,WAAO,KAAKE,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED4iB,EAAAA,iCAAiC,CAAC5iB,IAAD,EAAOmiB,YAAP,EAAqB;AACpD,SAAK1B,MAAL,CAAYjpB,OAAO,CAACgF,OAApB;;AAEA,QAAI,KAAKskB,GAAL,CAAStpB,OAAO,CAAC4D,QAAjB,CAAJ,EAAgC;AAC9B,UAAI,KAAKmD,KAAL,CAAW/G,OAAO,CAACiE,SAAnB,KAAiC,KAAK8C,KAAL,CAAW/G,OAAO,CAAC8E,MAAnB,CAArC,EAAiE;AAC/D0D,QAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAKmD,gBAAL,CAAsB,KAAK/Q,SAAL,EAAtB,CAAnB;AACD,OAFD,MAEO;AACLnR,QAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAK2B,aAAL,EAAnB;AACA,aAAKuB,SAAL;AACD;;AAEDjiB,MAAAA,IAAI,CAACkjB,OAAL,GAAe,IAAf;AACA,aAAO,KAAK5R,UAAL,CAAgBtR,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KAVD,MAUO;AACL,UAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACwE,MAAnB,KAA8B,KAAKmnB,KAAL,EAA9B,IAA8C,CAAC,KAAKX,YAAL,CAAkB,MAAlB,KAA6B,KAAKA,YAAL,CAAkB,WAAlB,CAA9B,KAAiE,CAACL,YAApH,EAAkI;AAChI,cAAMzrB,KAAK,GAAG,KAAKiJ,KAAL,CAAW1J,KAAzB;AACA,cAAMmtB,UAAU,GAAGjE,iBAAiB,CAACzoB,KAAD,CAApC;AACA,cAAM,KAAKyV,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8d,UAAU,CAAC6C,4BAAxC,EAAsEhoB,KAAtE,EAA6E0sB,UAA7E,CAAN;AACD;;AAED,UAAI,KAAK7kB,KAAL,CAAW/G,OAAO,CAACuE,IAAnB,KAA4B,KAAKwC,KAAL,CAAW/G,OAAO,CAACiE,SAAnB,CAA5B,IAA6D,KAAK8C,KAAL,CAAW/G,OAAO,CAAC8E,MAAnB,CAA7D,IAA2F,KAAKkmB,YAAL,CAAkB,QAAlB,CAA/F,EAA4H;AACxHxiB,QAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAKmD,gBAAL,CAAsB,KAAK/Q,SAAL,EAAtB,CAAnB;AACAnR,QAAAA,IAAI,CAACkjB,OAAL,GAAe,KAAf;AACA,eAAO,KAAK5R,UAAL,CAAgBtR,IAAhB,EAAsB,0BAAtB,CAAP;AACD,OAJH,MAIS,IAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACoD,IAAnB,KAA4B,KAAK2D,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAA5B,IAA0D,KAAKmqB,YAAL,CAAkB,WAAlB,CAA1D,IAA4F,KAAKA,YAAL,CAAkB,MAAlB,CAA5F,IAAyH,KAAKA,YAAL,CAAkB,QAAlB,CAA7H,EAA0J;AAC/JxiB,QAAAA,IAAI,GAAG,KAAK0S,WAAL,CAAiB1S,IAAjB,CAAP;;AAEA,YAAIA,IAAI,CAACY,IAAL,KAAc,wBAAlB,EAA4C;AAC1CZ,UAAAA,IAAI,CAACY,IAAL,GAAY,mBAAZ;AACAZ,UAAAA,IAAI,CAACkjB,OAAL,GAAe,KAAf;AACA,iBAAOljB,IAAI,CAACqjB,UAAZ;AACD;;AAEDrjB,QAAAA,IAAI,CAACY,IAAL,GAAY,YAAYZ,IAAI,CAACY,IAA7B;AACA,eAAOZ,IAAP;AACD;AACJ;;AAED,UAAM,KAAK6iB,UAAL,EAAN;AACD;;AAEDP,EAAAA,6BAA6B,CAACtiB,IAAD,EAAO;AAClC,SAAK6W,IAAL;AACA,SAAKgK,gBAAL,CAAsB,SAAtB;AACA7gB,IAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAKuB,uBAAL,EAAtB;AACA,SAAKrB,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDyiB,EAAAA,yBAAyB,CAACziB,IAAD,EAAO;AAC9B,SAAK6W,IAAL;AACA,SAAK0M,kBAAL,CAAwBvjB,IAAxB;AACAA,IAAAA,IAAI,CAACY,IAAL,GAAY,kBAAZ;AACA,WAAOZ,IAAP;AACD;;AAED0iB,EAAAA,0BAA0B,CAAC1iB,IAAD,EAAO;AAC/B,SAAK6W,IAAL;AACA,SAAK2M,mBAAL,CAAyBxjB,IAAzB,EAA+B,IAA/B;AACAA,IAAAA,IAAI,CAACY,IAAL,GAAY,mBAAZ;AACA,WAAOZ,IAAP;AACD;;AAED2iB,EAAAA,yBAAyB,CAAC3iB,IAAD,EAAO;AAC9B,SAAK6W,IAAL;AACA,SAAKsK,qBAAL,CAA2BnhB,IAA3B;AACA,WAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAEDmhB,EAAAA,qBAAqB,CAACnhB,IAAD,EAAOyjB,OAAO,GAAG,KAAjB,EAAwB;AAC3CzjB,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAKgT,6BAAL,CAAmC,CAACD,OAApC,EAA6C,IAA7C,CAAV;AACA,SAAK1I,KAAL,CAAWC,WAAX,CAAuBhb,IAAI,CAAC0Q,EAAL,CAAQvZ,IAA/B,EAAqCssB,OAAO,GAAGlL,aAAH,GAAmBF,YAA/D,EAA6ErY,IAAI,CAAC0Q,EAAL,CAAQ3S,KAArF;;AAEA,QAAI,KAAKyjB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAKqR,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLzhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,IAAtB;AACD;;AAEDpQ,IAAAA,IAAI,CAAC2jB,OAAL,GAAe,EAAf;AACA3jB,IAAAA,IAAI,CAAC4jB,UAAL,GAAkB,EAAlB;AACA5jB,IAAAA,IAAI,CAAC6jB,MAAL,GAAc,EAAd;;AAEA,QAAI,KAAK/C,GAAL,CAAStpB,OAAO,CAAC+E,QAAjB,CAAJ,EAAgC;AAC9B,SAAG;AACDyD,QAAAA,IAAI,CAAC2jB,OAAL,CAAa9jB,IAAb,CAAkB,KAAKikB,yBAAL,EAAlB;AACD,OAFD,QAES,CAACL,OAAD,IAAY,KAAK3C,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAFrB;AAGD;;AAED,QAAI,KAAK4pB,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AAC/B,WAAK3L,IAAL;;AAEA,SAAG;AACD7W,QAAAA,IAAI,CAAC6jB,MAAL,CAAYhkB,IAAZ,CAAiB,KAAKikB,yBAAL,EAAjB;AACD,OAFD,QAES,KAAKhD,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAFT;AAGD;;AAED,QAAI,KAAK4pB,YAAL,CAAkB,YAAlB,CAAJ,EAAqC;AACnC,WAAK3L,IAAL;;AAEA,SAAG;AACD7W,QAAAA,IAAI,CAAC4jB,UAAL,CAAgB/jB,IAAhB,CAAqB,KAAKikB,yBAAL,EAArB;AACD,OAFD,QAES,KAAKhD,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAFT;AAGD;;AAEDoH,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAKkjB,mBAAL,CAAyB;AACnCC,MAAAA,WAAW,EAAEP,OADsB;AAEnCQ,MAAAA,UAAU,EAAE,KAFuB;AAGnCC,MAAAA,WAAW,EAAE,KAHsB;AAInCC,MAAAA,UAAU,EAAEV,OAJuB;AAKnCW,MAAAA,YAAY,EAAE;AALqB,KAAzB,CAAZ;AAOD;;AAEDN,EAAAA,yBAAyB,GAAG;AAC1B,UAAM9jB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2T,gCAAL,EAAV;;AAEA,QAAI,KAAK7C,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAKkU,mCAAL,EAAtB;AACD,KAFD,MAEO;AACLtkB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,IAAtB;AACD;;AAED,WAAO,KAAKkB,UAAL,CAAgBtR,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAEDukB,EAAAA,kBAAkB,CAACvkB,IAAD,EAAO;AACvB,SAAKmhB,qBAAL,CAA2BnhB,IAA3B;AACA,WAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDwkB,EAAAA,kBAAkB,CAACpO,IAAD,EAAO;AACvB,QAAIA,IAAI,KAAK,GAAb,EAAkB;AAChB,WAAKjK,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8d,UAAU,CAACuC,4BAAxC;AACD;AACF;;AAEDqG,EAAAA,iBAAiB,CAACrO,IAAD,EAAOvK,QAAP,EAAiBkT,WAAjB,EAA8B;AAC7C,QAAI,CAACnD,aAAa,CAAC5c,GAAd,CAAkBoX,IAAlB,CAAL,EAA8B;AAC9B,SAAKjK,KAAL,CAAWN,QAAX,EAAqBkT,WAAW,GAAGlD,UAAU,CAACG,kBAAd,GAAmCH,UAAU,CAACsC,sBAA9E,EAAsG/H,IAAtG;AACD;;AAEDsN,EAAAA,6BAA6B,CAACgB,OAAD,EAAU3F,WAAV,EAAuB;AAClD,SAAK0F,iBAAL,CAAuB,KAAK9kB,KAAL,CAAW1J,KAAlC,EAAyC,KAAK0J,KAAL,CAAW5B,KAApD,EAA2DghB,WAA3D;AACA,WAAO,KAAKsC,eAAL,CAAqBqD,OAArB,CAAP;AACD;;AAEDnB,EAAAA,kBAAkB,CAACvjB,IAAD,EAAO;AACvBA,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAKgT,6BAAL,CAAmC,KAAnC,EAA0C,IAA1C,CAAV;AACA,SAAK3I,KAAL,CAAWC,WAAX,CAAuBhb,IAAI,CAAC0Q,EAAL,CAAQvZ,IAA/B,EAAqCkhB,YAArC,EAAmDrY,IAAI,CAAC0Q,EAAL,CAAQ3S,KAA3D;;AAEA,QAAI,KAAKyjB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAKqR,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLzhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,IAAtB;AACD;;AAEDpQ,IAAAA,IAAI,CAAC2kB,KAAL,GAAa,KAAKtE,wBAAL,CAA8B7oB,OAAO,CAACmC,EAAtC,CAAb;AACA,SAAKsoB,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,WAAtB,CAAP;AACD;;AAEDwjB,EAAAA,mBAAmB,CAACxjB,IAAD,EAAO4kB,OAAP,EAAgB;AACjC,SAAK/D,gBAAL,CAAsB,MAAtB;AACA7gB,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAKgT,6BAAL,CAAmC,IAAnC,EAAyC,IAAzC,CAAV;AACA,SAAK3I,KAAL,CAAWC,WAAX,CAAuBhb,IAAI,CAAC0Q,EAAL,CAAQvZ,IAA/B,EAAqCkhB,YAArC,EAAmDrY,IAAI,CAAC0Q,EAAL,CAAQ3S,KAA3D;;AAEA,QAAI,KAAKyjB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAKqR,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLzhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,IAAtB;AACD;;AAEDpQ,IAAAA,IAAI,CAAC6kB,SAAL,GAAiB,IAAjB;;AAEA,QAAI,KAAKtmB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7BkH,MAAAA,IAAI,CAAC6kB,SAAL,GAAiB,KAAKxE,wBAAL,CAA8B7oB,OAAO,CAACsB,KAAtC,CAAjB;AACD;;AAEDkH,IAAAA,IAAI,CAAC8kB,QAAL,GAAgB,IAAhB;;AAEA,QAAI,CAACF,OAAL,EAAc;AACZ5kB,MAAAA,IAAI,CAAC8kB,QAAL,GAAgB,KAAKzE,wBAAL,CAA8B7oB,OAAO,CAACmC,EAAtC,CAAhB;AACD;;AAED,SAAKsoB,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAED+kB,EAAAA,sBAAsB,CAACC,cAAc,GAAG,KAAlB,EAAyB;AAC7C,UAAMC,SAAS,GAAG,KAAKtlB,KAAL,CAAW5B,KAA7B;AACA,UAAMiC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,UAAM+T,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;AACA,UAAMC,KAAK,GAAG,KAAKtC,kCAAL,EAAd;AACA9iB,IAAAA,IAAI,CAAC7I,IAAL,GAAYiuB,KAAK,CAACjuB,IAAlB;AACA6I,IAAAA,IAAI,CAACklB,QAAL,GAAgBA,QAAhB;AACAllB,IAAAA,IAAI,CAACqlB,KAAL,GAAaD,KAAK,CAACrD,cAAnB;;AAEA,QAAI,KAAKxjB,KAAL,CAAW/G,OAAO,CAACmC,EAAnB,CAAJ,EAA4B;AAC1B,WAAKmnB,GAAL,CAAStpB,OAAO,CAACmC,EAAjB;AACAqG,MAAAA,IAAI,CAACkjB,OAAL,GAAe,KAAKxC,aAAL,EAAf;AACD,KAHD,MAGO;AACL,UAAIsE,cAAJ,EAAoB;AAClB,aAAK7Y,KAAL,CAAW8Y,SAAX,EAAsBpJ,UAAU,CAACwB,uBAAjC;AACD;AACF;;AAED,WAAO,KAAK/L,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDyhB,EAAAA,iCAAiC,GAAG;AAClC,UAAMlB,SAAS,GAAG,KAAK5gB,KAAL,CAAW6gB,MAA7B;AACA,UAAMxgB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAACoM,MAAL,GAAc,EAAd;AACA,SAAKzM,KAAL,CAAW6gB,MAAX,GAAoB,IAApB;;AAEA,QAAI,KAAKgB,YAAL,CAAkB,GAAlB,KAA0B,KAAKjjB,KAAL,CAAW/G,OAAO,CAAC8tB,WAAnB,CAA9B,EAA+D;AAC7D,WAAKzO,IAAL;AACD,KAFD,MAEO;AACL,WAAKgM,UAAL;AACD;;AAED,QAAI0C,eAAe,GAAG,KAAtB;;AAEA,OAAG;AACD,YAAMC,aAAa,GAAG,KAAKT,sBAAL,CAA4BQ,eAA5B,CAAtB;AACAvlB,MAAAA,IAAI,CAACoM,MAAL,CAAYvM,IAAZ,CAAiB2lB,aAAjB;;AAEA,UAAIA,aAAa,CAACtC,OAAlB,EAA2B;AACzBqC,QAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,UAAI,CAAC,KAAK/D,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKf,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;AACF,KAXD,QAWS,CAAC,KAAK4oB,YAAL,CAAkB,GAAlB,CAXV;;AAaA,SAAKiE,gBAAL,CAAsB,GAAtB;AACA,SAAK9lB,KAAL,CAAW6gB,MAAX,GAAoBD,SAApB;AACA,WAAO,KAAKjP,UAAL,CAAgBtR,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAEDskB,EAAAA,mCAAmC,GAAG;AACpC,UAAMtkB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,UAAMoP,SAAS,GAAG,KAAK5gB,KAAL,CAAW6gB,MAA7B;AACAxgB,IAAAA,IAAI,CAACoM,MAAL,GAAc,EAAd;AACA,SAAKzM,KAAL,CAAW6gB,MAAX,GAAoB,IAApB;AACA,SAAKiF,gBAAL,CAAsB,GAAtB;AACA,UAAMC,qBAAqB,GAAG,KAAK/lB,KAAL,CAAWgmB,kBAAzC;AACA,SAAKhmB,KAAL,CAAWgmB,kBAAX,GAAgC,KAAhC;;AAEA,WAAO,CAAC,KAAKnE,YAAL,CAAkB,GAAlB,CAAR,EAAgC;AAC9BxhB,MAAAA,IAAI,CAACoM,MAAL,CAAYvM,IAAZ,CAAiB,KAAK6gB,aAAL,EAAjB;;AAEA,UAAI,CAAC,KAAKc,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKf,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,SAAK+G,KAAL,CAAWgmB,kBAAX,GAAgCD,qBAAhC;AACA,SAAKD,gBAAL,CAAsB,GAAtB;AACA,SAAK9lB,KAAL,CAAW6gB,MAAX,GAAoBD,SAApB;AACA,WAAO,KAAKjP,UAAL,CAAgBtR,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAED4lB,EAAAA,4CAA4C,GAAG;AAC7C,UAAM5lB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,UAAMoP,SAAS,GAAG,KAAK5gB,KAAL,CAAW6gB,MAA7B;AACAxgB,IAAAA,IAAI,CAACoM,MAAL,GAAc,EAAd;AACA,SAAKzM,KAAL,CAAW6gB,MAAX,GAAoB,IAApB;AACA,SAAKiF,gBAAL,CAAsB,GAAtB;;AAEA,WAAO,CAAC,KAAKjE,YAAL,CAAkB,GAAlB,CAAR,EAAgC;AAC9BxhB,MAAAA,IAAI,CAACoM,MAAL,CAAYvM,IAAZ,CAAiB,KAAKgmB,oCAAL,EAAjB;;AAEA,UAAI,CAAC,KAAKrE,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKf,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,SAAK6sB,gBAAL,CAAsB,GAAtB;AACA,SAAK9lB,KAAL,CAAW6gB,MAAX,GAAoBD,SAApB;AACA,WAAO,KAAKjP,UAAL,CAAgBtR,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAED8lB,EAAAA,sBAAsB,GAAG;AACvB,UAAM9lB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0P,gBAAL,CAAsB,WAAtB;AACA7gB,IAAAA,IAAI,CAAC2jB,OAAL,GAAe,EAAf;;AAEA,QAAI,KAAK7C,GAAL,CAAStpB,OAAO,CAAC+E,QAAjB,CAAJ,EAAgC;AAC9B,SAAG;AACDyD,QAAAA,IAAI,CAAC2jB,OAAL,CAAa9jB,IAAb,CAAkB,KAAKikB,yBAAL,EAAlB;AACD,OAFD,QAES,KAAKhD,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAFT;AAGD;;AAEDoH,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAKkjB,mBAAL,CAAyB;AACnCC,MAAAA,WAAW,EAAE,KADsB;AAEnCC,MAAAA,UAAU,EAAE,KAFuB;AAGnCC,MAAAA,WAAW,EAAE,KAHsB;AAInCC,MAAAA,UAAU,EAAE,KAJuB;AAKnCC,MAAAA,YAAY,EAAE;AALqB,KAAzB,CAAZ;AAOA,WAAO,KAAK9S,UAAL,CAAgBtR,IAAhB,EAAsB,yBAAtB,CAAP;AACD;;AAED+lB,EAAAA,0BAA0B,GAAG;AAC3B,WAAO,KAAKxnB,KAAL,CAAW/G,OAAO,CAACC,GAAnB,KAA2B,KAAK8G,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAA3B,GAAwD,KAAKwY,aAAL,EAAxD,GAA+E,KAAKgR,eAAL,CAAqB,IAArB,CAAtF;AACD;;AAED2E,EAAAA,0BAA0B,CAAChmB,IAAD,EAAOimB,QAAP,EAAiBf,QAAjB,EAA2B;AACnDllB,IAAAA,IAAI,CAACkmB,MAAL,GAAcD,QAAd;;AAEA,QAAI,KAAKE,SAAL,GAAiBvlB,IAAjB,KAA0BpJ,OAAO,CAACsB,KAAtC,EAA6C;AAC3CkH,MAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAKqV,0BAAL,EAAV;AACA/lB,MAAAA,IAAI,CAACmS,GAAL,GAAW,KAAKkO,wBAAL,EAAX;AACD,KAHD,MAGO;AACLrgB,MAAAA,IAAI,CAAC0Q,EAAL,GAAU,IAAV;AACA1Q,MAAAA,IAAI,CAACmS,GAAL,GAAW,KAAKuO,aAAL,EAAX;AACD;;AAED,SAAKD,MAAL,CAAYjpB,OAAO,CAACW,QAApB;AACA6H,IAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAKoqB,wBAAL,EAAb;AACArgB,IAAAA,IAAI,CAACklB,QAAL,GAAgBA,QAAhB;AACA,WAAO,KAAK5T,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDomB,EAAAA,+BAA+B,CAACpmB,IAAD,EAAOimB,QAAP,EAAiB;AAC9CjmB,IAAAA,IAAI,CAACkmB,MAAL,GAAcD,QAAd;AACAjmB,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAKqV,0BAAL,EAAV;AACA,SAAKtF,MAAL,CAAYjpB,OAAO,CAACW,QAApB;AACA,SAAKsoB,MAAL,CAAYjpB,OAAO,CAACW,QAApB;;AAEA,QAAI,KAAKqpB,YAAL,CAAkB,GAAlB,KAA0B,KAAKjjB,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAA9B,EAA0D;AACxDsH,MAAAA,IAAI,CAACiP,MAAL,GAAc,IAAd;AACAjP,MAAAA,IAAI,CAACqS,QAAL,GAAgB,KAAhB;AACArS,MAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAKowB,4BAAL,CAAkC,KAAK/X,WAAL,CAAiBtO,IAAI,CAACjC,KAAtB,EAA6BiC,IAAI,CAACN,GAAL,CAAS3B,KAAtC,CAAlC,CAAb;AACD,KAJD,MAIO;AACLiC,MAAAA,IAAI,CAACiP,MAAL,GAAc,KAAd;;AAEA,UAAI,KAAK6R,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9B+G,QAAAA,IAAI,CAACqS,QAAL,GAAgB,IAAhB;AACD;;AAEDrS,MAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAKoqB,wBAAL,EAAb;AACD;;AAED,WAAO,KAAK/O,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDqmB,EAAAA,4BAA4B,CAACrmB,IAAD,EAAO;AACjCA,IAAAA,IAAI,CAACoM,MAAL,GAAc,EAAd;AACApM,IAAAA,IAAI,CAAC4hB,IAAL,GAAY,IAAZ;AACA5hB,IAAAA,IAAI,CAACoQ,cAAL,GAAsB,IAAtB;AACApQ,IAAAA,IAAI,CAAC6hB,IAAL,GAAY,IAAZ;;AAEA,QAAI,KAAKL,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAKqR,iCAAL,EAAtB;AACD;;AAED,SAAKhB,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;;AAEA,QAAI,KAAK6F,KAAL,CAAW/G,OAAO,CAAC4E,KAAnB,CAAJ,EAA+B;AAC7B4D,MAAAA,IAAI,CAAC6hB,IAAL,GAAY,KAAKyE,0BAAL,CAAgC,IAAhC,CAAZ;AACAtmB,MAAAA,IAAI,CAAC6hB,IAAL,CAAU1qB,IAAV,GAAiB,IAAjB;;AAEA,UAAI,CAAC,KAAKoH,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,CAAL,EAAiC;AAC/B,aAAK8nB,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,WAAO,CAAC,KAAK2F,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,CAAD,IAA+B,CAAC,KAAK4F,KAAL,CAAW/G,OAAO,CAAC6B,QAAnB,CAAvC,EAAqE;AACnE2G,MAAAA,IAAI,CAACoM,MAAL,CAAYvM,IAAZ,CAAiB,KAAKymB,0BAAL,CAAgC,KAAhC,CAAjB;;AAEA,UAAI,CAAC,KAAK/nB,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,CAAL,EAAiC;AAC/B,aAAK8nB,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,QAAI,KAAKkoB,GAAL,CAAStpB,OAAO,CAAC6B,QAAjB,CAAJ,EAAgC;AAC9B2G,MAAAA,IAAI,CAAC4hB,IAAL,GAAY,KAAK0E,0BAAL,CAAgC,KAAhC,CAAZ;AACD;;AAED,SAAK7F,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACAqH,IAAAA,IAAI,CAAC8hB,UAAL,GAAkB,KAAKzB,wBAAL,EAAlB;AACA,WAAO,KAAK/O,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDumB,EAAAA,+BAA+B,CAACvmB,IAAD,EAAOimB,QAAP,EAAiB;AAC9C,UAAMO,SAAS,GAAG,KAAKrV,SAAL,EAAlB;AACAnR,IAAAA,IAAI,CAACkmB,MAAL,GAAcD,QAAd;AACAjmB,IAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAKowB,4BAAL,CAAkCG,SAAlC,CAAb;AACA,WAAO,KAAKlV,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED+jB,EAAAA,mBAAmB,CAAC;AAClBC,IAAAA,WADkB;AAElBC,IAAAA,UAFkB;AAGlBC,IAAAA,WAHkB;AAIlBC,IAAAA,UAJkB;AAKlBC,IAAAA;AALkB,GAAD,EAMhB;AACD,UAAM7D,SAAS,GAAG,KAAK5gB,KAAL,CAAW6gB,MAA7B;AACA,SAAK7gB,KAAL,CAAW6gB,MAAX,GAAoB,IAApB;AACA,UAAMyE,SAAS,GAAG,KAAK9T,SAAL,EAAlB;AACA8T,IAAAA,SAAS,CAACwB,cAAV,GAA2B,EAA3B;AACAxB,IAAAA,SAAS,CAAC9jB,UAAV,GAAuB,EAAvB;AACA8jB,IAAAA,SAAS,CAACyB,QAAV,GAAqB,EAArB;AACAzB,IAAAA,SAAS,CAAC0B,aAAV,GAA0B,EAA1B;AACA,QAAIC,QAAJ;AACA,QAAIC,KAAJ;AACA,QAAIC,OAAO,GAAG,KAAd;;AAEA,QAAI7C,UAAU,IAAI,KAAK1lB,KAAL,CAAW/G,OAAO,CAACc,SAAnB,CAAlB,EAAiD;AAC/C,WAAKmoB,MAAL,CAAYjpB,OAAO,CAACc,SAApB;AACAsuB,MAAAA,QAAQ,GAAGpvB,OAAO,CAACiB,SAAnB;AACAouB,MAAAA,KAAK,GAAG,IAAR;AACD,KAJD,MAIO;AACL,WAAKpG,MAAL,CAAYjpB,OAAO,CAACa,MAApB;AACAuuB,MAAAA,QAAQ,GAAGpvB,OAAO,CAACgB,MAAnB;AACAquB,MAAAA,KAAK,GAAG,KAAR;AACD;;AAED5B,IAAAA,SAAS,CAAC4B,KAAV,GAAkBA,KAAlB;;AAEA,WAAO,CAAC,KAAKtoB,KAAL,CAAWqoB,QAAX,CAAR,EAA8B;AAC5B,UAAIX,QAAQ,GAAG,KAAf;AACA,UAAIc,UAAU,GAAG,IAAjB;AACA,UAAIC,YAAY,GAAG,IAAnB;AACA,YAAMhnB,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEA,UAAIgT,UAAU,IAAI,KAAK3B,YAAL,CAAkB,OAAlB,CAAlB,EAA8C;AAC5C,cAAM2D,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,YAAIA,SAAS,CAACvlB,IAAV,KAAmBpJ,OAAO,CAACsB,KAA3B,IAAoCqtB,SAAS,CAACvlB,IAAV,KAAmBpJ,OAAO,CAACyB,QAAnE,EAA6E;AAC3E,eAAK4d,IAAL;AACAkQ,UAAAA,UAAU,GAAG,KAAKpnB,KAAL,CAAW5B,KAAxB;AACAimB,UAAAA,WAAW,GAAG,KAAd;AACD;AACF;;AAED,UAAIA,WAAW,IAAI,KAAKxB,YAAL,CAAkB,QAAlB,CAAnB,EAAgD;AAC9C,cAAM2D,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,YAAIA,SAAS,CAACvlB,IAAV,KAAmBpJ,OAAO,CAACsB,KAA3B,IAAoCqtB,SAAS,CAACvlB,IAAV,KAAmBpJ,OAAO,CAACyB,QAAnE,EAA6E;AAC3E,eAAK4d,IAAL;AACAoP,UAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AAED,YAAMf,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;;AAEA,UAAI,KAAKrE,GAAL,CAAStpB,OAAO,CAACQ,QAAjB,CAAJ,EAAgC;AAC9B,YAAI+uB,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAKlE,UAAL,CAAgBkE,UAAhB;AACD;;AAED,YAAI,KAAKjG,GAAL,CAAStpB,OAAO,CAACQ,QAAjB,CAAJ,EAAgC;AAC9B,cAAIktB,QAAJ,EAAc;AACZ,iBAAKrC,UAAL,CAAgBqC,QAAQ,CAACnnB,KAAzB;AACD;;AAEDknB,UAAAA,SAAS,CAAC0B,aAAV,CAAwB9mB,IAAxB,CAA6B,KAAKumB,+BAAL,CAAqCpmB,IAArC,EAA2CimB,QAA3C,CAA7B;AACD,SAND,MAMO;AACLhB,UAAAA,SAAS,CAACyB,QAAV,CAAmB7mB,IAAnB,CAAwB,KAAKmmB,0BAAL,CAAgChmB,IAAhC,EAAsCimB,QAAtC,EAAgDf,QAAhD,CAAxB;AACD;AACF,OAdD,MAcO,IAAI,KAAK3mB,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,KAA8B,KAAK8oB,YAAL,CAAkB,GAAlB,CAAlC,EAA0D;AAC/D,YAAIuF,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAKlE,UAAL,CAAgBkE,UAAhB;AACD;;AAED,YAAI7B,QAAJ,EAAc;AACZ,eAAKrC,UAAL,CAAgBqC,QAAQ,CAACnnB,KAAzB;AACD;;AAEDknB,QAAAA,SAAS,CAACwB,cAAV,CAAyB5mB,IAAzB,CAA8B,KAAK0mB,+BAAL,CAAqCvmB,IAArC,EAA2CimB,QAA3C,CAA9B;AACD,OAVM,MAUA;AACL,YAAI7U,IAAI,GAAG,MAAX;;AAEA,YAAI,KAAKoR,YAAL,CAAkB,KAAlB,KAA4B,KAAKA,YAAL,CAAkB,KAAlB,CAAhC,EAA0D;AACxD,gBAAM2D,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,cAAIA,SAAS,CAACvlB,IAAV,KAAmBpJ,OAAO,CAACL,IAA3B,IAAmCgvB,SAAS,CAACvlB,IAAV,KAAmBpJ,OAAO,CAACK,MAA9D,IAAwEsuB,SAAS,CAACvlB,IAAV,KAAmBpJ,OAAO,CAACC,GAAvG,EAA4G;AAC1G2Z,YAAAA,IAAI,GAAG,KAAKzR,KAAL,CAAW1J,KAAlB;AACA,iBAAK4gB,IAAL;AACD;AACF;;AAED,cAAMoQ,aAAa,GAAG,KAAKC,2BAAL,CAAiClnB,IAAjC,EAAuCimB,QAAvC,EAAiDc,UAAjD,EAA6D7B,QAA7D,EAAuE9T,IAAvE,EAA6E8S,WAA7E,EAA0FE,YAAY,IAAI,IAAhB,GAAuBA,YAAvB,GAAsC,CAACyC,KAAjI,CAAtB;;AAEA,YAAII,aAAa,KAAK,IAAtB,EAA4B;AAC1BH,UAAAA,OAAO,GAAG,IAAV;AACAE,UAAAA,YAAY,GAAG,KAAKrnB,KAAL,CAAWmM,YAA1B;AACD,SAHD,MAGO;AACLmZ,UAAAA,SAAS,CAAC9jB,UAAV,CAAqBtB,IAArB,CAA0BonB,aAA1B;AACD;AACF;;AAED,WAAKE,uBAAL;;AAEA,UAAIH,YAAY,IAAI,CAAC,KAAKzoB,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAjB,IAA+C,CAAC,KAAK+F,KAAL,CAAW/G,OAAO,CAACiB,SAAnB,CAApD,EAAmF;AACjF,aAAK0T,KAAL,CAAW6a,YAAX,EAAyBnL,UAAU,CAACqC,iCAApC;AACD;AACF;;AAED,SAAKuC,MAAL,CAAYmG,QAAZ;;AAEA,QAAI1C,WAAJ,EAAiB;AACfe,MAAAA,SAAS,CAAC6B,OAAV,GAAoBA,OAApB;AACD;;AAED,UAAMrS,GAAG,GAAG,KAAKnD,UAAL,CAAgB2T,SAAhB,EAA2B,sBAA3B,CAAZ;AACA,SAAKtlB,KAAL,CAAW6gB,MAAX,GAAoBD,SAApB;AACA,WAAO9L,GAAP;AACD;;AAEDyS,EAAAA,2BAA2B,CAAClnB,IAAD,EAAOimB,QAAP,EAAiBc,UAAjB,EAA6B7B,QAA7B,EAAuC9T,IAAvC,EAA6C8S,WAA7C,EAA0DE,YAA1D,EAAwE;AACjG,QAAI,KAAKtD,GAAL,CAAStpB,OAAO,CAAC6B,QAAjB,CAAJ,EAAgC;AAC9B,YAAM+tB,cAAc,GAAG,KAAK7oB,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,KAA6B,KAAK2F,KAAL,CAAW/G,OAAO,CAACqB,IAAnB,CAA7B,IAAyD,KAAK0F,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAzD,IAAuF,KAAK+F,KAAL,CAAW/G,OAAO,CAACiB,SAAnB,CAA9G;;AAEA,UAAI2uB,cAAJ,EAAoB;AAClB,YAAI,CAAClD,WAAL,EAAkB;AAChB,eAAK/X,KAAL,CAAW,KAAKxM,KAAL,CAAWmM,YAAtB,EAAoC+P,UAAU,CAACqB,sBAA/C;AACD,SAFD,MAEO,IAAI,CAACkH,YAAL,EAAmB;AACxB,eAAKjY,KAAL,CAAW,KAAKxM,KAAL,CAAWmM,YAAtB,EAAoC+P,UAAU,CAACoB,kBAA/C;AACD;;AAED,YAAIiI,QAAJ,EAAc;AACZ,eAAK/Y,KAAL,CAAW+Y,QAAQ,CAACnnB,KAApB,EAA2B8d,UAAU,CAACsB,eAAtC;AACD;;AAED,eAAO,IAAP;AACD;;AAED,UAAI,CAAC+G,WAAL,EAAkB;AAChB,aAAK/X,KAAL,CAAW,KAAKxM,KAAL,CAAWmM,YAAtB,EAAoC+P,UAAU,CAACyC,oBAA/C;AACD;;AAED,UAAIyI,UAAU,IAAI,IAAlB,EAAwB;AACtB,aAAKlE,UAAL,CAAgBkE,UAAhB;AACD;;AAED,UAAI7B,QAAJ,EAAc;AACZ,aAAK/Y,KAAL,CAAW+Y,QAAQ,CAACnnB,KAApB,EAA2B8d,UAAU,CAAC6B,cAAtC;AACD;;AAED1d,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAK3G,aAAL,EAAhB;AACA,aAAO,KAAKpP,UAAL,CAAgBtR,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KA/BD,MA+BO;AACLA,MAAAA,IAAI,CAACmS,GAAL,GAAW,KAAK4T,0BAAL,EAAX;AACA/lB,MAAAA,IAAI,CAACkmB,MAAL,GAAcD,QAAd;AACAjmB,MAAAA,IAAI,CAACsnB,KAAL,GAAaP,UAAU,IAAI,IAA3B;AACA/mB,MAAAA,IAAI,CAACoR,IAAL,GAAYA,IAAZ;AACA,UAAIiB,QAAQ,GAAG,KAAf;;AAEA,UAAI,KAAKmP,YAAL,CAAkB,GAAlB,KAA0B,KAAKjjB,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAA9B,EAA0D;AACxDsH,QAAAA,IAAI,CAACiP,MAAL,GAAc,IAAd;;AAEA,YAAI8X,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAKlE,UAAL,CAAgBkE,UAAhB;AACD;;AAED,YAAI7B,QAAJ,EAAc;AACZ,eAAKrC,UAAL,CAAgBqC,QAAQ,CAACnnB,KAAzB;AACD;;AAEDiC,QAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAKowB,4BAAL,CAAkC,KAAK/X,WAAL,CAAiBtO,IAAI,CAACjC,KAAtB,EAA6BiC,IAAI,CAACN,GAAL,CAAS3B,KAAtC,CAAlC,CAAb;;AAEA,YAAIqT,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA/B,EAAsC;AACpC,eAAKmW,2BAAL,CAAiCvnB,IAAjC;AACD;;AAED,YAAI,CAACkkB,WAAD,IAAgBlkB,IAAI,CAACmS,GAAL,CAAShb,IAAT,KAAkB,aAAlC,IAAmD6I,IAAI,CAAC/J,KAAL,CAAW4rB,IAAlE,EAAwE;AACtE,eAAK1V,KAAL,CAAWnM,IAAI,CAAC/J,KAAL,CAAW4rB,IAAX,CAAgB9jB,KAA3B,EAAkC8d,UAAU,CAAC+B,4BAA7C;AACD;AACF,OApBD,MAoBO;AACL,YAAIxM,IAAI,KAAK,MAAb,EAAqB,KAAKyR,UAAL;AACrB7iB,QAAAA,IAAI,CAACiP,MAAL,GAAc,KAAd;;AAEA,YAAI,KAAK6R,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9BoZ,UAAAA,QAAQ,GAAG,IAAX;AACD;;AAEDrS,QAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAKoqB,wBAAL,EAAb;AACArgB,QAAAA,IAAI,CAACklB,QAAL,GAAgBA,QAAhB;AACD;;AAEDllB,MAAAA,IAAI,CAACqS,QAAL,GAAgBA,QAAhB;AACA,aAAO,KAAKf,UAAL,CAAgBtR,IAAhB,EAAsB,oBAAtB,CAAP;AACD;AACF;;AAEDunB,EAAAA,2BAA2B,CAACC,QAAD,EAAW;AACpC,UAAMC,UAAU,GAAGD,QAAQ,CAACpW,IAAT,KAAkB,KAAlB,GAA0B,CAA1B,GAA8B,CAAjD;AACA,UAAMrT,KAAK,GAAGypB,QAAQ,CAACzpB,KAAvB;AACA,UAAMuB,MAAM,GAAGkoB,QAAQ,CAACvxB,KAAT,CAAemW,MAAf,CAAsB9M,MAAtB,IAAgCkoB,QAAQ,CAACvxB,KAAT,CAAe2rB,IAAf,GAAsB,CAAtB,GAA0B,CAA1D,CAAf;;AAEA,QAAI4F,QAAQ,CAACvxB,KAAT,CAAe4rB,IAAnB,EAAyB;AACvB,WAAK1V,KAAL,CAAWqb,QAAQ,CAACvxB,KAAT,CAAe4rB,IAAf,CAAoB9jB,KAA/B,EAAsCypB,QAAQ,CAACpW,IAAT,KAAkB,KAAlB,GAA0ByK,UAAU,CAACkB,yBAArC,GAAiElB,UAAU,CAAC4B,yBAAlH;AACD;;AAED,QAAIne,MAAM,KAAKmoB,UAAf,EAA2B;AACzB,UAAID,QAAQ,CAACpW,IAAT,KAAkB,KAAtB,EAA6B;AAC3B,aAAKjF,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACU,cAAhC;AACD,OAFD,MAEO;AACL,aAAK4J,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACW,cAAhC;AACD;AACF;;AAED,QAAIglB,QAAQ,CAACpW,IAAT,KAAkB,KAAlB,IAA2BoW,QAAQ,CAACvxB,KAAT,CAAe2rB,IAA9C,EAAoD;AAClD,WAAKzV,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACY,sBAAhC;AACD;AACF;;AAED0kB,EAAAA,uBAAuB,GAAG;AACxB,QAAI,CAAC,KAAKrG,GAAL,CAAStpB,OAAO,CAACqB,IAAjB,CAAD,IAA2B,CAAC,KAAKioB,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAA5B,IAAuD,CAAC,KAAK2F,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAxD,IAAsF,CAAC,KAAK+F,KAAL,CAAW/G,OAAO,CAACiB,SAAnB,CAA3F,EAA0H;AACxH,WAAKoqB,UAAL;AACD;AACF;;AAEDwB,EAAAA,gCAAgC,CAACzT,QAAD,EAAW/E,QAAX,EAAqB6E,EAArB,EAAyB;AACvDE,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKjR,KAAL,CAAW5B,KAAlC;AACA8N,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKlM,KAAL,CAAWkM,QAAlC;AACA,QAAI7L,IAAI,GAAG0Q,EAAE,IAAI,KAAKgT,6BAAL,CAAmC,IAAnC,CAAjB;;AAEA,WAAO,KAAK5C,GAAL,CAAStpB,OAAO,CAACwB,GAAjB,CAAP,EAA8B;AAC5B,YAAM0uB,KAAK,GAAG,KAAKpZ,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAd;AACA6b,MAAAA,KAAK,CAACC,aAAN,GAAsB3nB,IAAtB;AACA0nB,MAAAA,KAAK,CAAChX,EAAN,GAAW,KAAKgT,6BAAL,CAAmC,IAAnC,CAAX;AACA1jB,MAAAA,IAAI,GAAG,KAAKsR,UAAL,CAAgBoW,KAAhB,EAAuB,yBAAvB,CAAP;AACD;;AAED,WAAO1nB,IAAP;AACD;;AAED4nB,EAAAA,oBAAoB,CAAChX,QAAD,EAAW/E,QAAX,EAAqB6E,EAArB,EAAyB;AAC3C,UAAM1Q,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,IAAAA,IAAI,CAACoQ,cAAL,GAAsB,IAAtB;AACApQ,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2T,gCAAL,CAAsCzT,QAAtC,EAAgD/E,QAAhD,EAA0D6E,EAA1D,CAAV;;AAEA,QAAI,KAAK8Q,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAKkU,mCAAL,EAAtB;AACD;;AAED,WAAO,KAAKhT,UAAL,CAAgBtR,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAED6nB,EAAAA,mBAAmB,GAAG;AACpB,UAAM7nB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAKsP,MAAL,CAAYjpB,OAAO,CAACuF,OAApB;AACAiD,IAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKS,oBAAL,EAAhB;AACA,WAAO,KAAKxW,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED+nB,EAAAA,kBAAkB,GAAG;AACnB,UAAM/nB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAAC4T,KAAL,GAAa,EAAb;AACA,SAAK6M,MAAL,CAAYjpB,OAAO,CAACQ,QAApB;;AAEA,WAAO,KAAK2H,KAAL,CAAWiM,GAAX,GAAiB,KAAKtM,MAAtB,IAAgC,CAAC,KAAKf,KAAL,CAAW/G,OAAO,CAACW,QAAnB,CAAxC,EAAsE;AACpE6H,MAAAA,IAAI,CAAC4T,KAAL,CAAW/T,IAAX,CAAgB,KAAK6gB,aAAL,EAAhB;AACA,UAAI,KAAKniB,KAAL,CAAW/G,OAAO,CAACW,QAAnB,CAAJ,EAAkC;AAClC,WAAKsoB,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;;AAED,SAAK6nB,MAAL,CAAYjpB,OAAO,CAACW,QAApB;AACA,WAAO,KAAKmZ,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDsmB,EAAAA,0BAA0B,CAAC0B,KAAD,EAAQ;AAChC,QAAI7wB,IAAI,GAAG,IAAX;AACA,QAAIkb,QAAQ,GAAG,KAAf;AACA,QAAI0P,cAAc,GAAG,IAArB;AACA,UAAM/hB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,UAAM8W,EAAE,GAAG,KAAK9B,SAAL,EAAX;AACA,UAAM+B,MAAM,GAAG,KAAKvoB,KAAL,CAAWiB,IAAX,KAAoBpJ,OAAO,CAAC4E,KAA3C;;AAEA,QAAI6rB,EAAE,CAACrnB,IAAH,KAAYpJ,OAAO,CAACsB,KAApB,IAA6BmvB,EAAE,CAACrnB,IAAH,KAAYpJ,OAAO,CAACyB,QAArD,EAA+D;AAC7D,UAAIivB,MAAM,IAAI,CAACF,KAAf,EAAsB;AACpB,aAAK7b,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8d,UAAU,CAACiC,oBAAlC;AACD;;AAED3mB,MAAAA,IAAI,GAAG,KAAKkqB,eAAL,CAAqB6G,MAArB,CAAP;;AAEA,UAAI,KAAKpH,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9BoZ,QAAAA,QAAQ,GAAG,IAAX;;AAEA,YAAI6V,MAAJ,EAAY;AACV,eAAK/b,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8d,UAAU,CAACgC,yBAAlC;AACD;AACF;;AAEDkE,MAAAA,cAAc,GAAG,KAAK1B,wBAAL,EAAjB;AACD,KAhBD,MAgBO;AACL0B,MAAAA,cAAc,GAAG,KAAKrB,aAAL,EAAjB;AACD;;AAED1gB,IAAAA,IAAI,CAAC7I,IAAL,GAAYA,IAAZ;AACA6I,IAAAA,IAAI,CAACqS,QAAL,GAAgBA,QAAhB;AACArS,IAAAA,IAAI,CAAC+hB,cAAL,GAAsBA,cAAtB;AACA,WAAO,KAAKzQ,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDmoB,EAAAA,kCAAkC,CAACvnB,IAAD,EAAO;AACvC,UAAMZ,IAAI,GAAG,KAAKsO,WAAL,CAAiB1N,IAAI,CAAC7C,KAAtB,EAA6B6C,IAAI,CAAClB,GAAL,CAAS3B,KAAtC,CAAb;AACAiC,IAAAA,IAAI,CAAC7I,IAAL,GAAY,IAAZ;AACA6I,IAAAA,IAAI,CAACqS,QAAL,GAAgB,KAAhB;AACArS,IAAAA,IAAI,CAAC+hB,cAAL,GAAsBnhB,IAAtB;AACA,WAAO,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED2hB,EAAAA,2BAA2B,CAACvV,MAAM,GAAG,EAAV,EAAc;AACvC,QAAIwV,IAAI,GAAG,IAAX;AACA,QAAIxlB,KAAK,GAAG,IAAZ;;AAEA,QAAI,KAAKmC,KAAL,CAAW/G,OAAO,CAAC4E,KAAnB,CAAJ,EAA+B;AAC7BA,MAAAA,KAAK,GAAG,KAAKkqB,0BAAL,CAAgC,IAAhC,CAAR;AACAlqB,MAAAA,KAAK,CAACjF,IAAN,GAAa,IAAb;;AAEA,UAAI,CAAC,KAAKoH,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,CAAL,EAAiC;AAC/B,aAAK8nB,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,WAAO,CAAC,KAAK2F,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,CAAD,IAA+B,CAAC,KAAK4F,KAAL,CAAW/G,OAAO,CAAC6B,QAAnB,CAAvC,EAAqE;AACnE+S,MAAAA,MAAM,CAACvM,IAAP,CAAY,KAAKymB,0BAAL,CAAgC,KAAhC,CAAZ;;AAEA,UAAI,CAAC,KAAK/nB,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,CAAL,EAAiC;AAC/B,aAAK8nB,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,QAAI,KAAKkoB,GAAL,CAAStpB,OAAO,CAAC6B,QAAjB,CAAJ,EAAgC;AAC9BuoB,MAAAA,IAAI,GAAG,KAAK0E,0BAAL,CAAgC,KAAhC,CAAP;AACD;;AAED,WAAO;AACLla,MAAAA,MADK;AAELwV,MAAAA,IAFK;AAGLxlB,MAAAA;AAHK,KAAP;AAKD;;AAEDgsB,EAAAA,yBAAyB,CAACxX,QAAD,EAAW/E,QAAX,EAAqB7L,IAArB,EAA2B0Q,EAA3B,EAA+B;AACtD,YAAQA,EAAE,CAACvZ,IAAX;AACE,WAAK,KAAL;AACE,eAAO,KAAKma,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;;AAEF,WAAK,MAAL;AACA,WAAK,SAAL;AACE,eAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,uBAAtB,CAAP;;AAEF,WAAK,OAAL;AACE,eAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAP;;AAEF,WAAK,OAAL;AACE,eAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF;AACE,aAAKwkB,kBAAL,CAAwB9T,EAAE,CAACvZ,IAA3B;AACA,eAAO,KAAKywB,oBAAL,CAA0BhX,QAA1B,EAAoC/E,QAApC,EAA8C6E,EAA9C,CAAP;AAzBJ;AA2BD;;AAEDoX,EAAAA,oBAAoB,GAAG;AACrB,UAAMlX,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,UAAM7L,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,QAAIuQ,GAAJ;AACA,QAAI9gB,IAAJ;AACA,QAAIynB,aAAa,GAAG,KAApB;AACA,UAAM3C,qBAAqB,GAAG,KAAK/lB,KAAL,CAAWgmB,kBAAzC;;AAEA,YAAQ,KAAKhmB,KAAL,CAAWiB,IAAnB;AACE,WAAKpJ,OAAO,CAACL,IAAb;AACE,YAAI,KAAKqrB,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AAClC,iBAAO,KAAKsD,sBAAL,EAAP;AACD;;AAED,eAAO,KAAKsC,yBAAL,CAA+BxX,QAA/B,EAAyC/E,QAAzC,EAAmD7L,IAAnD,EAAyD,KAAKqhB,eAAL,EAAzD,CAAP;;AAEF,WAAK7pB,OAAO,CAACa,MAAb;AACE,eAAO,KAAK0rB,mBAAL,CAAyB;AAC9BC,UAAAA,WAAW,EAAE,KADiB;AAE9BC,UAAAA,UAAU,EAAE,KAFkB;AAG9BC,UAAAA,WAAW,EAAE,IAHiB;AAI9BC,UAAAA,UAAU,EAAE,KAJkB;AAK9BC,UAAAA,YAAY,EAAE;AALgB,SAAzB,CAAP;;AAQF,WAAK5sB,OAAO,CAACc,SAAb;AACE,eAAO,KAAKyrB,mBAAL,CAAyB;AAC9BC,UAAAA,WAAW,EAAE,KADiB;AAE9BC,UAAAA,UAAU,EAAE,IAFkB;AAG9BC,UAAAA,WAAW,EAAE,IAHiB;AAI9BC,UAAAA,UAAU,EAAE,KAJkB;AAK9BC,UAAAA,YAAY,EAAE;AALgB,SAAzB,CAAP;;AAQF,WAAK5sB,OAAO,CAACQ,QAAb;AACE,aAAK2H,KAAL,CAAWgmB,kBAAX,GAAgC,KAAhC;AACA/kB,QAAAA,IAAI,GAAG,KAAKmnB,kBAAL,EAAP;AACA,aAAKpoB,KAAL,CAAWgmB,kBAAX,GAAgCD,qBAAhC;AACA,eAAO9kB,IAAP;;AAEF,WAAKpJ,OAAO,CAACgD,UAAb;AACE,YAAI,KAAKmF,KAAL,CAAW1J,KAAX,KAAqB,GAAzB,EAA8B;AAC5B+J,UAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAKqR,iCAAL,EAAtB;AACA,eAAKhB,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;AACAgpB,UAAAA,GAAG,GAAG,KAAKC,2BAAL,EAAN;AACA3hB,UAAAA,IAAI,CAACoM,MAAL,GAAcsV,GAAG,CAACtV,MAAlB;AACApM,UAAAA,IAAI,CAAC4hB,IAAL,GAAYF,GAAG,CAACE,IAAhB;AACA5hB,UAAAA,IAAI,CAAC6hB,IAAL,GAAYH,GAAG,CAACtlB,KAAhB;AACA,eAAKqkB,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACA,eAAK8nB,MAAL,CAAYjpB,OAAO,CAAC2B,KAApB;AACA6G,UAAAA,IAAI,CAAC8hB,UAAL,GAAkB,KAAKpB,aAAL,EAAlB;AACA,iBAAO,KAAKpP,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED;;AAEF,WAAKxI,OAAO,CAACkB,MAAb;AACE,aAAKme,IAAL;;AAEA,YAAI,CAAC,KAAKtY,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,CAAD,IAA+B,CAAC,KAAK4F,KAAL,CAAW/G,OAAO,CAAC6B,QAAnB,CAApC,EAAkE;AAChE,cAAI,KAAKkF,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4B,KAAKoH,KAAL,CAAW/G,OAAO,CAAC4E,KAAnB,CAAhC,EAA2D;AACzD,kBAAM/E,KAAK,GAAG,KAAK8uB,SAAL,GAAiBvlB,IAA/B;AACAynB,YAAAA,aAAa,GAAGhxB,KAAK,KAAKG,OAAO,CAACyB,QAAlB,IAA8B5B,KAAK,KAAKG,OAAO,CAACsB,KAAhE;AACD,WAHD,MAGO;AACLuvB,YAAAA,aAAa,GAAG,IAAhB;AACD;AACF;;AAED,YAAIA,aAAJ,EAAmB;AACjB,eAAK1oB,KAAL,CAAWgmB,kBAAX,GAAgC,KAAhC;AACA/kB,UAAAA,IAAI,GAAG,KAAK8f,aAAL,EAAP;AACA,eAAK/gB,KAAL,CAAWgmB,kBAAX,GAAgCD,qBAAhC;;AAEA,cAAI,KAAK/lB,KAAL,CAAWgmB,kBAAX,IAAiC,EAAE,KAAKpnB,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,KAA6B,KAAK2F,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,KAA8B,KAAKwtB,SAAL,GAAiBvlB,IAAjB,KAA0BpJ,OAAO,CAAC2B,KAA/F,CAArC,EAA4I;AAC1I,iBAAKsnB,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACA,mBAAOiI,IAAP;AACD,WAHD,MAGO;AACL,iBAAKkgB,GAAL,CAAStpB,OAAO,CAACoB,KAAjB;AACD;AACF;;AAED,YAAIgI,IAAJ,EAAU;AACR8gB,UAAAA,GAAG,GAAG,KAAKC,2BAAL,CAAiC,CAAC,KAAKwG,kCAAL,CAAwCvnB,IAAxC,CAAD,CAAjC,CAAN;AACD,SAFD,MAEO;AACL8gB,UAAAA,GAAG,GAAG,KAAKC,2BAAL,EAAN;AACD;;AAED3hB,QAAAA,IAAI,CAACoM,MAAL,GAAcsV,GAAG,CAACtV,MAAlB;AACApM,QAAAA,IAAI,CAAC4hB,IAAL,GAAYF,GAAG,CAACE,IAAhB;AACA5hB,QAAAA,IAAI,CAAC6hB,IAAL,GAAYH,GAAG,CAACtlB,KAAhB;AACA,aAAKqkB,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACA,aAAK8nB,MAAL,CAAYjpB,OAAO,CAAC2B,KAApB;AACA6G,QAAAA,IAAI,CAAC8hB,UAAL,GAAkB,KAAKpB,aAAL,EAAlB;AACA1gB,QAAAA,IAAI,CAACoQ,cAAL,GAAsB,IAAtB;AACA,eAAO,KAAKkB,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAACK,MAAb;AACE,eAAO,KAAKoW,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,6BAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACmF,KAAb;AACA,WAAKnF,OAAO,CAACoF,MAAb;AACEoD,QAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAKsI,KAAL,CAAW/G,OAAO,CAACmF,KAAnB,CAAb;AACA,aAAKka,IAAL;AACA,eAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,8BAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAACkD,OAAb;AACE,YAAI,KAAKiF,KAAL,CAAW1J,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,eAAK4gB,IAAL;;AAEA,cAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACC,GAAnB,CAAJ,EAA6B;AAC3B,mBAAO,KAAKwW,YAAL,CAAkB,CAAC,KAAKtO,KAAL,CAAW1J,KAA9B,EAAqC,6BAArC,EAAoE+J,IAAI,CAACjC,KAAzE,EAAgFiC,IAAI,CAACN,GAAL,CAAS3B,KAAzF,CAAP;AACD;;AAED,cAAI,KAAKQ,KAAL,CAAW/G,OAAO,CAACE,MAAnB,CAAJ,EAAgC;AAC9B,mBAAO,KAAKuW,YAAL,CAAkB,CAAC,KAAKtO,KAAL,CAAW1J,KAA9B,EAAqC,6BAArC,EAAoE+J,IAAI,CAACjC,KAAzE,EAAgFiC,IAAI,CAACN,GAAL,CAAS3B,KAAzF,CAAP;AACD;;AAED,gBAAM,KAAKoO,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8d,UAAU,CAAC0C,4BAAxC,CAAN;AACD;;AAED,cAAM,KAAKsE,UAAL,EAAN;;AAEF,WAAKrrB,OAAO,CAACC,GAAb;AACE,eAAO,KAAKwW,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,6BAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACE,MAAb;AACE,eAAO,KAAKuW,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,6BAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACwF,KAAb;AACE,aAAK6Z,IAAL;AACA,eAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,oBAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAACkF,KAAb;AACE,aAAKma,IAAL;AACA,eAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,2BAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAAC4E,KAAb;AACE,aAAKya,IAAL;AACA,eAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,oBAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAACoD,IAAb;AACE,aAAKic,IAAL;AACA,eAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF;AACE,YAAI,KAAKL,KAAL,CAAWiB,IAAX,CAAgBhK,OAAhB,KAA4B,QAAhC,EAA0C;AACxC,iBAAO,KAAKixB,mBAAL,EAAP;AACD,SAFD,MAEO,IAAI,KAAKloB,KAAL,CAAWiB,IAAX,CAAgBhK,OAApB,EAA6B;AAClC,gBAAMF,KAAK,GAAG,KAAKiJ,KAAL,CAAWiB,IAAX,CAAgBlK,KAA9B;AACA,eAAKmgB,IAAL;AACA,iBAAO,MAAMyR,gBAAN,CAAuBtoB,IAAvB,EAA6BtJ,KAA7B,CAAP;AACD;;AA/IL;;AAmJA,UAAM,KAAKmsB,UAAL,EAAN;AACD;;AAED0F,EAAAA,oBAAoB,GAAG;AACrB,UAAM3X,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,QAAIjL,IAAI,GAAG,KAAKknB,oBAAL,EAAX;AACA,QAAIU,yBAAyB,GAAG,KAAhC;;AAEA,WAAO,CAAC,KAAKjqB,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,KAAgC,KAAKuG,KAAL,CAAW/G,OAAO,CAAC0B,WAAnB,CAAjC,KAAqE,CAAC,KAAKuvB,kBAAL,EAA7E,EAAwG;AACtG,YAAMzoB,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA,YAAMwG,QAAQ,GAAG,KAAKyO,GAAL,CAAStpB,OAAO,CAAC0B,WAAjB,CAAjB;AACAsvB,MAAAA,yBAAyB,GAAGA,yBAAyB,IAAInW,QAAzD;AACA,WAAKoO,MAAL,CAAYjpB,OAAO,CAACQ,QAApB;;AAEA,UAAI,CAACqa,QAAD,IAAa,KAAK9T,KAAL,CAAW/G,OAAO,CAACW,QAAnB,CAAjB,EAA+C;AAC7C6H,QAAAA,IAAI,CAAC0oB,WAAL,GAAmB9nB,IAAnB;AACA,aAAKiW,IAAL;AACAjW,QAAAA,IAAI,GAAG,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAP;AACD,OAJD,MAIO;AACLA,QAAAA,IAAI,CAAC2oB,UAAL,GAAkB/nB,IAAlB;AACAZ,QAAAA,IAAI,CAAC4oB,SAAL,GAAiB,KAAKlI,aAAL,EAAjB;AACA,aAAKD,MAAL,CAAYjpB,OAAO,CAACW,QAApB;;AAEA,YAAIqwB,yBAAJ,EAA+B;AAC7BxoB,UAAAA,IAAI,CAACqS,QAAL,GAAgBA,QAAhB;AACAzR,UAAAA,IAAI,GAAG,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsB,2BAAtB,CAAP;AACD,SAHD,MAGO;AACLY,UAAAA,IAAI,GAAG,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;AACF;AACF;;AAED,WAAOY,IAAP;AACD;;AAEDioB,EAAAA,mBAAmB,GAAG;AACpB,UAAM7oB,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEA,QAAI,KAAK2P,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9B+G,MAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAK8G,mBAAL,EAAtB;AACA,aAAO,KAAKvX,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAKuoB,oBAAL,EAAP;AACD;AACF;;AAEDO,EAAAA,kCAAkC,GAAG;AACnC,UAAMC,KAAK,GAAG,KAAKF,mBAAL,EAAd;;AAEA,QAAI,CAAC,KAAKlpB,KAAL,CAAWgmB,kBAAZ,IAAkC,KAAK7E,GAAL,CAAStpB,OAAO,CAAC2B,KAAjB,CAAtC,EAA+D;AAC7D,YAAM6G,IAAI,GAAG,KAAKsO,WAAL,CAAiBya,KAAK,CAAChrB,KAAvB,EAA8BgrB,KAAK,CAACrpB,GAAN,CAAU3B,KAAxC,CAAb;AACAiC,MAAAA,IAAI,CAACoM,MAAL,GAAc,CAAC,KAAK+b,kCAAL,CAAwCY,KAAxC,CAAD,CAAd;AACA/oB,MAAAA,IAAI,CAAC4hB,IAAL,GAAY,IAAZ;AACA5hB,MAAAA,IAAI,CAAC6hB,IAAL,GAAY,IAAZ;AACA7hB,MAAAA,IAAI,CAAC8hB,UAAL,GAAkB,KAAKpB,aAAL,EAAlB;AACA1gB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,IAAtB;AACA,aAAO,KAAKkB,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED,WAAO+oB,KAAP;AACD;;AAEDC,EAAAA,yBAAyB,GAAG;AAC1B,UAAMhpB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK2P,GAAL,CAAStpB,OAAO,CAAC8C,UAAjB;AACA,UAAMsG,IAAI,GAAG,KAAKkoB,kCAAL,EAAb;AACA9oB,IAAAA,IAAI,CAAC4T,KAAL,GAAa,CAAChT,IAAD,CAAb;;AAEA,WAAO,KAAKkgB,GAAL,CAAStpB,OAAO,CAAC8C,UAAjB,CAAP,EAAqC;AACnC0F,MAAAA,IAAI,CAAC4T,KAAL,CAAW/T,IAAX,CAAgB,KAAKipB,kCAAL,EAAhB;AACD;;AAED,WAAO9oB,IAAI,CAAC4T,KAAL,CAAWtU,MAAX,KAAsB,CAAtB,GAA0BsB,IAA1B,GAAiC,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsB,4BAAtB,CAAxC;AACD;;AAEDipB,EAAAA,kBAAkB,GAAG;AACnB,UAAMjpB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK2P,GAAL,CAAStpB,OAAO,CAAC4C,SAAjB;AACA,UAAMwG,IAAI,GAAG,KAAKooB,yBAAL,EAAb;AACAhpB,IAAAA,IAAI,CAAC4T,KAAL,GAAa,CAAChT,IAAD,CAAb;;AAEA,WAAO,KAAKkgB,GAAL,CAAStpB,OAAO,CAAC4C,SAAjB,CAAP,EAAoC;AAClC4F,MAAAA,IAAI,CAAC4T,KAAL,CAAW/T,IAAX,CAAgB,KAAKmpB,yBAAL,EAAhB;AACD;;AAED,WAAOhpB,IAAI,CAAC4T,KAAL,CAAWtU,MAAX,KAAsB,CAAtB,GAA0BsB,IAA1B,GAAiC,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAxC;AACD;;AAED0gB,EAAAA,aAAa,GAAG;AACd,UAAMH,SAAS,GAAG,KAAK5gB,KAAL,CAAW6gB,MAA7B;AACA,SAAK7gB,KAAL,CAAW6gB,MAAX,GAAoB,IAApB;AACA,UAAM5f,IAAI,GAAG,KAAKqoB,kBAAL,EAAb;AACA,SAAKtpB,KAAL,CAAW6gB,MAAX,GAAoBD,SAApB;AACA,SAAK5gB,KAAL,CAAW6U,WAAX,GAAyB,KAAK7U,KAAL,CAAW6U,WAAX,IAA0B,KAAK7U,KAAL,CAAWgmB,kBAA9D;AACA,WAAO/kB,IAAP;AACD;;AAEDilB,EAAAA,oCAAoC,GAAG;AACrC,QAAI,KAAKlmB,KAAL,CAAWiB,IAAX,KAAoBpJ,OAAO,CAACL,IAA5B,IAAoC,KAAKwI,KAAL,CAAW1J,KAAX,KAAqB,GAA7D,EAAkE;AAChE,YAAM2a,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,YAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,YAAM7L,IAAI,GAAG,KAAKqhB,eAAL,EAAb;AACA,aAAO,KAAKuG,oBAAL,CAA0BhX,QAA1B,EAAoC/E,QAApC,EAA8C7L,IAA9C,CAAP;AACD,KALD,MAKO;AACL,aAAO,KAAK0gB,aAAL,EAAP;AACD;AACF;;AAED4C,EAAAA,uBAAuB,GAAG;AACxB,UAAMtjB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAK1B,wBAAL,EAAtB;AACA,WAAO,KAAK/O,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED8iB,EAAAA,kCAAkC,CAACoG,sBAAD,EAAyB;AACzD,UAAM9D,KAAK,GAAG8D,sBAAsB,GAAG,KAAK7H,eAAL,EAAH,GAA4B,KAAKqC,6BAAL,EAAhE;;AAEA,QAAI,KAAKnlB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7BssB,MAAAA,KAAK,CAACrD,cAAN,GAAuB,KAAKuB,uBAAL,EAAvB;AACA,WAAKtB,gBAAL,CAAsBoD,KAAtB;AACD;;AAED,WAAOA,KAAP;AACD;;AAED+D,EAAAA,mBAAmB,CAACnpB,IAAD,EAAO;AACxBA,IAAAA,IAAI,CAACuO,UAAL,CAAgBwT,cAAhB,GAAiC/hB,IAAI,CAAC+hB,cAAtC;AACA,SAAKC,gBAAL,CAAsBhiB,IAAI,CAACuO,UAA3B,EAAuCvO,IAAI,CAAC+hB,cAAL,CAAoB/jB,GAA3D,EAAgEgC,IAAI,CAAC+hB,cAAL,CAAoBriB,GAApB,CAAwB1B,GAAxF;AACA,WAAOgC,IAAI,CAACuO,UAAZ;AACD;;AAED4W,EAAAA,iBAAiB,GAAG;AAClB,QAAID,QAAQ,GAAG,IAAf;;AAEA,QAAI,KAAK3mB,KAAL,CAAW/G,OAAO,CAACkD,OAAnB,CAAJ,EAAiC;AAC/BwqB,MAAAA,QAAQ,GAAG,KAAK/T,SAAL,EAAX;;AAEA,UAAI,KAAKxR,KAAL,CAAW1J,KAAX,KAAqB,GAAzB,EAA8B;AAC5BivB,QAAAA,QAAQ,CAAC9T,IAAT,GAAgB,MAAhB;AACD,OAFD,MAEO;AACL8T,QAAAA,QAAQ,CAAC9T,IAAT,GAAgB,OAAhB;AACD;;AAED,WAAKyF,IAAL;AACA,WAAKvF,UAAL,CAAgB4T,QAAhB,EAA0B,UAA1B;AACD;;AAED,WAAOA,QAAP;AACD;;AAEDrU,EAAAA,iBAAiB,CAAC7Q,IAAD,EAAOopB,mBAAP,EAA4BrY,QAAQ,GAAG,KAAvC,EAA8C;AAC7D,QAAIqY,mBAAJ,EAAyB;AACvB,aAAO,KAAKC,gCAAL,CAAsCrpB,IAAtC,EAA4C,MAAM,MAAM6Q,iBAAN,CAAwB7Q,IAAxB,EAA8B,IAA9B,EAAoC+Q,QAApC,CAAlD,CAAP;AACD;;AAED,WAAO,MAAMF,iBAAN,CAAwB7Q,IAAxB,EAA8B,KAA9B,EAAqC+Q,QAArC,CAAP;AACD;;AAEDuY,EAAAA,0BAA0B,CAACtpB,IAAD,EAAOY,IAAP,EAAamQ,QAAQ,GAAG,KAAxB,EAA+B;AACvD,QAAI,KAAKxS,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAMwoB,QAAQ,GAAG,KAAKnQ,SAAL,EAAjB;AACA,OAACmQ,QAAQ,CAACS,cAAV,EAA0B/hB,IAAI,CAACihB,SAA/B,IAA4C,KAAKD,oCAAL,EAA5C;AACAhhB,MAAAA,IAAI,CAAC8hB,UAAL,GAAkBR,QAAQ,CAACS,cAAT,GAA0B,KAAKzQ,UAAL,CAAgBgQ,QAAhB,EAA0B,gBAA1B,CAA1B,GAAwE,IAA1F;AACD;;AAED,UAAMgI,0BAAN,CAAiCtpB,IAAjC,EAAuCY,IAAvC,EAA6CmQ,QAA7C;AACD;;AAEDwY,EAAAA,cAAc,CAAChV,OAAD,EAAUiV,QAAV,EAAoB;AAChC,QAAI,KAAK7pB,KAAL,CAAWkW,MAAX,IAAqB,KAAKtX,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAArB,IAAiD,KAAKwI,KAAL,CAAW1J,KAAX,KAAqB,WAA1E,EAAuF;AACrF,YAAMkwB,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,UAAIA,SAAS,CAACvlB,IAAV,KAAmBpJ,OAAO,CAACL,IAA3B,IAAmCsf,SAAS,CAAC0P,SAAS,CAAClwB,KAAX,CAAhD,EAAmE;AACjE,cAAM+J,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,aAAK0F,IAAL;AACA,eAAO,KAAK0N,kBAAL,CAAwBvkB,IAAxB,CAAP;AACD;AACF,KARD,MAQO,IAAI,KAAKggB,gBAAL,MAA2B,KAAKwC,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AAC/D,YAAMxiB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,WAAK0F,IAAL;AACA,aAAO,KAAK4S,wBAAL,CAA8BzpB,IAA9B,CAAP;AACD;;AAED,UAAMqO,IAAI,GAAG,MAAMkb,cAAN,CAAqBhV,OAArB,EAA8BiV,QAA9B,CAAb;;AAEA,QAAI,KAAK3J,UAAL,KAAoBnf,SAApB,IAAiC,CAAC,KAAKwO,gBAAL,CAAsBb,IAAtB,CAAtC,EAAmE;AACjE,WAAKwR,UAAL,GAAkB,IAAlB;AACD;;AAED,WAAOxR,IAAP;AACD;;AAEDqb,EAAAA,wBAAwB,CAAC1pB,IAAD,EAAO2pB,IAAP,EAAa;AACnC,QAAIA,IAAI,CAAC/oB,IAAL,KAAc,YAAlB,EAAgC;AAC9B,UAAI+oB,IAAI,CAACxyB,IAAL,KAAc,SAAlB,EAA6B;AAC3B,YAAI,KAAKoH,KAAL,CAAW/G,OAAO,CAAC8E,MAAnB,KAA8B,KAAKiC,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAA9B,IAA0D,KAAKoH,KAAL,CAAW/G,OAAO,CAACiE,SAAnB,CAA1D,IAA2F,KAAK8C,KAAL,CAAW/G,OAAO,CAACuE,IAAnB,CAA3F,IAAuH,KAAKwC,KAAL,CAAW/G,OAAO,CAACgF,OAAnB,CAA3H,EAAwJ;AACtJ,iBAAO,KAAK0lB,gBAAL,CAAsBliB,IAAtB,CAAP;AACD;AACF,OAJD,MAIO,IAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AACnC,YAAIwyB,IAAI,CAACxyB,IAAL,KAAc,WAAlB,EAA+B;AAC7B,iBAAO,KAAKotB,kBAAL,CAAwBvkB,IAAxB,CAAP;AACD,SAFD,MAEO,IAAI2pB,IAAI,CAACxyB,IAAL,KAAc,MAAlB,EAA0B;AAC/B,iBAAO,KAAKosB,kBAAL,CAAwBvjB,IAAxB,CAAP;AACD,SAFM,MAEA,IAAI2pB,IAAI,CAACxyB,IAAL,KAAc,QAAlB,EAA4B;AACjC,iBAAO,KAAKqsB,mBAAL,CAAyBxjB,IAAzB,EAA+B,KAA/B,CAAP;AACD;AACF;AACF;;AAED,WAAO,MAAM0pB,wBAAN,CAA+B1pB,IAA/B,EAAqC2pB,IAArC,CAAP;AACD;;AAEDC,EAAAA,4BAA4B,GAAG;AAC7B,WAAO,KAAKpH,YAAL,CAAkB,MAAlB,KAA6B,KAAKA,YAAL,CAAkB,WAAlB,CAA7B,IAA+D,KAAKA,YAAL,CAAkB,QAAlB,CAA/D,IAA8F,KAAKxC,gBAAL,MAA2B,KAAKwC,YAAL,CAAkB,MAAlB,CAAzH,IAAsJ,MAAMoH,4BAAN,EAA7J;AACD;;AAEDC,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAKtrB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,MAA6B,KAAKwI,KAAL,CAAW1J,KAAX,KAAqB,MAArB,IAA+B,KAAK0J,KAAL,CAAW1J,KAAX,KAAqB,WAApD,IAAmE,KAAK0J,KAAL,CAAW1J,KAAX,KAAqB,QAAxF,IAAoG,KAAK+pB,gBAAL,MAA2B,KAAKrgB,KAAL,CAAW1J,KAAX,KAAqB,MAAjL,CAAJ,EAA8L;AAC5L,aAAO,KAAP;AACD;;AAED,WAAO,MAAM4zB,wBAAN,EAAP;AACD;;AAEDC,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAK9J,gBAAL,MAA2B,KAAKwC,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AACxD,YAAMxiB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,WAAK0F,IAAL;AACA,aAAO,KAAK4S,wBAAL,CAA8BzpB,IAA9B,CAAP;AACD;;AAED,WAAO,MAAM8pB,4BAAN,EAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACJ,IAAD,EAAO/Y,QAAP,EAAiB/E,QAAjB,EAA2Bme,gBAA3B,EAA6C;AAC3D,QAAI,CAAC,KAAKzrB,KAAL,CAAW/G,OAAO,CAACyB,QAAnB,CAAL,EAAmC,OAAO0wB,IAAP;;AAEnC,QAAIK,gBAAJ,EAAsB;AACpB,YAAMC,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM,MAAMH,gBAAN,CAAuBJ,IAAvB,EAA6B/Y,QAA7B,EAAuC/E,QAAvC,CAApB,CAAf;;AAEA,UAAI,CAACoe,MAAM,CAACjqB,IAAZ,EAAkB;AAChBgqB,QAAAA,gBAAgB,CAACjsB,KAAjB,GAAyBksB,MAAM,CAACrd,KAAP,CAAahB,GAAb,IAAoB,KAAKjM,KAAL,CAAW5B,KAAxD;AACA,eAAO4rB,IAAP;AACD;;AAED,UAAIM,MAAM,CAACrd,KAAX,EAAkB,KAAKjN,KAAL,GAAasqB,MAAM,CAACE,SAApB;AAClB,aAAOF,MAAM,CAACjqB,IAAd;AACD;;AAED,SAAKygB,MAAL,CAAYjpB,OAAO,CAACyB,QAApB;AACA,UAAM0G,KAAK,GAAG,KAAKA,KAAL,CAAWyqB,KAAX,EAAd;AACA,UAAMC,iBAAiB,GAAG,KAAK1qB,KAAL,CAAW2qB,SAArC;AACA,UAAMtqB,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA,QAAI;AACF0e,MAAAA,UADE;AAEFC,MAAAA;AAFE,QAGA,KAAKC,6BAAL,EAHJ;AAIA,QAAI,CAACC,KAAD,EAAQC,OAAR,IAAmB,KAAKC,uBAAL,CAA6BL,UAA7B,CAAvB;;AAEA,QAAIC,MAAM,IAAIG,OAAO,CAACrrB,MAAR,GAAiB,CAA/B,EAAkC;AAChC,YAAMgrB,SAAS,GAAG,CAAC,GAAGD,iBAAJ,CAAlB;;AAEA,UAAIM,OAAO,CAACrrB,MAAR,GAAiB,CAArB,EAAwB;AACtB,aAAKK,KAAL,GAAaA,KAAb;AACA,aAAKA,KAAL,CAAW2qB,SAAX,GAAuBA,SAAvB;;AAEA,aAAK,IAAIlqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuqB,OAAO,CAACrrB,MAA5B,EAAoCc,CAAC,EAArC,EAAyC;AACvCkqB,UAAAA,SAAS,CAACzqB,IAAV,CAAe8qB,OAAO,CAACvqB,CAAD,CAAP,CAAWrC,KAA1B;AACD;;AAED,SAAC;AACCwsB,UAAAA,UADD;AAECC,UAAAA;AAFD,YAGG,KAAKC,6BAAL,EAHJ;AAIA,SAACC,KAAD,EAAQC,OAAR,IAAmB,KAAKC,uBAAL,CAA6BL,UAA7B,CAAnB;AACD;;AAED,UAAIC,MAAM,IAAIE,KAAK,CAACprB,MAAN,GAAe,CAA7B,EAAgC;AAC9B,aAAK6M,KAAL,CAAWxM,KAAK,CAAC5B,KAAjB,EAAwB8d,UAAU,CAACC,yBAAnC;AACD;;AAED,UAAI0O,MAAM,IAAIE,KAAK,CAACprB,MAAN,KAAiB,CAA/B,EAAkC;AAChC,aAAKK,KAAL,GAAaA,KAAb;AACA,aAAKA,KAAL,CAAW2qB,SAAX,GAAuBA,SAAS,CAACza,MAAV,CAAiB6a,KAAK,CAAC,CAAD,CAAL,CAAS3sB,KAA1B,CAAvB;AACA,SAAC;AACCwsB,UAAAA,UADD;AAECC,UAAAA;AAFD,YAGG,KAAKC,6BAAL,EAHJ;AAID;AACF;;AAED,SAAKG,uBAAL,CAA6BL,UAA7B,EAAyC,IAAzC;AACA,SAAK5qB,KAAL,CAAW2qB,SAAX,GAAuBD,iBAAvB;AACA,SAAK5J,MAAL,CAAYjpB,OAAO,CAACsB,KAApB;AACAkH,IAAAA,IAAI,CAACyV,IAAL,GAAYkU,IAAZ;AACA3pB,IAAAA,IAAI,CAACuqB,UAAL,GAAkBA,UAAlB;AACAvqB,IAAAA,IAAI,CAAC6qB,SAAL,GAAiB,KAAKxB,gCAAL,CAAsCrpB,IAAtC,EAA4C,MAAM,KAAK8qB,gBAAL,CAAsBpqB,SAAtB,EAAiCA,SAAjC,EAA4CA,SAA5C,CAAlD,CAAjB;AACA,WAAO,KAAK4Q,UAAL,CAAgBtR,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAEDyqB,EAAAA,6BAA6B,GAAG;AAC9B,SAAK9qB,KAAL,CAAWorB,yBAAX,CAAqClrB,IAArC,CAA0C,KAAKF,KAAL,CAAW5B,KAArD;AACA,UAAMwsB,UAAU,GAAG,KAAKS,uBAAL,EAAnB;AACA,UAAMR,MAAM,GAAG,CAAC,KAAKjsB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAhB;AACA,SAAK6G,KAAL,CAAWorB,yBAAX,CAAqC7pB,GAArC;AACA,WAAO;AACLqpB,MAAAA,UADK;AAELC,MAAAA;AAFK,KAAP;AAID;;AAEDI,EAAAA,uBAAuB,CAAC5qB,IAAD,EAAOirB,eAAP,EAAwB;AAC7C,UAAM5rB,KAAK,GAAG,CAACW,IAAD,CAAd;AACA,UAAMkrB,MAAM,GAAG,EAAf;;AAEA,WAAO7rB,KAAK,CAACC,MAAN,KAAiB,CAAxB,EAA2B;AACzB,YAAMU,IAAI,GAAGX,KAAK,CAAC6B,GAAN,EAAb;;AAEA,UAAIlB,IAAI,CAACY,IAAL,KAAc,yBAAlB,EAA6C;AAC3C,YAAIZ,IAAI,CAACoQ,cAAL,IAAuB,CAACpQ,IAAI,CAAC8hB,UAAjC,EAA6C;AAC3C,eAAKqJ,qBAAL,CAA2BnrB,IAA3B;AACD,SAFD,MAEO;AACLkrB,UAAAA,MAAM,CAACrrB,IAAP,CAAYG,IAAZ;AACD;;AAEDX,QAAAA,KAAK,CAACQ,IAAN,CAAWG,IAAI,CAACa,IAAhB;AACD,OARD,MAQO,IAAIb,IAAI,CAACY,IAAL,KAAc,uBAAlB,EAA2C;AAChDvB,QAAAA,KAAK,CAACQ,IAAN,CAAWG,IAAI,CAACuqB,UAAhB;AACAlrB,QAAAA,KAAK,CAACQ,IAAN,CAAWG,IAAI,CAAC6qB,SAAhB;AACD;AACF;;AAED,QAAII,eAAJ,EAAqB;AACnBC,MAAAA,MAAM,CAAC1f,OAAP,CAAexL,IAAI,IAAI,KAAKmrB,qBAAL,CAA2BnrB,IAA3B,CAAvB;AACA,aAAO,CAACkrB,MAAD,EAAS,EAAT,CAAP;AACD;;AAED,WAAO3L,SAAS,CAAC2L,MAAD,EAASlrB,IAAI,IAAIA,IAAI,CAACoM,MAAL,CAAYgf,KAAZ,CAAkBrC,KAAK,IAAI,KAAKsC,YAAL,CAAkBtC,KAAlB,EAAyB,IAAzB,CAA3B,CAAjB,CAAhB;AACD;;AAEDoC,EAAAA,qBAAqB,CAACnrB,IAAD,EAAO;AAC1B,QAAIsrB,WAAJ;;AAEA,SAAKC,gBAAL,CAAsBvrB,IAAI,CAACoM,MAA3B,EAAmC,CAACkf,WAAW,GAAGtrB,IAAI,CAACwO,KAApB,KAA8B,IAA9B,GAAqC,KAAK,CAA1C,GAA8C8c,WAAW,CAACE,aAA7F,EAA4G,KAA5G;AACA,SAAKzQ,KAAL,CAAWF,KAAX,CAAiB7D,cAAc,GAAGC,WAAlC;AACA,UAAMwU,WAAN,CAAkBzrB,IAAlB,EAAwB,KAAxB,EAA+B,IAA/B;AACA,SAAK+a,KAAL,CAAWD,IAAX;AACD;;AAEDuO,EAAAA,gCAAgC,CAACrpB,IAAD,EAAO0rB,KAAP,EAAc;AAC5C,QAAIzB,MAAJ;;AAEA,QAAI,KAAKtqB,KAAL,CAAWorB,yBAAX,CAAqCzP,OAArC,CAA6Ctb,IAAI,CAACjC,KAAlD,MAA6D,CAAC,CAAlE,EAAqE;AACnE,WAAK4B,KAAL,CAAWorB,yBAAX,CAAqClrB,IAArC,CAA0C,KAAKF,KAAL,CAAW5B,KAArD;AACAksB,MAAAA,MAAM,GAAGyB,KAAK,EAAd;AACA,WAAK/rB,KAAL,CAAWorB,yBAAX,CAAqC7pB,GAArC;AACD,KAJD,MAIO;AACL+oB,MAAAA,MAAM,GAAGyB,KAAK,EAAd;AACD;;AAED,WAAOzB,MAAP;AACD;;AAED0B,EAAAA,cAAc,CAAC3rB,IAAD,EAAO4Q,QAAP,EAAiB/E,QAAjB,EAA2B;AACvC7L,IAAAA,IAAI,GAAG,MAAM2rB,cAAN,CAAqB3rB,IAArB,EAA2B4Q,QAA3B,EAAqC/E,QAArC,CAAP;;AAEA,QAAI,KAAKiV,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9B+G,MAAAA,IAAI,CAACqS,QAAL,GAAgB,IAAhB;AACA,WAAK2P,gBAAL,CAAsBhiB,IAAtB;AACD;;AAED,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAM8yB,YAAY,GAAG,KAAKtd,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAArB;AACA+f,MAAAA,YAAY,CAACrd,UAAb,GAA0BvO,IAA1B;AACA4rB,MAAAA,YAAY,CAAC7J,cAAb,GAA8B,KAAKuB,uBAAL,EAA9B;AACA,aAAO,KAAKhS,UAAL,CAAgBsa,YAAhB,EAA8B,oBAA9B,CAAP;AACD;;AAED,WAAO5rB,IAAP;AACD;;AAED6rB,EAAAA,uBAAuB,CAAC7rB,IAAD,EAAO;AAC5B,QAAIA,IAAI,CAACY,IAAL,KAAc,mBAAd,KAAsCZ,IAAI,CAACif,UAAL,KAAoB,MAApB,IAA8Bjf,IAAI,CAACif,UAAL,KAAoB,QAAxF,KAAqGjf,IAAI,CAACY,IAAL,KAAc,wBAAd,IAA0CZ,IAAI,CAACqjB,UAAL,KAAoB,MAAnK,IAA6KrjB,IAAI,CAACY,IAAL,KAAc,sBAAd,IAAwCZ,IAAI,CAACqjB,UAAL,KAAoB,MAA7O,EAAqP;AACnP;AACD;;AAED,UAAMwI,uBAAN,CAA8B7rB,IAA9B;AACD;;AAED0S,EAAAA,WAAW,CAAC1S,IAAD,EAAO;AAChB,UAAM8rB,IAAI,GAAG,MAAMpZ,WAAN,CAAkB1S,IAAlB,CAAb;;AAEA,QAAI8rB,IAAI,CAAClrB,IAAL,KAAc,wBAAd,IAA0CkrB,IAAI,CAAClrB,IAAL,KAAc,sBAA5D,EAAoF;AAClFkrB,MAAAA,IAAI,CAACzI,UAAL,GAAkByI,IAAI,CAACzI,UAAL,IAAmB,OAArC;AACD;;AAED,WAAOyI,IAAP;AACD;;AAEDC,EAAAA,sBAAsB,CAAC/rB,IAAD,EAAO;AAC3B,QAAI,KAAKwiB,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AAC7BxiB,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AACA,YAAM2I,eAAe,GAAG,KAAK7a,SAAL,EAAxB;AACA,WAAK0F,IAAL;;AAEA,UAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B2H,QAAAA,IAAI,CAAC4S,UAAL,GAAkB,KAAKqZ,qBAAL,EAAlB;AACA,aAAKC,eAAL,CAAqBlsB,IAArB;AACA,eAAO,IAAP;AACD,OAJD,MAIO;AACL,eAAO,KAAKujB,kBAAL,CAAwByI,eAAxB,CAAP;AACD;AACF,KAZD,MAYO,IAAI,KAAKxJ,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AACtCxiB,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AACA,YAAM2I,eAAe,GAAG,KAAK7a,SAAL,EAAxB;AACA,WAAK0F,IAAL;AACA,aAAO,KAAK2M,mBAAL,CAAyBwI,eAAzB,EAA0C,KAA1C,CAAP;AACD,KALM,MAKA,IAAI,KAAKxJ,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AACzCxiB,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AACA,YAAM2I,eAAe,GAAG,KAAK7a,SAAL,EAAxB;AACA,WAAK0F,IAAL;AACA,aAAO,KAAK0N,kBAAL,CAAwByH,eAAxB,CAAP;AACD,KALM,MAKA,IAAI,KAAKhM,gBAAL,MAA2B,KAAKwC,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AAC/DxiB,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,OAAlB;AACA,YAAM2I,eAAe,GAAG,KAAK7a,SAAL,EAAxB;AACA,WAAK0F,IAAL;AACA,aAAO,KAAK4S,wBAAL,CAA8BuC,eAA9B,CAAP;AACD,KALM,MAKA;AACL,aAAO,MAAMD,sBAAN,CAA6B/rB,IAA7B,CAAP;AACD;AACF;;AAEDmsB,EAAAA,aAAa,CAACnsB,IAAD,EAAO;AAClB,QAAI,MAAMmsB,aAAN,CAAoB,GAAG/qB,SAAvB,CAAJ,EAAuC,OAAO,IAAP;;AAEvC,QAAI,KAAKohB,YAAL,CAAkB,MAAlB,KAA6B,KAAK2D,SAAL,GAAiBvlB,IAAjB,KAA0BpJ,OAAO,CAACoD,IAAnE,EAAyE;AACvEoF,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AACA,WAAKxM,IAAL;AACA,WAAKA,IAAL;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDuV,EAAAA,kCAAkC,CAACpsB,IAAD,EAAO;AACvC,UAAM4L,GAAG,GAAG,KAAKjM,KAAL,CAAW5B,KAAvB;AACA,UAAMsuB,YAAY,GAAG,MAAMD,kCAAN,CAAyCpsB,IAAzC,CAArB;;AAEA,QAAIqsB,YAAY,IAAIrsB,IAAI,CAACqjB,UAAL,KAAoB,MAAxC,EAAgD;AAC9C,WAAKR,UAAL,CAAgBjX,GAAhB;AACD;;AAED,WAAOygB,YAAP;AACD;;AAEDC,EAAAA,YAAY,CAACtsB,IAAD,EAAOusB,WAAP,EAAoBC,UAApB,EAAgC;AAC1C,UAAMF,YAAN,CAAmBtsB,IAAnB,EAAyBusB,WAAzB,EAAsCC,UAAtC;;AAEA,QAAI,KAAKhL,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAKqR,iCAAL,EAAtB;AACD;AACF;;AAEDgL,EAAAA,gBAAgB,CAAC1c,SAAD,EAAY2c,MAAZ,EAAoB/sB,KAApB,EAA2B;AACzC,UAAMiM,GAAG,GAAG,KAAKjM,KAAL,CAAW5B,KAAvB;;AAEA,QAAI,KAAKykB,YAAL,CAAkB,SAAlB,CAAJ,EAAkC;AAChC,UAAI,KAAKmK,4BAAL,CAAkC5c,SAAlC,EAA6C2c,MAA7C,CAAJ,EAA0D;AACxD;AACD;;AAEDA,MAAAA,MAAM,CAAC9H,OAAP,GAAiB,IAAjB;AACD;;AAED,UAAM6H,gBAAN,CAAuB1c,SAAvB,EAAkC2c,MAAlC,EAA0C/sB,KAA1C;;AAEA,QAAI+sB,MAAM,CAAC9H,OAAX,EAAoB;AAClB,UAAI8H,MAAM,CAAC9rB,IAAP,KAAgB,eAAhB,IAAmC8rB,MAAM,CAAC9rB,IAAP,KAAgB,sBAAnD,IAA6E8rB,MAAM,CAAC9rB,IAAP,KAAgB,oBAAjG,EAAuH;AACnH,aAAKuL,KAAL,CAAWP,GAAX,EAAgBiQ,UAAU,CAACI,mBAA3B;AACD,OAFH,MAES,IAAIyQ,MAAM,CAACz2B,KAAX,EAAkB;AACzB,aAAKkW,KAAL,CAAWugB,MAAM,CAACz2B,KAAP,CAAa8H,KAAxB,EAA+B8d,UAAU,CAACK,4BAA1C;AACD;AACF;AACF;;AAED0Q,EAAAA,UAAU,CAACxW,IAAD,EAAO;AACf,WAAOA,IAAI,KAAK,UAAT,IAAuBA,IAAI,KAAK,eAAvC;AACD;;AAEDyW,EAAAA,YAAY,GAAG;AACb,UAAMzW,IAAI,GAAG,MAAM0W,SAAN,EAAb;AACA,UAAMC,QAAQ,GAAG,OAAO3W,IAAxB;;AAEA,QAAI,CAAC,KAAKwW,UAAL,CAAgBxW,IAAhB,CAAD,IAA0B,CAAC,KAAKzW,KAAL,CAAW6gB,MAA1C,EAAkD;AAChD,WAAKrU,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACsD,iBAAzC,EAA4D4nB,QAA5D;AACD;;AAED,SAAK9M,WAAL,CAAiBzoB,OAAO,CAACL,IAAzB,EAA+B41B,QAA/B;AACD;;AAEDC,EAAAA,gBAAgB,CAACzvB,IAAD,EAAO;AACrB,UAAMsZ,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIrO,IAAI,KAAK,GAAT,IAAgBsZ,IAAI,KAAK,GAA7B,EAAkC;AAChC,aAAO,KAAKqW,QAAL,CAAc11B,OAAO,CAACc,SAAtB,EAAiC,CAAjC,CAAP;AACD,KAFD,MAEO,IAAI,KAAKqH,KAAL,CAAW6gB,MAAX,KAAsBjjB,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA9C,CAAJ,EAAuD;AAC5D,aAAO,KAAK2vB,QAAL,CAAc11B,OAAO,CAACgD,UAAtB,EAAkC,CAAlC,CAAP;AACD,KAFM,MAEA,IAAI,KAAKmF,KAAL,CAAW6gB,MAAX,IAAqBjjB,IAAI,KAAK,EAAlC,EAAsC;AAC3C,UAAIsZ,IAAI,KAAK,EAAb,EAAiB;AACf,eAAO,KAAKqW,QAAL,CAAc11B,OAAO,CAAC0B,WAAtB,EAAmC,CAAnC,CAAP;AACD;;AAED,aAAO,KAAKg0B,QAAL,CAAc11B,OAAO,CAACyB,QAAtB,EAAgC,CAAhC,CAAP;AACD,KANM,MAMA,IAAI0d,eAAe,CAACpZ,IAAD,EAAOsZ,IAAP,CAAnB,EAAiC;AACtC,WAAKlX,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACA,aAAO,KAAKihB,YAAL,EAAP;AACD,KAHM,MAGA;AACL,aAAO,MAAMG,gBAAN,CAAuBzvB,IAAvB,CAAP;AACD;AACF;;AAED8tB,EAAAA,YAAY,CAACrrB,IAAD,EAAOmtB,SAAP,EAAkB;AAC5B,YAAQntB,IAAI,CAACY,IAAb;AACE,WAAK,YAAL;AACA,WAAK,eAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACE,eAAO,IAAP;;AAEF,WAAK,kBAAL;AACE;AACE,gBAAMxB,IAAI,GAAGY,IAAI,CAACmB,UAAL,CAAgB7B,MAAhB,GAAyB,CAAtC;AACA,iBAAOU,IAAI,CAACmB,UAAL,CAAgBiqB,KAAhB,CAAsB,CAACzZ,IAAD,EAAOvR,CAAP,KAAa;AACxC,mBAAOuR,IAAI,CAAC/Q,IAAL,KAAc,cAAd,KAAiCR,CAAC,KAAKhB,IAAN,IAAcuS,IAAI,CAAC/Q,IAAL,KAAc,eAA7D,KAAiF,KAAKyqB,YAAL,CAAkB1Z,IAAlB,CAAxF;AACD,WAFM,CAAP;AAGD;;AAEH,WAAK,gBAAL;AACE,eAAO,KAAK0Z,YAAL,CAAkBrrB,IAAI,CAAC/J,KAAvB,CAAP;;AAEF,WAAK,eAAL;AACE,eAAO,KAAKo1B,YAAL,CAAkBrrB,IAAI,CAACqnB,QAAvB,CAAP;;AAEF,WAAK,iBAAL;AACE,eAAOrnB,IAAI,CAACC,QAAL,CAAcmrB,KAAd,CAAoBgC,OAAO,IAAI,KAAK/B,YAAL,CAAkB+B,OAAlB,CAA/B,CAAP;;AAEF,WAAK,sBAAL;AACE,eAAOptB,IAAI,CAACqtB,QAAL,KAAkB,GAAzB;;AAEF,WAAK,yBAAL;AACA,WAAK,oBAAL;AACE,eAAO,KAAKhC,YAAL,CAAkBrrB,IAAI,CAACuO,UAAvB,CAAP;;AAEF,WAAK,kBAAL;AACA,WAAK,0BAAL;AACE,eAAO,CAAC4e,SAAR;;AAEF;AACE,eAAO,KAAP;AApCJ;AAsCD;;AAEDnb,EAAAA,YAAY,CAAChS,IAAD,EAAOiS,KAAK,GAAG,KAAf,EAAsB;AAChC,QAAIjS,IAAI,CAACY,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAO,MAAMoR,YAAN,CAAmB,KAAKmX,mBAAL,CAAyBnpB,IAAzB,CAAnB,EAAmDiS,KAAnD,CAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMD,YAAN,CAAmBhS,IAAnB,EAAyBiS,KAAzB,CAAP;AACD;AACF;;AAEDsZ,EAAAA,gBAAgB,CAAC+B,QAAD,EAAWC,gBAAX,EAA6Btb,KAA7B,EAAoC;AAClD,SAAK,IAAI7R,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGktB,QAAQ,CAAChuB,MAA7B,EAAqCc,CAAC,EAAtC,EAA0C;AACxC,YAAMupB,IAAI,GAAG2D,QAAQ,CAACltB,CAAD,CAArB;;AAEA,UAAI,CAACupB,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAAC/oB,IAA9B,MAAwC,oBAA5C,EAAkE;AAChE0sB,QAAAA,QAAQ,CAACltB,CAAD,CAAR,GAAc,KAAK+oB,mBAAL,CAAyBQ,IAAzB,CAAd;AACD;AACF;;AAED,WAAO,MAAM4B,gBAAN,CAAuB+B,QAAvB,EAAiCC,gBAAjC,EAAmDtb,KAAnD,CAAP;AACD;;AAEDub,EAAAA,gBAAgB,CAACF,QAAD,EAAWG,mBAAX,EAAgC;AAC9C,SAAK,IAAIrtB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGktB,QAAQ,CAAChuB,MAA7B,EAAqCc,CAAC,EAAtC,EAA0C;AACxC,UAAIstB,WAAJ;;AAEA,YAAM/D,IAAI,GAAG2D,QAAQ,CAACltB,CAAD,CAArB;;AAEA,UAAIupB,IAAI,IAAIA,IAAI,CAAC/oB,IAAL,KAAc,oBAAtB,IAA8C,EAAE,CAAC8sB,WAAW,GAAG/D,IAAI,CAACnb,KAApB,KAA8B,IAA9B,IAAsCkf,WAAW,CAACte,aAApD,CAA9C,KAAqHke,QAAQ,CAAChuB,MAAT,GAAkB,CAAlB,IAAuB,CAACmuB,mBAA7I,CAAJ,EAAuK;AACrK,aAAKthB,KAAL,CAAWwd,IAAI,CAAC5H,cAAL,CAAoBhkB,KAA/B,EAAsC8d,UAAU,CAACoC,iBAAjD;AACD;AACF;;AAED,WAAOqP,QAAP;AACD;;AAEDK,EAAAA,cAAc,CAACC,KAAD,EAAQC,YAAR,EAAsBC,OAAtB,EAA+Bxd,mBAA/B,EAAoD;AAChE,UAAMtQ,IAAI,GAAG,MAAM2tB,cAAN,CAAqBC,KAArB,EAA4BC,YAA5B,EAA0CC,OAA1C,EAAmDxd,mBAAnD,CAAb;;AAEA,QAAIud,YAAY,IAAI,CAAC,KAAKluB,KAAL,CAAWouB,sBAAhC,EAAwD;AACtD,WAAKP,gBAAL,CAAsBxtB,IAAI,CAACC,QAA3B;AACD;;AAED,WAAOD,IAAP;AACD;;AAEDguB,EAAAA,SAAS,CAACrE,IAAD,EAAO,GAAGna,IAAV,EAAgB;AACvB,QAAIma,IAAI,CAAC/oB,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAO,MAAMotB,SAAN,CAAgBrE,IAAhB,EAAsB,GAAGna,IAAzB,CAAP;AACD;AACF;;AAED+B,EAAAA,kBAAkB,CAACvR,IAAD,EAAO;AACvB,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7BkH,MAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAKuB,uBAAL,EAAtB;AACD;;AAED,WAAO,MAAM/R,kBAAN,CAAyBvR,IAAzB,CAAP;AACD;;AAEDyR,EAAAA,yBAAyB,CAACzR,IAAD,EAAO;AAC9B,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7BkH,MAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAKuB,uBAAL,EAAtB;AACD;;AAED,WAAO,MAAM7R,yBAAN,CAAgCzR,IAAhC,CAAP;AACD;;AAEDiuB,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKzM,YAAL,CAAkB,GAAlB,KAA0B,MAAMyM,aAAN,EAAjC;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAK3vB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,KAA6B,MAAMo1B,eAAN,EAApC;AACD;;AAEDC,EAAAA,sBAAsB,CAAClf,MAAD,EAAS;AAC7B,WAAO,CAAC,KAAK1Q,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAD,IAA8B,MAAMq1B,sBAAN,CAA6Blf,MAA7B,CAArC;AACD;;AAEDa,EAAAA,eAAe,CAACC,SAAD,EAAYd,MAAZ,EAAoBe,WAApB,EAAiCnB,OAAjC,EAA0CoB,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzF,QAAIjB,MAAM,CAACiW,QAAX,EAAqB;AACnB,WAAKrC,UAAL,CAAgB5T,MAAM,CAACiW,QAAP,CAAgBnnB,KAAhC;AACD;;AAED,WAAOkR,MAAM,CAACiW,QAAd;;AAEA,QAAI,KAAK1D,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvS,MAAAA,MAAM,CAACmB,cAAP,GAAwB,KAAKqR,iCAAL,EAAxB;AACD;;AAED,UAAM3R,eAAN,CAAsBC,SAAtB,EAAiCd,MAAjC,EAAyCe,WAAzC,EAAsDnB,OAAtD,EAA+DoB,aAA/D,EAA8EC,iBAA9E;;AAEA,QAAIjB,MAAM,CAAC7C,MAAP,IAAiB6D,aAArB,EAAoC;AAClC,YAAM7D,MAAM,GAAG6C,MAAM,CAAC7C,MAAtB;;AAEA,UAAIA,MAAM,CAAC9M,MAAP,GAAgB,CAAhB,IAAqB,KAAK8uB,WAAL,CAAiBhiB,MAAM,CAAC,CAAD,CAAvB,CAAzB,EAAsD;AACpD,aAAKD,KAAL,CAAW8C,MAAM,CAAClR,KAAlB,EAAyB8d,UAAU,CAAC+B,4BAApC;AACD;AACF,KAND,MAMO,IAAI3O,MAAM,CAACrO,IAAP,KAAgB,kBAAhB,IAAsCqP,aAAtC,IAAuDhB,MAAM,CAAChZ,KAAP,CAAamW,MAAxE,EAAgF;AACrF,YAAMA,MAAM,GAAG6C,MAAM,CAAChZ,KAAP,CAAamW,MAA5B;;AAEA,UAAIA,MAAM,CAAC9M,MAAP,GAAgB,CAAhB,IAAqB,KAAK8uB,WAAL,CAAiBhiB,MAAM,CAAC,CAAD,CAAvB,CAAzB,EAAsD;AACpD,aAAKD,KAAL,CAAW8C,MAAM,CAAClR,KAAlB,EAAyB8d,UAAU,CAAC+B,4BAApC;AACD;AACF;AACF;;AAEDyQ,EAAAA,sBAAsB,CAACte,SAAD,EAAYd,MAAZ,EAAoBe,WAApB,EAAiCnB,OAAjC,EAA0C;AAC9D,QAAII,MAAM,CAACiW,QAAX,EAAqB;AACnB,WAAKrC,UAAL,CAAgB5T,MAAM,CAACiW,QAAP,CAAgBnnB,KAAhC;AACD;;AAED,WAAOkR,MAAM,CAACiW,QAAd;;AAEA,QAAI,KAAK1D,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvS,MAAAA,MAAM,CAACmB,cAAP,GAAwB,KAAKqR,iCAAL,EAAxB;AACD;;AAED,UAAM4M,sBAAN,CAA6Bte,SAA7B,EAAwCd,MAAxC,EAAgDe,WAAhD,EAA6DnB,OAA7D;AACD;;AAEDyf,EAAAA,eAAe,CAACtuB,IAAD,EAAO;AACpB,UAAMsuB,eAAN,CAAsBtuB,IAAtB;;AAEA,QAAIA,IAAI,CAACoN,UAAL,IAAmB,KAAKoU,YAAL,CAAkB,GAAlB,CAAvB,EAA+C;AAC7CxhB,MAAAA,IAAI,CAACuuB,mBAAL,GAA2B,KAAKjK,mCAAL,EAA3B;AACD;;AAED,QAAI,KAAK9B,YAAL,CAAkB,YAAlB,CAAJ,EAAqC;AACnC,WAAK3L,IAAL;AACA,YAAM2X,WAAW,GAAGxuB,IAAI,CAAC4jB,UAAL,GAAkB,EAAtC;;AAEA,SAAG;AACD,cAAM5jB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,QAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAKgT,6BAAL,CAAmC,IAAnC,CAAV;;AAEA,YAAI,KAAKlC,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BxhB,UAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAKkU,mCAAL,EAAtB;AACD,SAFD,MAEO;AACLtkB,UAAAA,IAAI,CAACoQ,cAAL,GAAsB,IAAtB;AACD;;AAEDoe,QAAAA,WAAW,CAAC3uB,IAAZ,CAAiB,KAAKyR,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAjB;AACD,OAXD,QAWS,KAAK8gB,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAXT;AAYD;AACF;;AAED61B,EAAAA,uBAAuB,CAACxf,MAAD,EAAS;AAC9B,UAAMwf,uBAAN,CAA8Bxf,MAA9B;AACA,UAAM7C,MAAM,GAAG,KAAK4C,4BAAL,CAAkCC,MAAlC,CAAf;;AAEA,QAAI7C,MAAM,CAAC9M,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAMypB,KAAK,GAAG3c,MAAM,CAAC,CAAD,CAApB;;AAEA,UAAI,KAAKgiB,WAAL,CAAiBrF,KAAjB,KAA2B9Z,MAAM,CAACmC,IAAP,KAAgB,KAA/C,EAAsD;AACpD,aAAKjF,KAAL,CAAW4c,KAAK,CAAChrB,KAAjB,EAAwB8d,UAAU,CAACkB,yBAAnC;AACD,OAFD,MAEO,IAAI,KAAKqR,WAAL,CAAiBrF,KAAjB,CAAJ,EAA6B;AAClC,aAAK5c,KAAL,CAAW4c,KAAK,CAAChrB,KAAjB,EAAwB8d,UAAU,CAAC4B,yBAAnC;AACD;AACF;AACF;;AAEDiR,EAAAA,iBAAiB,CAAC1uB,IAAD,EAAO2uB,oBAAP,EAA6B;AAC5C,UAAMzJ,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;AACA,UAAMhT,GAAG,GAAG,MAAMuc,iBAAN,CAAwB1uB,IAAxB,EAA8B2uB,oBAA9B,CAAZ;AACA3uB,IAAAA,IAAI,CAACklB,QAAL,GAAgBA,QAAhB;AACA,WAAO/S,GAAP;AACD;;AAEDyc,EAAAA,iBAAiB,CAACjd,IAAD,EAAOf,QAAP,EAAiB/E,QAAjB,EAA2BmE,WAA3B,EAAwCnB,OAAxC,EAAiD+C,SAAjD,EAA4DC,UAA5D,EAAwEvB,mBAAxE,EAA6F;AAC5G,QAAIqB,IAAI,CAACuT,QAAT,EAAmB;AACjB,WAAKrC,UAAL,CAAgBlR,IAAI,CAACuT,QAAL,CAAcnnB,KAA9B;AACD;;AAED,WAAO4T,IAAI,CAACuT,QAAZ;AACA,QAAI9U,cAAJ;;AAEA,QAAI,KAAKoR,YAAL,CAAkB,GAAlB,KAA0B,CAAC3P,UAA/B,EAA2C;AACzCzB,MAAAA,cAAc,GAAG,KAAKqR,iCAAL,EAAjB;AACA,UAAI,CAAC,KAAKljB,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAAL,EAAiC,KAAKmqB,UAAL;AAClC;;AAED,UAAM+L,iBAAN,CAAwBjd,IAAxB,EAA8Bf,QAA9B,EAAwC/E,QAAxC,EAAkDmE,WAAlD,EAA+DnB,OAA/D,EAAwE+C,SAAxE,EAAmFC,UAAnF,EAA+FvB,mBAA/F;;AAEA,QAAIF,cAAJ,EAAoB;AAClB,OAACuB,IAAI,CAAC1b,KAAL,IAAc0b,IAAf,EAAqBvB,cAArB,GAAsCA,cAAtC;AACD;AACF;;AAEDye,EAAAA,4BAA4B,CAAC9F,KAAD,EAAQ;AAClC,QAAI,KAAKjI,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9B,UAAI8vB,KAAK,CAACnoB,IAAN,KAAe,YAAnB,EAAiC;AAC/B,aAAKuL,KAAL,CAAW4c,KAAK,CAAChrB,KAAjB,EAAwB8d,UAAU,CAAC2B,sBAAnC;AACD;;AAED,UAAI,KAAK4Q,WAAL,CAAiBrF,KAAjB,CAAJ,EAA6B;AAC3B,aAAK5c,KAAL,CAAW4c,KAAK,CAAChrB,KAAjB,EAAwB8d,UAAU,CAACgC,yBAAnC;AACD;;AAEDkL,MAAAA,KAAK,CAAC1W,QAAN,GAAiB,IAAjB;AACD;;AAED,QAAI,KAAK9T,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7BiwB,MAAAA,KAAK,CAAChH,cAAN,GAAuB,KAAKuB,uBAAL,EAAvB;AACD,KAFD,MAEO,IAAI,KAAK8K,WAAL,CAAiBrF,KAAjB,CAAJ,EAA6B;AAClC,WAAK5c,KAAL,CAAW4c,KAAK,CAAChrB,KAAjB,EAAwB8d,UAAU,CAAC8B,2BAAnC;AACD;;AAED,QAAI,KAAKpf,KAAL,CAAW/G,OAAO,CAACmC,EAAnB,KAA0B,KAAKy0B,WAAL,CAAiBrF,KAAjB,CAA9B,EAAuD;AACrD,WAAK5c,KAAL,CAAW4c,KAAK,CAAChrB,KAAjB,EAAwB8d,UAAU,CAACkC,kBAAnC;AACD;;AAED,SAAKiE,gBAAL,CAAsB+G,KAAtB;AACA,WAAOA,KAAP;AACD;;AAED+F,EAAAA,iBAAiB,CAACle,QAAD,EAAW/E,QAAX,EAAqBkjB,IAArB,EAA2B;AAC1C,UAAM/uB,IAAI,GAAG,MAAM8uB,iBAAN,CAAwBle,QAAxB,EAAkC/E,QAAlC,EAA4CkjB,IAA5C,CAAb;;AAEA,QAAI/uB,IAAI,CAACY,IAAL,KAAc,mBAAd,IAAqCZ,IAAI,CAAC+hB,cAA1C,IAA4D/hB,IAAI,CAAC2kB,KAAL,CAAW5mB,KAAX,GAAmBiC,IAAI,CAAC+hB,cAAL,CAAoBhkB,KAAvG,EAA8G;AAC5G,WAAKoO,KAAL,CAAWnM,IAAI,CAAC+hB,cAAL,CAAoBhkB,KAA/B,EAAsC8d,UAAU,CAACmC,qBAAjD;AACD;;AAED,WAAOhe,IAAP;AACD;;AAEDgvB,EAAAA,wBAAwB,CAAChvB,IAAD,EAAO;AAC7B,QAAI,CAACgf,iBAAiB,CAAChf,IAAD,CAAtB,EAA8B;AAC5B,aAAO,MAAMgvB,wBAAN,CAA+BhvB,IAA/B,CAAP;AACD;;AAED,WAAOkf,oBAAoB,CAAC,KAAKvf,KAAN,CAA3B;AACD;;AAEDsvB,EAAAA,yBAAyB,CAACjvB,IAAD,EAAOkvB,SAAP,EAAkBtuB,IAAlB,EAAwBuuB,kBAAxB,EAA4C;AACnED,IAAAA,SAAS,CAACE,KAAV,GAAkBpQ,iBAAiB,CAAChf,IAAD,CAAjB,GAA0B,KAAK0jB,6BAAL,CAAmC,IAAnC,EAAyC,IAAzC,CAA1B,GAA2E,KAAKrC,eAAL,EAA7F;AACA,SAAK2M,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgCD,kBAAhC,EAAoD9W,YAApD;AACArY,IAAAA,IAAI,CAAC4S,UAAL,CAAgB/S,IAAhB,CAAqB,KAAKyR,UAAL,CAAgB4d,SAAhB,EAA2BtuB,IAA3B,CAArB;AACD;;AAEDyuB,EAAAA,gCAAgC,CAACrvB,IAAD,EAAO;AACrCA,IAAAA,IAAI,CAACif,UAAL,GAAkB,OAAlB;AACA,QAAI7N,IAAI,GAAG,IAAX;;AAEA,QAAI,KAAK7S,KAAL,CAAW/G,OAAO,CAACuF,OAAnB,CAAJ,EAAiC;AAC/BqU,MAAAA,IAAI,GAAG,QAAP;AACD,KAFD,MAEO,IAAI,KAAKoR,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AACpCpR,MAAAA,IAAI,GAAG,MAAP;AACD;;AAED,QAAIA,IAAJ,EAAU;AACR,YAAM6W,EAAE,GAAG,KAAK9B,SAAL,EAAX;;AAEA,UAAI/U,IAAI,KAAK,MAAT,IAAmB6W,EAAE,CAACrnB,IAAH,KAAYpJ,OAAO,CAACoD,IAA3C,EAAiD;AAC/C,aAAKioB,UAAL,CAAgBoF,EAAE,CAAClqB,KAAnB;AACD;;AAED,UAAImhB,oBAAoB,CAAC+I,EAAD,CAApB,IAA4BA,EAAE,CAACrnB,IAAH,KAAYpJ,OAAO,CAACa,MAAhD,IAA0D4vB,EAAE,CAACrnB,IAAH,KAAYpJ,OAAO,CAACoD,IAAlF,EAAwF;AACtF,aAAKic,IAAL;AACA7W,QAAAA,IAAI,CAACif,UAAL,GAAkB7N,IAAlB;AACD;AACF;;AAED,WAAO,MAAMie,gCAAN,CAAuCrvB,IAAvC,CAAP;AACD;;AAEDsvB,EAAAA,oBAAoB,CAACtvB,IAAD,EAAO;AACzB,UAAMkvB,SAAS,GAAG,KAAK/d,SAAL,EAAlB;AACA,UAAMoe,aAAa,GAAG,KAAK5vB,KAAL,CAAW5B,KAAjC;AACA,UAAMyxB,UAAU,GAAG,KAAKC,qBAAL,EAAnB;AACA,QAAIC,iBAAiB,GAAG,IAAxB;;AAEA,QAAIF,UAAU,CAAC5uB,IAAX,KAAoB,YAAxB,EAAsC;AACpC,UAAI4uB,UAAU,CAACr4B,IAAX,KAAoB,MAAxB,EAAgC;AAC9Bu4B,QAAAA,iBAAiB,GAAG,MAApB;AACD,OAFD,MAEO,IAAIF,UAAU,CAACr4B,IAAX,KAAoB,QAAxB,EAAkC;AACvCu4B,QAAAA,iBAAiB,GAAG,QAApB;AACD;AACF;;AAED,QAAIvC,SAAS,GAAG,KAAhB;;AAEA,QAAI,KAAK3K,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKmN,qBAAL,CAA2B,IAA3B,CAAhC,EAAkE;AAChE,YAAMC,QAAQ,GAAG,KAAKvO,eAAL,CAAqB,IAArB,CAAjB;;AAEA,UAAIqO,iBAAiB,KAAK,IAAtB,IAA8B,CAAC,KAAKnxB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAA/B,IAA2D,CAAC,KAAKwI,KAAL,CAAWiB,IAAX,CAAgBhK,OAAhF,EAAyF;AACvFs4B,QAAAA,SAAS,CAACW,QAAV,GAAqBD,QAArB;AACAV,QAAAA,SAAS,CAACjQ,UAAV,GAAuByQ,iBAAvB;AACAR,QAAAA,SAAS,CAACE,KAAV,GAAkBQ,QAAQ,CAACE,OAAT,EAAlB;AACD,OAJD,MAIO;AACLZ,QAAAA,SAAS,CAACW,QAAV,GAAqBL,UAArB;AACAN,QAAAA,SAAS,CAACjQ,UAAV,GAAuB,IAAvB;AACAiQ,QAAAA,SAAS,CAACE,KAAV,GAAkB,KAAK/N,eAAL,EAAlB;AACD;AACF,KAZD,MAYO,IAAIqO,iBAAiB,KAAK,IAAtB,KAA+B,KAAKnxB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4B,KAAKwI,KAAL,CAAWiB,IAAX,CAAgBhK,OAA3E,CAAJ,EAAyF;AAC9Fs4B,MAAAA,SAAS,CAACW,QAAV,GAAqB,KAAKxO,eAAL,CAAqB,IAArB,CAArB;AACA6N,MAAAA,SAAS,CAACjQ,UAAV,GAAuByQ,iBAAvB;;AAEA,UAAI,KAAKrN,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B6M,QAAAA,SAAS,CAACE,KAAV,GAAkB,KAAK/N,eAAL,EAAlB;AACD,OAFD,MAEO;AACL8L,QAAAA,SAAS,GAAG,IAAZ;AACA+B,QAAAA,SAAS,CAACE,KAAV,GAAkBF,SAAS,CAACW,QAAV,CAAmBC,OAAnB,EAAlB;AACD;AACF,KAVM,MAUA;AACL,UAAIN,UAAU,CAAC5uB,IAAX,KAAoB,eAAxB,EAAyC;AACvC,cAAM,KAAKuL,KAAL,CAAW+iB,SAAS,CAACnxB,KAArB,EAA4B8D,aAAa,CAAC0C,qBAA1C,EAAiEirB,UAAU,CAACv5B,KAA5E,CAAN;AACD;;AAEDk3B,MAAAA,SAAS,GAAG,IAAZ;AACA+B,MAAAA,SAAS,CAACW,QAAV,GAAqBL,UAArB;AACAN,MAAAA,SAAS,CAACjQ,UAAV,GAAuB,IAAvB;AACAiQ,MAAAA,SAAS,CAACE,KAAV,GAAkBF,SAAS,CAACW,QAAV,CAAmBC,OAAnB,EAAlB;AACD;;AAED,UAAMC,gBAAgB,GAAG/Q,iBAAiB,CAAChf,IAAD,CAA1C;AACA,UAAMgwB,qBAAqB,GAAGhR,iBAAiB,CAACkQ,SAAD,CAA/C;;AAEA,QAAIa,gBAAgB,IAAIC,qBAAxB,EAA+C;AAC7C,WAAK7jB,KAAL,CAAWojB,aAAX,EAA0B1T,UAAU,CAACmB,mCAArC;AACD;;AAED,QAAI+S,gBAAgB,IAAIC,qBAAxB,EAA+C;AAC7C,WAAKvL,iBAAL,CAAuByK,SAAS,CAACE,KAAV,CAAgBj4B,IAAvC,EAA6C+3B,SAAS,CAACE,KAAV,CAAgBrxB,KAA7D,EAAoE,IAApE;AACD;;AAED,QAAIovB,SAAS,IAAI,CAAC4C,gBAAd,IAAkC,CAACC,qBAAvC,EAA8D;AAC5D,WAAKC,iBAAL,CAAuBf,SAAS,CAACE,KAAV,CAAgBj4B,IAAvC,EAA6C+3B,SAAS,CAACnxB,KAAvD,EAA8D,IAA9D,EAAoE,IAApE;AACD;;AAED,SAAKiwB,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgC,kBAAhC,EAAoD/W,YAApD;AACArY,IAAAA,IAAI,CAAC4S,UAAL,CAAgB/S,IAAhB,CAAqB,KAAKyR,UAAL,CAAgB4d,SAAhB,EAA2B,iBAA3B,CAArB;AACD;;AAEDgB,EAAAA,gBAAgB,GAAG;AACjB,YAAQ,KAAKvwB,KAAL,CAAWiB,IAAnB;AACE,WAAKpJ,OAAO,CAAC4E,KAAb;AACE,eAAO,KAAKilB,eAAL,CAAqB,IAArB,CAAP;;AAEF;AACE,eAAO,MAAM6O,gBAAN,EAAP;AALJ;AAOD;;AAEDC,EAAAA,mBAAmB,CAACnwB,IAAD,EAAOowB,cAAP,EAAuB;AACxC,UAAMhf,IAAI,GAAGpR,IAAI,CAACoR,IAAlB;;AAEA,QAAIA,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA3B,IAAoC,KAAKoQ,YAAL,CAAkB,GAAlB,CAAxC,EAAgE;AAC9DxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAKqR,iCAAL,EAAtB;AACD;;AAED,UAAM0O,mBAAN,CAA0BnwB,IAA1B,EAAgCowB,cAAhC;AACD;;AAEDC,EAAAA,UAAU,CAACvE,IAAD,EAAO1a,IAAP,EAAa;AACrB,UAAMif,UAAN,CAAiBvE,IAAjB,EAAuB1a,IAAvB;;AAEA,QAAI,KAAK7S,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7BgzB,MAAAA,IAAI,CAACpb,EAAL,CAAQqR,cAAR,GAAyB,KAAKuB,uBAAL,EAAzB;AACA,WAAKtB,gBAAL,CAAsB8J,IAAI,CAACpb,EAA3B;AACD;AACF;;AAED4f,EAAAA,iCAAiC,CAACtwB,IAAD,EAAOuwB,IAAP,EAAa;AAC5C,QAAI,KAAKhyB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAM4sB,qBAAqB,GAAG,KAAK/lB,KAAL,CAAWgmB,kBAAzC;AACA,WAAKhmB,KAAL,CAAWgmB,kBAAX,GAAgC,IAAhC;AACA3lB,MAAAA,IAAI,CAAC8hB,UAAL,GAAkB,KAAKwB,uBAAL,EAAlB;AACA,WAAK3jB,KAAL,CAAWgmB,kBAAX,GAAgCD,qBAAhC;AACD;;AAED,WAAO,MAAM4K,iCAAN,CAAwCtwB,IAAxC,EAA8CuwB,IAA9C,CAAP;AACD;;AAEDC,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAKjyB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,KAA6B,MAAM03B,qBAAN,EAApC;AACD;;AAED1F,EAAAA,gBAAgB,CAACxa,mBAAD,EAAsBmgB,cAAtB,EAAsCzG,gBAAtC,EAAwD;AACtE,QAAI0G,IAAJ;;AAEA,QAAI/wB,KAAK,GAAG,IAAZ;AACA,QAAIgxB,GAAJ;;AAEA,QAAI,KAAK7xB,SAAL,CAAe,KAAf,MAA0B,KAAKP,KAAL,CAAW/G,OAAO,CAAC8tB,WAAnB,KAAmC,KAAK9D,YAAL,CAAkB,GAAlB,CAA7D,CAAJ,EAA0F;AACxF7hB,MAAAA,KAAK,GAAG,KAAKA,KAAL,CAAWyqB,KAAX,EAAR;AACAuG,MAAAA,GAAG,GAAG,KAAKzG,QAAL,CAAc,MAAM,MAAMY,gBAAN,CAAuBxa,mBAAvB,EAA4CmgB,cAA5C,EAA4DzG,gBAA5D,CAApB,EAAmGrqB,KAAnG,CAAN;AACA,UAAI,CAACgxB,GAAG,CAAC/jB,KAAT,EAAgB,OAAO+jB,GAAG,CAAC3wB,IAAX;AAChB,YAAM;AACJuU,QAAAA;AADI,UAEF,KAAK5U,KAFT;;AAIA,UAAI4U,OAAO,CAACA,OAAO,CAACjV,MAAR,GAAiB,CAAlB,CAAP,KAAgCsU,KAAK,CAACgd,MAA1C,EAAkD;AAChDrc,QAAAA,OAAO,CAACjV,MAAR,IAAkB,CAAlB;AACD,OAFD,MAEO,IAAIiV,OAAO,CAACA,OAAO,CAACjV,MAAR,GAAiB,CAAlB,CAAP,KAAgCsU,KAAK,CAACid,MAA1C,EAAkD;AACvDtc,QAAAA,OAAO,CAACjV,MAAR,IAAkB,CAAlB;AACD;AACF;;AAED,QAAI,CAACoxB,IAAI,GAAGC,GAAR,KAAgB,IAAhB,IAAwBD,IAAI,CAAC9jB,KAA7B,IAAsC,KAAK4U,YAAL,CAAkB,GAAlB,CAA1C,EAAkE;AAChE,UAAIsP,KAAJ,EAAWC,KAAX;;AAEApxB,MAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAL,CAAWyqB,KAAX,EAAjB;AACA,UAAIha,cAAJ;AACA,YAAMjX,KAAK,GAAG,KAAK+wB,QAAL,CAAc8G,KAAK,IAAI;AACnC,YAAIC,qBAAJ;;AAEA7gB,QAAAA,cAAc,GAAG,KAAKqR,iCAAL,EAAjB;AACA,cAAMyP,eAAe,GAAG,KAAK7H,gCAAL,CAAsCjZ,cAAtC,EAAsD,MAAM;AAClF,gBAAM6Z,MAAM,GAAG,MAAMa,gBAAN,CAAuBxa,mBAAvB,EAA4CmgB,cAA5C,EAA4DzG,gBAA5D,CAAf;AACA,eAAKmH,0BAAL,CAAgClH,MAAhC,EAAwC7Z,cAAxC;AACA,iBAAO6Z,MAAP;AACD,SAJuB,CAAxB;;AAMA,YAAIiH,eAAe,CAACtwB,IAAhB,KAAyB,yBAAzB,IAAsD,CAACqwB,qBAAqB,GAAGC,eAAe,CAAC1iB,KAAzC,KAAmD,IAAzG,IAAiHyiB,qBAAqB,CAAC7hB,aAA3I,EAA0J;AACxJ4hB,UAAAA,KAAK;AACN;;AAED,cAAMrH,IAAI,GAAG,KAAKyH,6BAAL,CAAmCF,eAAnC,CAAb;AACAvH,QAAAA,IAAI,CAACvZ,cAAL,GAAsBA,cAAtB;AACA,aAAK+gB,0BAAL,CAAgCxH,IAAhC,EAAsCvZ,cAAtC;AACA,eAAO8gB,eAAP;AACD,OAlBa,EAkBXvxB,KAlBW,CAAd;AAmBA,UAAIuxB,eAAe,GAAG,IAAtB;;AAEA,UAAI/3B,KAAK,CAAC6G,IAAN,IAAc,KAAKoxB,6BAAL,CAAmCj4B,KAAK,CAAC6G,IAAzC,EAA+CY,IAA/C,KAAwD,yBAA1E,EAAqG;AACnG,YAAI,CAACzH,KAAK,CAACyT,KAAP,IAAgB,CAACzT,KAAK,CAACk4B,OAA3B,EAAoC;AAClC,cAAIl4B,KAAK,CAAC6G,IAAN,CAAWsxB,KAAf,EAAsB;AACpB,iBAAKnlB,KAAL,CAAWiE,cAAc,CAACrS,KAA1B,EAAiC8d,UAAU,CAAC4C,+CAA5C;AACD;;AAED,iBAAOtlB,KAAK,CAAC6G,IAAb;AACD;;AAEDkxB,QAAAA,eAAe,GAAG/3B,KAAK,CAAC6G,IAAxB;AACD;;AAED,UAAI,CAAC8wB,KAAK,GAAGH,GAAT,KAAiB,IAAjB,IAAyBG,KAAK,CAAC9wB,IAAnC,EAAyC;AACvC,aAAKL,KAAL,GAAagxB,GAAG,CAACxG,SAAjB;AACA,eAAOwG,GAAG,CAAC3wB,IAAX;AACD;;AAED,UAAIkxB,eAAJ,EAAqB;AACnB,aAAKvxB,KAAL,GAAaxG,KAAK,CAACgxB,SAAnB;AACA,eAAO+G,eAAP;AACD;;AAED,UAAI,CAACH,KAAK,GAAGJ,GAAT,KAAiB,IAAjB,IAAyBI,KAAK,CAACQ,MAAnC,EAA2C,MAAMZ,GAAG,CAAC/jB,KAAV;AAC3C,UAAIzT,KAAK,CAACo4B,MAAV,EAAkB,MAAMp4B,KAAK,CAACyT,KAAZ;AAClB,YAAM,KAAKT,KAAL,CAAWiE,cAAc,CAACrS,KAA1B,EAAiC8d,UAAU,CAAC2C,iCAA5C,CAAN;AACD;;AAED,WAAO,MAAMsM,gBAAN,CAAuBxa,mBAAvB,EAA4CmgB,cAA5C,EAA4DzG,gBAA5D,CAAP;AACD;;AAEDwH,EAAAA,UAAU,CAACxxB,IAAD,EAAO;AACf,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAMmxB,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM;AACjC,cAAMxE,qBAAqB,GAAG,KAAK/lB,KAAL,CAAWgmB,kBAAzC;AACA,aAAKhmB,KAAL,CAAWgmB,kBAAX,GAAgC,IAAhC;AACA,cAAMrE,QAAQ,GAAG,KAAKnQ,SAAL,EAAjB;AACA,SAACmQ,QAAQ,CAACS,cAAV,EAA0B/hB,IAAI,CAACihB,SAA/B,IAA4C,KAAKD,oCAAL,EAA5C;AACA,aAAKrhB,KAAL,CAAWgmB,kBAAX,GAAgCD,qBAAhC;AACA,YAAI,KAAK+C,kBAAL,EAAJ,EAA+B,KAAK5F,UAAL;AAC/B,YAAI,CAAC,KAAKtkB,KAAL,CAAW/G,OAAO,CAAC2B,KAAnB,CAAL,EAAgC,KAAK0pB,UAAL;AAChC,eAAOvB,QAAP;AACD,OATc,CAAf;AAUA,UAAI2I,MAAM,CAACsH,MAAX,EAAmB,OAAO,IAAP;AACnB,UAAItH,MAAM,CAACrd,KAAX,EAAkB,KAAKjN,KAAL,GAAasqB,MAAM,CAACE,SAApB;AAClBnqB,MAAAA,IAAI,CAAC8hB,UAAL,GAAkBmI,MAAM,CAACjqB,IAAP,CAAY+hB,cAAZ,GAA6B,KAAKzQ,UAAL,CAAgB2Y,MAAM,CAACjqB,IAAvB,EAA6B,gBAA7B,CAA7B,GAA8E,IAAhG;AACD;;AAED,WAAO,MAAMwxB,UAAN,CAAiBxxB,IAAjB,CAAP;AACD;;AAEDyxB,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKlzB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,KAA6B,MAAM24B,gBAAN,EAApC;AACD;;AAEDC,EAAAA,0BAA0B,CAAC1xB,IAAD,EAAOoM,MAAP,EAAe;AACvC,QAAI,KAAKzM,KAAL,CAAWorB,yBAAX,CAAqCzP,OAArC,CAA6Ctb,IAAI,CAACjC,KAAlD,MAA6D,CAAC,CAAlE,EAAqE;AACnEiC,MAAAA,IAAI,CAACoM,MAAL,GAAcA,MAAd;AACD,KAFD,MAEO;AACL,YAAMslB,0BAAN,CAAiC1xB,IAAjC,EAAuCoM,MAAvC;AACD;AACF;;AAEDqf,EAAAA,WAAW,CAACzrB,IAAD,EAAO2xB,eAAP,EAAwBC,eAAxB,EAAyC;AAClD,QAAIA,eAAe,IAAI,KAAKjyB,KAAL,CAAWorB,yBAAX,CAAqCzP,OAArC,CAA6Ctb,IAAI,CAACjC,KAAlD,MAA6D,CAAC,CAArF,EAAwF;AACtF;AACD;;AAED,SAAK,IAAIqC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACoM,MAAL,CAAY9M,MAAhC,EAAwCc,CAAC,EAAzC,EAA6C;AAC3C,UAAI,KAAKguB,WAAL,CAAiBpuB,IAAI,CAACoM,MAAL,CAAYhM,CAAZ,CAAjB,KAAoCA,CAAC,GAAG,CAA5C,EAA+C;AAC7C,aAAK+L,KAAL,CAAWnM,IAAI,CAACoM,MAAL,CAAYhM,CAAZ,EAAerC,KAA1B,EAAiC8d,UAAU,CAACiC,oBAA5C;AACD;AACF;;AAED,WAAO,MAAM2N,WAAN,CAAkB,GAAGrqB,SAArB,CAAP;AACD;;AAEDywB,EAAAA,kCAAkC,CAACC,UAAD,EAAa;AAC7C,WAAO,MAAMD,kCAAN,CAAyCC,UAAU,IAAI,KAAKnyB,KAAL,CAAW2qB,SAAX,CAAqBhP,OAArB,CAA6B,KAAK3b,KAAL,CAAW5B,KAAxC,MAAmD,CAAC,CAA3G,CAAP;AACD;;AAEDg0B,EAAAA,eAAe,CAACjf,IAAD,EAAOlC,QAAP,EAAiB/E,QAAjB,EAA2BkH,OAA3B,EAAoC;AACjD,QAAID,IAAI,CAAClS,IAAL,KAAc,YAAd,IAA8BkS,IAAI,CAAC3b,IAAL,KAAc,OAA5C,IAAuD,KAAKwI,KAAL,CAAW2qB,SAAX,CAAqBhP,OAArB,CAA6B1K,QAA7B,MAA2C,CAAC,CAAvG,EAA0G;AACxG,WAAKiG,IAAL;AACA,YAAM7W,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,MAAAA,IAAI,CAACsS,MAAL,GAAcQ,IAAd;AACA9S,MAAAA,IAAI,CAACoB,SAAL,GAAiB,KAAK4wB,4BAAL,CAAkCx6B,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACAma,MAAAA,IAAI,GAAG,KAAKxB,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD,KAND,MAMO,IAAI8S,IAAI,CAAClS,IAAL,KAAc,YAAd,IAA8BkS,IAAI,CAAC3b,IAAL,KAAc,OAA5C,IAAuD,KAAKqqB,YAAL,CAAkB,GAAlB,CAA3D,EAAmF;AACxF,YAAM7hB,KAAK,GAAG,KAAKA,KAAL,CAAWyqB,KAAX,EAAd;AACA,YAAMjxB,KAAK,GAAG,KAAK+wB,QAAL,CAAc8G,KAAK,IAAI,KAAKiB,iCAAL,CAAuCrhB,QAAvC,EAAiD/E,QAAjD,KAA8DmlB,KAAK,EAA1F,EAA8FrxB,KAA9F,CAAd;AACA,UAAI,CAACxG,KAAK,CAACyT,KAAP,IAAgB,CAACzT,KAAK,CAACk4B,OAA3B,EAAoC,OAAOl4B,KAAK,CAAC6G,IAAb;AACpC,YAAMiqB,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM,MAAM6H,eAAN,CAAsBjf,IAAtB,EAA4BlC,QAA5B,EAAsC/E,QAAtC,EAAgDkH,OAAhD,CAApB,EAA8EpT,KAA9E,CAAf;AACA,UAAIsqB,MAAM,CAACjqB,IAAP,IAAe,CAACiqB,MAAM,CAACrd,KAA3B,EAAkC,OAAOqd,MAAM,CAACjqB,IAAd;;AAElC,UAAI7G,KAAK,CAAC6G,IAAV,EAAgB;AACd,aAAKL,KAAL,GAAaxG,KAAK,CAACgxB,SAAnB;AACA,eAAOhxB,KAAK,CAAC6G,IAAb;AACD;;AAED,UAAIiqB,MAAM,CAACjqB,IAAX,EAAiB;AACf,aAAKL,KAAL,GAAasqB,MAAM,CAACE,SAApB;AACA,eAAOF,MAAM,CAACjqB,IAAd;AACD;;AAED,YAAM7G,KAAK,CAACyT,KAAN,IAAeqd,MAAM,CAACrd,KAA5B;AACD;;AAED,WAAO,MAAMmlB,eAAN,CAAsBjf,IAAtB,EAA4BlC,QAA5B,EAAsC/E,QAAtC,EAAgDkH,OAAhD,CAAP;AACD;;AAEDF,EAAAA,cAAc,CAACC,IAAD,EAAOlC,QAAP,EAAiB/E,QAAjB,EAA2BkH,OAA3B,EAAoCmf,cAApC,EAAoD;AAChE,QAAI,KAAK3zB,KAAL,CAAW/G,OAAO,CAAC0B,WAAnB,KAAmC,KAAKi5B,mBAAL,EAAvC,EAAmE;AACjED,MAAAA,cAAc,CAAClf,mBAAf,GAAqC,IAArC;;AAEA,UAAID,OAAJ,EAAa;AACXmf,QAAAA,cAAc,CAAChf,IAAf,GAAsB,IAAtB;AACA,eAAOJ,IAAP;AACD;;AAED,WAAK+D,IAAL;AACA,YAAM7W,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,MAAAA,IAAI,CAACsS,MAAL,GAAcQ,IAAd;AACA9S,MAAAA,IAAI,CAACoyB,aAAL,GAAqB,KAAK9N,mCAAL,EAArB;AACA,WAAK7D,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;AACAsH,MAAAA,IAAI,CAACoB,SAAL,GAAiB,KAAK4wB,4BAAL,CAAkCx6B,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACAqH,MAAAA,IAAI,CAACqS,QAAL,GAAgB,IAAhB;AACA,aAAO,KAAKD,oBAAL,CAA0BpS,IAA1B,EAAgC,IAAhC,CAAP;AACD,KAhBD,MAgBO,IAAI,CAAC+S,OAAD,IAAY,KAAKgN,gBAAL,EAAZ,IAAuC,KAAKyB,YAAL,CAAkB,GAAlB,CAA3C,EAAmE;AACxE,YAAMxhB,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,MAAAA,IAAI,CAACsS,MAAL,GAAcQ,IAAd;AACA,YAAMmX,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM;AACjClqB,QAAAA,IAAI,CAACoyB,aAAL,GAAqB,KAAKxM,4CAAL,EAArB;AACA,aAAKnF,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;AACAsH,QAAAA,IAAI,CAACoB,SAAL,GAAiB,KAAK4wB,4BAAL,CAAkCx6B,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACA,YAAIu5B,cAAc,CAAClf,mBAAnB,EAAwChT,IAAI,CAACqS,QAAL,GAAgB,KAAhB;AACxC,eAAO,KAAKD,oBAAL,CAA0BpS,IAA1B,EAAgCkyB,cAAc,CAAClf,mBAA/C,CAAP;AACD,OANc,CAAf;;AAQA,UAAIiX,MAAM,CAACjqB,IAAX,EAAiB;AACf,YAAIiqB,MAAM,CAACrd,KAAX,EAAkB,KAAKjN,KAAL,GAAasqB,MAAM,CAACE,SAApB;AAClB,eAAOF,MAAM,CAACjqB,IAAd;AACD;AACF;;AAED,WAAO,MAAM6S,cAAN,CAAqBC,IAArB,EAA2BlC,QAA3B,EAAqC/E,QAArC,EAA+CkH,OAA/C,EAAwDmf,cAAxD,CAAP;AACD;;AAEDG,EAAAA,iBAAiB,CAACryB,IAAD,EAAO;AACtB,QAAIsyB,KAAK,GAAG,IAAZ;;AAEA,QAAI,KAAKvS,gBAAL,MAA2B,KAAKyB,YAAL,CAAkB,GAAlB,CAA/B,EAAuD;AACrD8Q,MAAAA,KAAK,GAAG,KAAKpI,QAAL,CAAc,MAAM,KAAKtE,4CAAL,EAApB,EAAyE5lB,IAAjF;AACD;;AAEDA,IAAAA,IAAI,CAACoyB,aAAL,GAAqBE,KAArB;AACA,UAAMD,iBAAN,CAAwBryB,IAAxB;AACD;;AAEDiyB,EAAAA,iCAAiC,CAACrhB,QAAD,EAAW/E,QAAX,EAAqB;AACpD,UAAM7L,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA,SAAKskB,mBAAL,CAAyBnwB,IAAzB;AACA,QAAI,CAAC,KAAKwxB,UAAL,CAAgBxxB,IAAhB,CAAL,EAA4B;AAC5B,WAAO,KAAKuyB,oBAAL,CAA0BvyB,IAA1B,EAAgCU,SAAhC,EAA2C,IAA3C,CAAP;AACD;;AAED8xB,EAAAA,qBAAqB,CAACj1B,IAAD,EAAO;AAC1B,UAAMsZ,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIrO,IAAI,KAAK,EAAT,IAAesZ,IAAI,KAAK,EAAxB,IAA8B,KAAKlX,KAAL,CAAW8yB,cAA7C,EAA6D;AAC3D,WAAK9yB,KAAL,CAAW8yB,cAAX,GAA4B,KAA5B;AACA,WAAK9yB,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACA,WAAK8mB,SAAL;AACA;AACD;;AAED,UAAMF,qBAAN,CAA4Bj1B,IAA5B;AACD;;AAEDo1B,EAAAA,kBAAkB,CAACp1B,IAAD,EAAO;AACvB,UAAMsZ,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIrO,IAAI,KAAK,GAAT,IAAgBsZ,IAAI,KAAK,GAA7B,EAAkC;AAChC,WAAKqW,QAAL,CAAc11B,OAAO,CAACiB,SAAtB,EAAiC,CAAjC;AACA;AACD;;AAED,UAAMk6B,kBAAN,CAAyBp1B,IAAzB;AACD;;AAEDq1B,EAAAA,aAAa,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAC3B,UAAMC,QAAQ,GAAG,MAAMH,aAAN,CAAoBC,IAApB,EAA0BC,OAA1B,CAAjB;;AAEA,QAAI,KAAKnzB,KAAL,CAAW8yB,cAAf,EAA+B;AAC7B,WAAKtmB,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2BiQ,UAAU,CAAC+C,uBAAtC;AACD;;AAED,WAAOmU,QAAP;AACD;;AAEDC,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKl0B,SAAL,CAAe,cAAf,KAAkC,KAAKm0B,eAAL,EAAtC,EAA8D;AAC5D,UAAI,KAAKtzB,KAAL,CAAW8yB,cAAf,EAA+B;AAC7B,aAAK5P,UAAL,CAAgB,IAAhB,EAAsBhH,UAAU,CAAC0B,iBAAjC;AACD;;AAED,WAAK2V,wBAAL;AACA,WAAKvzB,KAAL,CAAWiM,GAAX,IAAkB,KAAKqnB,eAAL,EAAlB;AACA,WAAKtzB,KAAL,CAAW8yB,cAAX,GAA4B,IAA5B;AACA;AACD;;AAED,QAAI,KAAK9yB,KAAL,CAAW8yB,cAAf,EAA+B;AAC7B,YAAMz0B,GAAG,GAAG,KAAKI,KAAL,CAAWkd,OAAX,CAAmB,KAAnB,EAA0B,KAAK3b,KAAL,CAAWiM,GAAX,IAAkB,CAA5C,CAAZ;;AAEA,UAAI5N,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,cAAM,KAAKmO,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAX,GAAiB,CAA5B,EAA+B/J,aAAa,CAAC6I,mBAA7C,CAAN;AACD;;AAED,WAAK/K,KAAL,CAAWiM,GAAX,GAAiB5N,GAAG,GAAG,CAAvB;AACA;AACD;;AAED,UAAMg1B,gBAAN;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,UAAM;AACJrnB,MAAAA;AADI,QAEF,KAAKjM,KAFT;AAGA,QAAIwzB,yBAAyB,GAAG,CAAhC;;AAEA,WAAO,CAAC,EAAD,EAAK,CAAL,EAAQxX,QAAR,CAAiB,KAAKvd,KAAL,CAAW6uB,UAAX,CAAsBrhB,GAAG,GAAGunB,yBAA5B,CAAjB,CAAP,EAAiF;AAC/EA,MAAAA,yBAAyB;AAC1B;;AAED,UAAMC,GAAG,GAAG,KAAKh1B,KAAL,CAAW6uB,UAAX,CAAsBkG,yBAAyB,GAAGvnB,GAAlD,CAAZ;AACA,UAAMynB,GAAG,GAAG,KAAKj1B,KAAL,CAAW6uB,UAAX,CAAsBkG,yBAAyB,GAAGvnB,GAA5B,GAAkC,CAAxD,CAAZ;;AAEA,QAAIwnB,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAA1B,EAA8B;AAC5B,aAAOF,yBAAyB,GAAG,CAAnC;AACD;;AAED,QAAI,KAAK/0B,KAAL,CAAWiD,KAAX,CAAiB8xB,yBAAyB,GAAGvnB,GAA7C,EAAkDunB,yBAAyB,GAAGvnB,GAA5B,GAAkC,EAApF,MAA4F,cAAhG,EAAgH;AAC9G,aAAOunB,yBAAyB,GAAG,EAAnC;AACD;;AAED,QAAIC,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAA1B,EAA8B;AAC5B,aAAOF,yBAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDD,EAAAA,wBAAwB,GAAG;AACzB,UAAMl1B,GAAG,GAAG,KAAKI,KAAL,CAAWkd,OAAX,CAAmB,IAAnB,EAAyB,KAAK3b,KAAL,CAAWiM,GAApC,CAAZ;;AAEA,QAAI5N,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,YAAM,KAAKmO,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAAC6I,mBAAzC,CAAN;AACD;AACF;;AAED4oB,EAAAA,wCAAwC,CAAC1nB,GAAD,EAAM;AAC5C2nB,IAAAA,QAD4C;AAE5CC,IAAAA;AAF4C,GAAN,EAGrC;AACD,SAAKrnB,KAAL,CAAWP,GAAX,EAAgBiQ,UAAU,CAACO,+BAA3B,EAA4DoX,UAA5D,EAAwED,QAAxE;AACD;;AAEDE,EAAAA,8BAA8B,CAAC7nB,GAAD,EAAM;AAClC2nB,IAAAA,QADkC;AAElCC,IAAAA;AAFkC,GAAN,EAG3B;AACD,UAAMpQ,UAAU,GAAGoQ,UAAU,CAAC,CAAD,CAAV,CAAcE,WAAd,KAA8BF,UAAU,CAACnyB,KAAX,CAAiB,CAAjB,CAAjD;AACA,SAAK8K,KAAL,CAAWP,GAAX,EAAgBiQ,UAAU,CAACe,qBAA3B,EAAkD4W,UAAlD,EAA8DpQ,UAA9D,EAA0EmQ,QAA1E;AACD;;AAEDI,EAAAA,gCAAgC,CAAC/nB,GAAD,EAAM;AACpC2nB,IAAAA,QADoC;AAEpCC,IAAAA;AAFoC,GAAN,EAG7B;AACD,SAAKrnB,KAAL,CAAWP,GAAX,EAAgBiQ,UAAU,CAACQ,uBAA3B,EAAoDmX,UAApD,EAAgED,QAAhE;AACD;;AAEDK,EAAAA,qCAAqC,CAAChoB,GAAD,EAAM;AACzC2nB,IAAAA;AADyC,GAAN,EAElC;AACD,SAAKpnB,KAAL,CAAWP,GAAX,EAAgBiQ,UAAU,CAACS,4BAA3B,EAAyDiX,QAAzD;AACD;;AAEDM,EAAAA,gCAAgC,CAACjoB,GAAD,EAAM;AACpC2nB,IAAAA,QADoC;AAEpCO,IAAAA;AAFoC,GAAN,EAG7B;AACD,WAAO,KAAK3nB,KAAL,CAAWP,GAAX,EAAgBkoB,YAAY,KAAK,IAAjB,GAAwBjY,UAAU,CAACW,sCAAnC,GAA4EX,UAAU,CAACU,uBAAvG,EAAgIgX,QAAhI,EAA0IO,YAA1I,CAAP;AACD;;AAEDC,EAAAA,qCAAqC,CAACnoB,GAAD,EAAM;AACzC2nB,IAAAA,QADyC;AAEzCS,IAAAA,YAFyC;AAGzCR,IAAAA;AAHyC,GAAN,EAIlC;AACD,QAAIjnB,OAAO,GAAG,IAAd;;AAEA,YAAQynB,YAAR;AACE,WAAK,SAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACEznB,QAAAA,OAAO,GAAGsP,UAAU,CAACY,uCAArB;AACA;;AAEF,WAAK,QAAL;AACElQ,QAAAA,OAAO,GAAGsP,UAAU,CAACa,sCAArB;AACA;;AAEF;AACEnQ,QAAAA,OAAO,GAAGsP,UAAU,CAACc,uCAArB;AAZJ;;AAeA,WAAO,KAAKxQ,KAAL,CAAWP,GAAX,EAAgBW,OAAhB,EAAyBgnB,QAAzB,EAAmCC,UAAnC,EAA+CQ,YAA/C,CAAP;AACD;;AAEDC,EAAAA,uCAAuC,CAACroB,GAAD,EAAM;AAC3C2nB,IAAAA,QAD2C;AAE3CC,IAAAA;AAF2C,GAAN,EAGpC;AACD,SAAKrnB,KAAL,CAAWP,GAAX,EAAgBiQ,UAAU,CAACgB,8BAA3B,EAA2D0W,QAA3D,EAAqEC,UAArE;AACD;;AAEDU,EAAAA,kDAAkD,CAACtoB,GAAD,EAAM;AACtD2nB,IAAAA;AADsD,GAAN,EAE/C;AACD,SAAKpnB,KAAL,CAAWP,GAAX,EAAgBiQ,UAAU,CAACiB,yCAA3B,EAAsEyW,QAAtE;AACD;;AAEDY,EAAAA,kBAAkB,GAAG;AACnB,UAAMvjB,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;;AAEA,UAAMq2B,SAAS,GAAG,MAAM,KAAK71B,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,KAA6B,KAAK2F,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAArD;;AAEA,YAAQ,KAAKmH,KAAL,CAAWiB,IAAnB;AACE,WAAKpJ,OAAO,CAACC,GAAb;AACE;AACE,gBAAM48B,OAAO,GAAG,KAAKpmB,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,gBAApC,CAAhB;;AAEA,cAAIm+B,SAAS,EAAb,EAAiB;AACf,mBAAO;AACLxzB,cAAAA,IAAI,EAAE,QADD;AAELgL,cAAAA,GAAG,EAAEyoB,OAAO,CAACt2B,KAFR;AAGL9H,cAAAA,KAAK,EAAEo+B;AAHF,aAAP;AAKD;;AAED,iBAAO;AACLzzB,YAAAA,IAAI,EAAE,SADD;AAELgL,YAAAA,GAAG,EAAEgF;AAFA,WAAP;AAID;;AAEH,WAAKpZ,OAAO,CAACK,MAAb;AACE;AACE,gBAAMw8B,OAAO,GAAG,KAAKpmB,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,eAApC,CAAhB;;AAEA,cAAIm+B,SAAS,EAAb,EAAiB;AACf,mBAAO;AACLxzB,cAAAA,IAAI,EAAE,QADD;AAELgL,cAAAA,GAAG,EAAEyoB,OAAO,CAACt2B,KAFR;AAGL9H,cAAAA,KAAK,EAAEo+B;AAHF,aAAP;AAKD;;AAED,iBAAO;AACLzzB,YAAAA,IAAI,EAAE,SADD;AAELgL,YAAAA,GAAG,EAAEgF;AAFA,WAAP;AAID;;AAEH,WAAKpZ,OAAO,CAACmF,KAAb;AACA,WAAKnF,OAAO,CAACoF,MAAb;AACE;AACE,gBAAMy3B,OAAO,GAAG,KAAKC,mBAAL,EAAhB;;AAEA,cAAIF,SAAS,EAAb,EAAiB;AACf,mBAAO;AACLxzB,cAAAA,IAAI,EAAE,SADD;AAELgL,cAAAA,GAAG,EAAEyoB,OAAO,CAACt2B,KAFR;AAGL9H,cAAAA,KAAK,EAAEo+B;AAHF,aAAP;AAKD;;AAED,iBAAO;AACLzzB,YAAAA,IAAI,EAAE,SADD;AAELgL,YAAAA,GAAG,EAAEgF;AAFA,WAAP;AAID;;AAEH;AACE,eAAO;AACLhQ,UAAAA,IAAI,EAAE,SADD;AAELgL,UAAAA,GAAG,EAAEgF;AAFA,SAAP;AAzDJ;AA8DD;;AAED2jB,EAAAA,iBAAiB,GAAG;AAClB,UAAM3oB,GAAG,GAAG,KAAKjM,KAAL,CAAW5B,KAAvB;AACA,UAAM2S,EAAE,GAAG,KAAK2Q,eAAL,CAAqB,IAArB,CAAX;AACA,UAAMmT,IAAI,GAAG,KAAK1T,GAAL,CAAStpB,OAAO,CAACmC,EAAjB,IAAuB,KAAKw6B,kBAAL,EAAvB,GAAmD;AAC9DvzB,MAAAA,IAAI,EAAE,MADwD;AAE9DgL,MAAAA;AAF8D,KAAhE;AAIA,WAAO;AACL8E,MAAAA,EADK;AAEL8jB,MAAAA;AAFK,KAAP;AAID;;AAEDC,EAAAA,iCAAiC,CAAC7oB,GAAD,EAAM2I,OAAN,EAAemgB,YAAf,EAA6B;AAC5D,UAAM;AACJV,MAAAA;AADI,QAEFzf,OAFJ;;AAIA,QAAIyf,YAAY,KAAK,IAArB,EAA2B;AACzB;AACD;;AAED,QAAIA,YAAY,KAAKU,YAArB,EAAmC;AACjC,WAAKX,qCAAL,CAA2CnoB,GAA3C,EAAgD2I,OAAhD;AACD;AACF;;AAEDogB,EAAAA,eAAe,CAAC;AACdpB,IAAAA,QADc;AAEdS,IAAAA;AAFc,GAAD,EAGZ;AACD,UAAMY,SAAS,GAAG,IAAI5e,GAAJ,EAAlB;AACA,UAAM6e,OAAO,GAAG;AACdC,MAAAA,cAAc,EAAE,EADF;AAEdC,MAAAA,aAAa,EAAE,EAFD;AAGdC,MAAAA,aAAa,EAAE,EAHD;AAIdC,MAAAA,gBAAgB,EAAE;AAJJ,KAAhB;AAMA,QAAIC,iBAAiB,GAAG,KAAxB;;AAEA,WAAO,CAAC,KAAK32B,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAR,EAAoC;AAClC,UAAI,KAAKsoB,GAAL,CAAStpB,OAAO,CAAC6B,QAAjB,CAAJ,EAAgC;AAC9B67B,QAAAA,iBAAiB,GAAG,IAApB;AACA;AACD;;AAED,YAAMC,UAAU,GAAG,KAAKhkB,SAAL,EAAnB;AACA,YAAM;AACJT,QAAAA,EADI;AAEJ8jB,QAAAA;AAFI,UAGF,KAAKD,iBAAL,EAHJ;AAIA,YAAMf,UAAU,GAAG9iB,EAAE,CAACvZ,IAAtB;;AAEA,UAAIq8B,UAAU,KAAK,EAAnB,EAAuB;AACrB;AACD;;AAED,UAAI,SAAS/d,IAAT,CAAc+d,UAAd,CAAJ,EAA+B;AAC7B,aAAKC,8BAAL,CAAoC/iB,EAAE,CAAC3S,KAAvC,EAA8C;AAC5Cw1B,UAAAA,QAD4C;AAE5CC,UAAAA;AAF4C,SAA9C;AAID;;AAED,UAAIoB,SAAS,CAAC51B,GAAV,CAAcw0B,UAAd,CAAJ,EAA+B;AAC7B,aAAKG,gCAAL,CAAsCjjB,EAAE,CAAC3S,KAAzC,EAAgD;AAC9Cw1B,UAAAA,QAD8C;AAE9CC,UAAAA;AAF8C,SAAhD;AAID;;AAEDoB,MAAAA,SAAS,CAACQ,GAAV,CAAc5B,UAAd;AACA,YAAMjf,OAAO,GAAG;AACdgf,QAAAA,QADc;AAEdS,QAAAA,YAFc;AAGdR,QAAAA;AAHc,OAAhB;AAKA2B,MAAAA,UAAU,CAACzkB,EAAX,GAAgBA,EAAhB;;AAEA,cAAQ8jB,IAAI,CAAC5zB,IAAb;AACE,aAAK,SAAL;AACE;AACE,iBAAK6zB,iCAAL,CAAuCD,IAAI,CAAC5oB,GAA5C,EAAiD2I,OAAjD,EAA0D,SAA1D;AACA4gB,YAAAA,UAAU,CAACX,IAAX,GAAkBA,IAAI,CAACv+B,KAAvB;AACA4+B,YAAAA,OAAO,CAACC,cAAR,CAAuBj1B,IAAvB,CAA4B,KAAKyR,UAAL,CAAgB6jB,UAAhB,EAA4B,mBAA5B,CAA5B;AACA;AACD;;AAEH,aAAK,QAAL;AACE;AACE,iBAAKV,iCAAL,CAAuCD,IAAI,CAAC5oB,GAA5C,EAAiD2I,OAAjD,EAA0D,QAA1D;AACA4gB,YAAAA,UAAU,CAACX,IAAX,GAAkBA,IAAI,CAACv+B,KAAvB;AACA4+B,YAAAA,OAAO,CAACE,aAAR,CAAsBl1B,IAAtB,CAA2B,KAAKyR,UAAL,CAAgB6jB,UAAhB,EAA4B,kBAA5B,CAA3B;AACA;AACD;;AAEH,aAAK,QAAL;AACE;AACE,iBAAKV,iCAAL,CAAuCD,IAAI,CAAC5oB,GAA5C,EAAiD2I,OAAjD,EAA0D,QAA1D;AACA4gB,YAAAA,UAAU,CAACX,IAAX,GAAkBA,IAAI,CAACv+B,KAAvB;AACA4+B,YAAAA,OAAO,CAACG,aAAR,CAAsBn1B,IAAtB,CAA2B,KAAKyR,UAAL,CAAgB6jB,UAAhB,EAA4B,kBAA5B,CAA3B;AACA;AACD;;AAEH,aAAK,SAAL;AACE;AACE,kBAAM,KAAKpB,qCAAL,CAA2CS,IAAI,CAAC5oB,GAAhD,EAAqD2I,OAArD,CAAN;AACD;;AAEH,aAAK,MAAL;AACE;AACE,oBAAQyf,YAAR;AACE,mBAAK,SAAL;AACE,qBAAKV,wCAAL,CAA8CkB,IAAI,CAAC5oB,GAAnD,EAAwD2I,OAAxD;AACA;;AAEF,mBAAK,QAAL;AACE,qBAAK0f,uCAAL,CAA6CO,IAAI,CAAC5oB,GAAlD,EAAuD2I,OAAvD;AACA;;AAEF;AACEsgB,gBAAAA,OAAO,CAACI,gBAAR,CAAyBp1B,IAAzB,CAA8B,KAAKyR,UAAL,CAAgB6jB,UAAhB,EAA4B,qBAA5B,CAA9B;AAVJ;AAYD;AA5CL;;AA+CA,UAAI,CAAC,KAAK52B,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAL,EAAiC;AAC/B,aAAKioB,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,WAAO;AACLi8B,MAAAA,OADK;AAELK,MAAAA;AAFK,KAAP;AAID;;AAEDG,EAAAA,qBAAqB,CAACC,kBAAD,EAAqBL,gBAArB,EAAuC;AAC1D1B,IAAAA;AAD0D,GAAvC,EAElB;AACD,QAAI+B,kBAAkB,CAACh2B,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,aAAO21B,gBAAP;AACD,KAFD,MAEO,IAAIA,gBAAgB,CAAC31B,MAAjB,KAA4B,CAAhC,EAAmC;AACxC,aAAOg2B,kBAAP;AACD,KAFM,MAEA,IAAIL,gBAAgB,CAAC31B,MAAjB,GAA0Bg2B,kBAAkB,CAACh2B,MAAjD,EAAyD;AAC9D,WAAK,MAAMotB,MAAX,IAAqB4I,kBAArB,EAAyC;AACvC,aAAKpB,kDAAL,CAAwDxH,MAAM,CAAC3uB,KAA/D,EAAsE;AACpEw1B,UAAAA;AADoE,SAAtE;AAGD;;AAED,aAAO0B,gBAAP;AACD,KARM,MAQA;AACL,WAAK,MAAMvI,MAAX,IAAqBuI,gBAArB,EAAuC;AACrC,aAAKf,kDAAL,CAAwDxH,MAAM,CAAC3uB,KAA/D,EAAsE;AACpEw1B,UAAAA;AADoE,SAAtE;AAGD;;AAED,aAAO+B,kBAAP;AACD;AACF;;AAEDC,EAAAA,yBAAyB,CAAC;AACxBhC,IAAAA;AADwB,GAAD,EAEtB;AACD,QAAI,KAAKlR,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B,UAAI,CAAC,KAAK9jB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAL,EAA+B;AAC7B,cAAM,KAAK08B,gCAAL,CAAsC,KAAKl0B,KAAL,CAAW5B,KAAjD,EAAwD;AAC5Dw1B,UAAAA,QAD4D;AAE5DO,UAAAA,YAAY,EAAE;AAF8C,SAAxD,CAAN;AAID;;AAED,YAAM;AACJ79B,QAAAA;AADI,UAEF,KAAK0J,KAFT;AAGA,WAAKkX,IAAL;;AAEA,UAAI5gB,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,QAAjC,IAA6CA,KAAK,KAAK,QAAvD,IAAmEA,KAAK,KAAK,QAAjF,EAA2F;AACzF,aAAK49B,gCAAL,CAAsC,KAAKl0B,KAAL,CAAW5B,KAAjD,EAAwD;AACtDw1B,UAAAA,QADsD;AAEtDO,UAAAA,YAAY,EAAE79B;AAFwC,SAAxD;AAID;;AAED,aAAOA,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDu/B,EAAAA,YAAY,CAACx1B,IAAD,EAAO;AACjBuzB,IAAAA,QADiB;AAEjBkC,IAAAA;AAFiB,GAAP,EAGT;AACD,UAAMzB,YAAY,GAAG,KAAKuB,yBAAL,CAA+B;AAClDhC,MAAAA;AADkD,KAA/B,CAArB;AAGA,SAAK9S,MAAL,CAAYjpB,OAAO,CAACa,MAApB;AACA,UAAM;AACJw8B,MAAAA,OADI;AAEJK,MAAAA;AAFI,QAGF,KAAKP,eAAL,CAAqB;AACvBpB,MAAAA,QADuB;AAEvBS,MAAAA;AAFuB,KAArB,CAHJ;AAOAh0B,IAAAA,IAAI,CAACk1B,iBAAL,GAAyBA,iBAAzB;;AAEA,YAAQlB,YAAR;AACE,WAAK,SAAL;AACEh0B,QAAAA,IAAI,CAACg0B,YAAL,GAAoB,IAApB;AACAh0B,QAAAA,IAAI,CAAC60B,OAAL,GAAeA,OAAO,CAACC,cAAvB;AACA,aAAKrU,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,eAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;;AAEF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAACg0B,YAAL,GAAoB,IAApB;AACAh0B,QAAAA,IAAI,CAAC60B,OAAL,GAAeA,OAAO,CAACE,aAAvB;AACA,aAAKtU,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,eAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAACg0B,YAAL,GAAoB,IAApB;AACAh0B,QAAAA,IAAI,CAAC60B,OAAL,GAAe,KAAKQ,qBAAL,CAA2BR,OAAO,CAACG,aAAnC,EAAkDH,OAAO,CAACI,gBAA1D,EAA4E;AACzF1B,UAAAA;AADyF,SAA5E,CAAf;AAGA,aAAK9S,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,eAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAAC60B,OAAL,GAAeA,OAAO,CAACI,gBAAvB;AACA,aAAKxU,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,eAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF;AACE;AACE,gBAAM01B,KAAK,GAAG,MAAM;AAClB11B,YAAAA,IAAI,CAAC60B,OAAL,GAAe,EAAf;AACA,iBAAKpU,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,mBAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAJD;;AAMAA,UAAAA,IAAI,CAACg0B,YAAL,GAAoB,KAApB;AACA,gBAAM2B,QAAQ,GAAGd,OAAO,CAACC,cAAR,CAAuBx1B,MAAxC;AACA,gBAAMs2B,OAAO,GAAGf,OAAO,CAACE,aAAR,CAAsBz1B,MAAtC;AACA,gBAAMu2B,OAAO,GAAGhB,OAAO,CAACG,aAAR,CAAsB11B,MAAtC;AACA,gBAAMw2B,YAAY,GAAGjB,OAAO,CAACI,gBAAR,CAAyB31B,MAA9C;;AAEA,cAAI,CAACq2B,QAAD,IAAa,CAACC,OAAd,IAAyB,CAACC,OAA1B,IAAqC,CAACC,YAA1C,EAAwD;AACtD,mBAAOJ,KAAK,EAAZ;AACD,WAFD,MAEO,IAAI,CAACC,QAAD,IAAa,CAACC,OAAlB,EAA2B;AAChC51B,YAAAA,IAAI,CAAC60B,OAAL,GAAe,KAAKQ,qBAAL,CAA2BR,OAAO,CAACG,aAAnC,EAAkDH,OAAO,CAACI,gBAA1D,EAA4E;AACzF1B,cAAAA;AADyF,aAA5E,CAAf;AAGA,iBAAK9S,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,mBAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WANM,MAMA,IAAI,CAAC41B,OAAD,IAAY,CAACC,OAAb,IAAwBF,QAAQ,IAAIG,YAAxC,EAAsD;AAC3D,iBAAK,MAAMpJ,MAAX,IAAqBmI,OAAO,CAACI,gBAA7B,EAA+C;AAC7C,mBAAK3B,wCAAL,CAA8C5G,MAAM,CAAC3uB,KAArD,EAA4D;AAC1Dw1B,gBAAAA,QAD0D;AAE1DC,gBAAAA,UAAU,EAAE9G,MAAM,CAAChc,EAAP,CAAUvZ;AAFoC,eAA5D;AAID;;AAED6I,YAAAA,IAAI,CAAC60B,OAAL,GAAeA,OAAO,CAACC,cAAvB;AACA,iBAAKrU,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,mBAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD,WAXM,MAWA,IAAI,CAAC21B,QAAD,IAAa,CAACE,OAAd,IAAyBD,OAAO,IAAIE,YAAxC,EAAsD;AAC3D,iBAAK,MAAMpJ,MAAX,IAAqBmI,OAAO,CAACI,gBAA7B,EAA+C;AAC7C,mBAAKhB,uCAAL,CAA6CvH,MAAM,CAAC3uB,KAApD,EAA2D;AACzDw1B,gBAAAA,QADyD;AAEzDC,gBAAAA,UAAU,EAAE9G,MAAM,CAAChc,EAAP,CAAUvZ;AAFmC,eAA3D;AAID;;AAED6I,YAAAA,IAAI,CAAC60B,OAAL,GAAeA,OAAO,CAACE,aAAvB;AACA,iBAAKtU,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,mBAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAXM,MAWA;AACL,iBAAK4zB,qCAAL,CAA2C6B,OAA3C,EAAoD;AAClDlC,cAAAA;AADkD,aAApD;AAGA,mBAAOmC,KAAK,EAAZ;AACD;AACF;AA5EL;AA8ED;;AAEDjM,EAAAA,wBAAwB,CAACzpB,IAAD,EAAO;AAC7B,UAAM0Q,EAAE,GAAG,KAAK2Q,eAAL,EAAX;AACArhB,IAAAA,IAAI,CAAC0Q,EAAL,GAAUA,EAAV;AACA1Q,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAK20B,YAAL,CAAkB,KAAKrkB,SAAL,EAAlB,EAAoC;AAC9CoiB,MAAAA,QAAQ,EAAE7iB,EAAE,CAACvZ,IADiC;AAE9Cs+B,MAAAA,OAAO,EAAE/kB,EAAE,CAAC3S;AAFkC,KAApC,CAAZ;AAIA,WAAO,KAAKuT,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDjJ,EAAAA,aAAa,CAAC4d,QAAD,EAAW;AACtB,QAAI,KAAKpW,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4B,KAAKwI,KAAL,CAAW1J,KAAX,KAAqB,IAAjD,IAAyD0e,QAAQ,KAAKnd,OAAO,CAACL,IAA9E,IAAsF,KAAKiH,KAAL,CAAWiD,KAAX,CAAiB,KAAK1B,KAAL,CAAWmM,YAA5B,EAA0C,KAAKnM,KAAL,CAAWsM,UAArD,MAAqE,WAA/J,EAA4K;AAC1K,WAAKtM,KAAL,CAAW6U,WAAX,GAAyB,KAAzB;AACD,KAFD,MAEO;AACL,YAAMzd,aAAN,CAAoB4d,QAApB;AACD;AACF;;AAEDwd,EAAAA,mBAAmB,GAAG;AACpB,UAAMtb,IAAI,GAAG,KAAKkf,cAAL,EAAb;;AAEA,QAAI,KAAK33B,KAAL,CAAW6uB,UAAX,CAAsBpW,IAAtB,MAAgC,EAApC,EAAwC;AACtC,YAAMmf,SAAS,GAAG,KAAK53B,KAAL,CAAW6uB,UAAX,CAAsBpW,IAAI,GAAG,CAA7B,CAAlB;AACA,aAAOmf,SAAS,KAAK,EAAd,IAAoBA,SAAS,KAAK,EAAzC;AACD;;AAED,WAAO,KAAP;AACD;;AAED5E,EAAAA,6BAA6B,CAACpxB,IAAD,EAAO;AAClC,WAAOA,IAAI,CAACY,IAAL,KAAc,oBAAd,GAAqCZ,IAAI,CAACuO,UAA1C,GAAuDvO,IAA9D;AACD;;AAnzFgD,CAAnD;;AAuzFA,MAAMi2B,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE,QADS;AAEfC,EAAAA,GAAG,EAAE,GAFU;AAGfC,EAAAA,IAAI,EAAE,QAHS;AAIfC,EAAAA,EAAE,EAAE,GAJW;AAKfC,EAAAA,EAAE,EAAE,GALW;AAMfC,EAAAA,IAAI,EAAE,QANS;AAOfC,EAAAA,KAAK,EAAE,QAPQ;AAQfC,EAAAA,IAAI,EAAE,QARS;AASfC,EAAAA,KAAK,EAAE,QATQ;AAUfC,EAAAA,MAAM,EAAE,QAVO;AAWfC,EAAAA,GAAG,EAAE,QAXU;AAYfC,EAAAA,MAAM,EAAE,QAZO;AAafC,EAAAA,IAAI,EAAE,QAbS;AAcfC,EAAAA,GAAG,EAAE,QAdU;AAefC,EAAAA,IAAI,EAAE,QAfS;AAgBfC,EAAAA,IAAI,EAAE,QAhBS;AAiBfC,EAAAA,KAAK,EAAE,QAjBQ;AAkBfC,EAAAA,GAAG,EAAE,QAlBU;AAmBfC,EAAAA,GAAG,EAAE,QAnBU;AAoBfC,EAAAA,GAAG,EAAE,QApBU;AAqBfC,EAAAA,IAAI,EAAE,QArBS;AAsBfC,EAAAA,GAAG,EAAE,QAtBU;AAuBfC,EAAAA,MAAM,EAAE,QAvBO;AAwBfC,EAAAA,IAAI,EAAE,QAxBS;AAyBfC,EAAAA,IAAI,EAAE,QAzBS;AA0BfC,EAAAA,KAAK,EAAE,QA1BQ;AA2BfC,EAAAA,KAAK,EAAE,QA3BQ;AA4BfC,EAAAA,IAAI,EAAE,QA5BS;AA6BfC,EAAAA,MAAM,EAAE,QA7BO;AA8BfC,EAAAA,KAAK,EAAE,QA9BQ;AA+BfC,EAAAA,IAAI,EAAE,QA/BS;AAgCfC,EAAAA,IAAI,EAAE,QAhCS;AAiCfC,EAAAA,KAAK,EAAE,QAjCQ;AAkCfC,EAAAA,MAAM,EAAE,QAlCO;AAmCfC,EAAAA,MAAM,EAAE,QAnCO;AAoCfC,EAAAA,MAAM,EAAE,QApCO;AAqCfC,EAAAA,MAAM,EAAE,QArCO;AAsCfC,EAAAA,MAAM,EAAE,QAtCO;AAuCfC,EAAAA,MAAM,EAAE,QAvCO;AAwCfC,EAAAA,KAAK,EAAE,QAxCQ;AAyCfC,EAAAA,MAAM,EAAE,QAzCO;AA0CfC,EAAAA,IAAI,EAAE,QA1CS;AA2CfC,EAAAA,KAAK,EAAE,QA3CQ;AA4CfC,EAAAA,KAAK,EAAE,QA5CQ;AA6CfC,EAAAA,MAAM,EAAE,QA7CO;AA8CfC,EAAAA,MAAM,EAAE,QA9CO;AA+CfC,EAAAA,MAAM,EAAE,QA/CO;AAgDfC,EAAAA,KAAK,EAAE,QAhDQ;AAiDfC,EAAAA,IAAI,EAAE,QAjDS;AAkDfC,EAAAA,MAAM,EAAE,QAlDO;AAmDfC,EAAAA,MAAM,EAAE,QAnDO;AAoDfC,EAAAA,KAAK,EAAE,QApDQ;AAqDfC,EAAAA,IAAI,EAAE,QArDS;AAsDfC,EAAAA,GAAG,EAAE,QAtDU;AAuDfC,EAAAA,MAAM,EAAE,QAvDO;AAwDfC,EAAAA,MAAM,EAAE,QAxDO;AAyDfC,EAAAA,MAAM,EAAE,QAzDO;AA0DfC,EAAAA,KAAK,EAAE,QA1DQ;AA2DfC,EAAAA,MAAM,EAAE,QA3DO;AA4DfC,EAAAA,IAAI,EAAE,QA5DS;AA6DfC,EAAAA,KAAK,EAAE,QA7DQ;AA8DfC,EAAAA,MAAM,EAAE,QA9DO;AA+DfC,EAAAA,MAAM,EAAE,QA/DO;AAgEfC,EAAAA,MAAM,EAAE,QAhEO;AAiEfC,EAAAA,KAAK,EAAE,QAjEQ;AAkEfC,EAAAA,IAAI,EAAE,QAlES;AAmEfC,EAAAA,MAAM,EAAE,QAnEO;AAoEfC,EAAAA,KAAK,EAAE,QApEQ;AAqEfC,EAAAA,KAAK,EAAE,QArEQ;AAsEfC,EAAAA,MAAM,EAAE,QAtEO;AAuEfC,EAAAA,MAAM,EAAE,QAvEO;AAwEfC,EAAAA,KAAK,EAAE,QAxEQ;AAyEfC,EAAAA,MAAM,EAAE,QAzEO;AA0EfC,EAAAA,IAAI,EAAE,QA1ES;AA2EfC,EAAAA,KAAK,EAAE,QA3EQ;AA4EfC,EAAAA,KAAK,EAAE,QA5EQ;AA6EfC,EAAAA,MAAM,EAAE,QA7EO;AA8EfC,EAAAA,MAAM,EAAE,QA9EO;AA+EfC,EAAAA,MAAM,EAAE,QA/EO;AAgFfC,EAAAA,KAAK,EAAE,QAhFQ;AAiFfC,EAAAA,IAAI,EAAE,QAjFS;AAkFfC,EAAAA,MAAM,EAAE,QAlFO;AAmFfC,EAAAA,MAAM,EAAE,QAnFO;AAoFfC,EAAAA,KAAK,EAAE,QApFQ;AAqFfC,EAAAA,IAAI,EAAE,QArFS;AAsFfC,EAAAA,GAAG,EAAE,QAtFU;AAuFfC,EAAAA,MAAM,EAAE,QAvFO;AAwFfC,EAAAA,MAAM,EAAE,QAxFO;AAyFfC,EAAAA,MAAM,EAAE,QAzFO;AA0FfC,EAAAA,KAAK,EAAE,QA1FQ;AA2FfC,EAAAA,MAAM,EAAE,QA3FO;AA4FfC,EAAAA,IAAI,EAAE,QA5FS;AA6FfC,EAAAA,MAAM,EAAE,QA7FO;AA8FfC,EAAAA,MAAM,EAAE,QA9FO;AA+FfC,EAAAA,MAAM,EAAE,QA/FO;AAgGfC,EAAAA,MAAM,EAAE,QAhGO;AAiGfC,EAAAA,KAAK,EAAE,QAjGQ;AAkGfC,EAAAA,IAAI,EAAE,QAlGS;AAmGfC,EAAAA,MAAM,EAAE,QAnGO;AAoGfC,EAAAA,KAAK,EAAE,QApGQ;AAqGfC,EAAAA,IAAI,EAAE,QArGS;AAsGfC,EAAAA,KAAK,EAAE,QAtGQ;AAuGfC,EAAAA,KAAK,EAAE,QAvGQ;AAwGfC,EAAAA,MAAM,EAAE,QAxGO;AAyGfC,EAAAA,MAAM,EAAE,QAzGO;AA0GfC,EAAAA,IAAI,EAAE,QA1GS;AA2GfC,EAAAA,IAAI,EAAE,QA3GS;AA4GfC,EAAAA,IAAI,EAAE,QA5GS;AA6Gf9iC,EAAAA,KAAK,EAAE,QA7GQ;AA8Gf+iC,EAAAA,KAAK,EAAE,QA9GQ;AA+GfC,EAAAA,IAAI,EAAE,QA/GS;AAgHfC,EAAAA,KAAK,EAAE,QAhHQ;AAiHfC,EAAAA,KAAK,EAAE,QAjHQ;AAkHfC,EAAAA,OAAO,EAAE,QAlHM;AAmHfC,EAAAA,IAAI,EAAE,QAnHS;AAoHfC,EAAAA,GAAG,EAAE,QApHU;AAqHfC,EAAAA,KAAK,EAAE,QArHQ;AAsHfC,EAAAA,IAAI,EAAE,QAtHS;AAuHfC,EAAAA,KAAK,EAAE,QAvHQ;AAwHfC,EAAAA,MAAM,EAAE,QAxHO;AAyHfC,EAAAA,EAAE,EAAE,QAzHW;AA0HfC,EAAAA,EAAE,EAAE,QA1HW;AA2HfC,EAAAA,EAAE,EAAE,QA3HW;AA4HfC,EAAAA,OAAO,EAAE,QA5HM;AA6HfC,EAAAA,EAAE,EAAE,QA7HW;AA8HfC,EAAAA,GAAG,EAAE,QA9HU;AA+HfC,EAAAA,KAAK,EAAE,QA/HQ;AAgIfC,EAAAA,GAAG,EAAE,QAhIU;AAiIfC,EAAAA,OAAO,EAAE,QAjIM;AAkIfC,EAAAA,GAAG,EAAE,QAlIU;AAmIfC,EAAAA,GAAG,EAAE,QAnIU;AAoIfC,EAAAA,GAAG,EAAE,QApIU;AAqIfC,EAAAA,KAAK,EAAE,QArIQ;AAsIfC,EAAAA,KAAK,EAAE,QAtIQ;AAuIfC,EAAAA,IAAI,EAAE,QAvIS;AAwIfC,EAAAA,KAAK,EAAE,QAxIQ;AAyIfC,EAAAA,KAAK,EAAE,QAzIQ;AA0IfC,EAAAA,OAAO,EAAE,QA1IM;AA2IfC,EAAAA,IAAI,EAAE,QA3IS;AA4IfC,EAAAA,GAAG,EAAE,QA5IU;AA6IfC,EAAAA,KAAK,EAAE,QA7IQ;AA8IfC,EAAAA,IAAI,EAAE,QA9IS;AA+IfC,EAAAA,KAAK,EAAE,QA/IQ;AAgJfC,EAAAA,MAAM,EAAE,QAhJO;AAiJfC,EAAAA,EAAE,EAAE,QAjJW;AAkJfC,EAAAA,EAAE,EAAE,QAlJW;AAmJfC,EAAAA,EAAE,EAAE,QAnJW;AAoJfC,EAAAA,OAAO,EAAE,QApJM;AAqJfC,EAAAA,EAAE,EAAE,QArJW;AAsJfC,EAAAA,GAAG,EAAE,QAtJU;AAuJfC,EAAAA,MAAM,EAAE,QAvJO;AAwJfC,EAAAA,KAAK,EAAE,QAxJQ;AAyJfC,EAAAA,GAAG,EAAE,QAzJU;AA0JfC,EAAAA,OAAO,EAAE,QA1JM;AA2JfC,EAAAA,GAAG,EAAE,QA3JU;AA4JfC,EAAAA,GAAG,EAAE,QA5JU;AA6JfC,EAAAA,GAAG,EAAE,QA7JU;AA8JfC,EAAAA,KAAK,EAAE,QA9JQ;AA+JfC,EAAAA,QAAQ,EAAE,QA/JK;AAgKfC,EAAAA,KAAK,EAAE,QAhKQ;AAiKfC,EAAAA,GAAG,EAAE,QAjKU;AAkKfC,EAAAA,IAAI,EAAE,QAlKS;AAmKfC,EAAAA,IAAI,EAAE,QAnKS;AAoKfC,EAAAA,MAAM,EAAE,QApKO;AAqKfC,EAAAA,IAAI,EAAE,QArKS;AAsKfC,EAAAA,GAAG,EAAE,QAtKU;AAuKfC,EAAAA,GAAG,EAAE,QAvKU;AAwKfC,EAAAA,GAAG,EAAE,QAxKU;AAyKfC,EAAAA,KAAK,EAAE,QAzKQ;AA0KfC,EAAAA,KAAK,EAAE,QA1KQ;AA2KfC,EAAAA,KAAK,EAAE,QA3KQ;AA4KfC,EAAAA,KAAK,EAAE,QA5KQ;AA6KfC,EAAAA,KAAK,EAAE,QA7KQ;AA8KfC,EAAAA,KAAK,EAAE,QA9KQ;AA+KfC,EAAAA,KAAK,EAAE,QA/KQ;AAgLfC,EAAAA,KAAK,EAAE,QAhLQ;AAiLfC,EAAAA,MAAM,EAAE,QAjLO;AAkLfC,EAAAA,MAAM,EAAE,QAlLO;AAmLfC,EAAAA,IAAI,EAAE,QAnLS;AAoLfC,EAAAA,MAAM,EAAE,QApLO;AAqLfC,EAAAA,MAAM,EAAE,QArLO;AAsLfC,EAAAA,KAAK,EAAE,QAtLQ;AAuLfC,EAAAA,KAAK,EAAE,QAvLQ;AAwLfC,EAAAA,MAAM,EAAE,QAxLO;AAyLfC,EAAAA,MAAM,EAAE,QAzLO;AA0LfC,EAAAA,KAAK,EAAE,QA1LQ;AA2LfC,EAAAA,KAAK,EAAE,QA3LQ;AA4LfC,EAAAA,IAAI,EAAE,QA5LS;AA6LfC,EAAAA,KAAK,EAAE,QA7LQ;AA8LfC,EAAAA,MAAM,EAAE,QA9LO;AA+LfC,EAAAA,IAAI,EAAE,QA/LS;AAgMfC,EAAAA,KAAK,EAAE,QAhMQ;AAiMfC,EAAAA,OAAO,EAAE,QAjMM;AAkMfC,EAAAA,IAAI,EAAE,QAlMS;AAmMfC,EAAAA,IAAI,EAAE,QAnMS;AAoMfC,EAAAA,IAAI,EAAE,QApMS;AAqMfC,EAAAA,IAAI,EAAE,QArMS;AAsMfC,EAAAA,IAAI,EAAE,QAtMS;AAuMfC,EAAAA,KAAK,EAAE,QAvMQ;AAwMfC,EAAAA,IAAI,EAAE,QAxMS;AAyMfC,EAAAA,IAAI,EAAE,QAzMS;AA0MfC,EAAAA,IAAI,EAAE,QA1MS;AA2MfC,EAAAA,IAAI,EAAE,QA3MS;AA4MfC,EAAAA,IAAI,EAAE,QA5MS;AA6MfC,EAAAA,MAAM,EAAE,QA7MO;AA8MfC,EAAAA,IAAI,EAAE,QA9MS;AA+MfC,EAAAA,KAAK,EAAE,QA/MQ;AAgNfrN,EAAAA,KAAK,EAAE,QAhNQ;AAiNfsN,EAAAA,KAAK,EAAE,QAjNQ;AAkNfC,EAAAA,IAAI,EAAE,QAlNS;AAmNfC,EAAAA,KAAK,EAAE,QAnNQ;AAoNfC,EAAAA,EAAE,EAAE,QApNW;AAqNfC,EAAAA,IAAI,EAAE,QArNS;AAsNfC,EAAAA,GAAG,EAAE,QAtNU;AAuNfC,EAAAA,KAAK,EAAE,QAvNQ;AAwNfC,EAAAA,MAAM,EAAE,QAxNO;AAyNfC,EAAAA,KAAK,EAAE,QAzNQ;AA0Nf7xB,EAAAA,IAAI,EAAE,QA1NS;AA2Nf8xB,EAAAA,KAAK,EAAE,QA3NQ;AA4NfC,EAAAA,GAAG,EAAE,QA5NU;AA6NfC,EAAAA,GAAG,EAAE,QA7NU;AA8NfC,EAAAA,EAAE,EAAE,QA9NW;AA+NfC,EAAAA,GAAG,EAAE,QA/NU;AAgOfC,EAAAA,GAAG,EAAE,QAhOU;AAiOfC,EAAAA,GAAG,EAAE,QAjOU;AAkOfC,EAAAA,MAAM,EAAE,QAlOO;AAmOfC,EAAAA,GAAG,EAAE,QAnOU;AAoOfC,EAAAA,IAAI,EAAE,QApOS;AAqOfC,EAAAA,KAAK,EAAE,QArOQ;AAsOfC,EAAAA,EAAE,EAAE,QAtOW;AAuOfC,EAAAA,KAAK,EAAE,QAvOQ;AAwOfC,EAAAA,EAAE,EAAE,QAxOW;AAyOfC,EAAAA,EAAE,EAAE,QAzOW;AA0OfC,EAAAA,GAAG,EAAE,QA1OU;AA2OfC,EAAAA,GAAG,EAAE,QA3OU;AA4OfC,EAAAA,IAAI,EAAE,QA5OS;AA6OfC,EAAAA,IAAI,EAAE,QA7OS;AA8OfC,EAAAA,IAAI,EAAE,QA9OS;AA+OfC,EAAAA,KAAK,EAAE,QA/OQ;AAgPfC,EAAAA,MAAM,EAAE,QAhPO;AAiPfC,EAAAA,IAAI,EAAE,QAjPS;AAkPfC,EAAAA,IAAI,EAAE,QAlPS;AAmPfC,EAAAA,KAAK,EAAE,QAnPQ;AAoPfC,EAAAA,KAAK,EAAE,QApPQ;AAqPfC,EAAAA,MAAM,EAAE,QArPO;AAsPfC,EAAAA,MAAM,EAAE,QAtPO;AAuPfC,EAAAA,IAAI,EAAE,QAvPS;AAwPfC,EAAAA,IAAI,EAAE,QAxPS;AAyPfC,EAAAA,GAAG,EAAE,QAzPU;AA0PfC,EAAAA,MAAM,EAAE,QA1PO;AA2PfC,EAAAA,KAAK,EAAE,QA3PQ;AA4PfC,EAAAA,MAAM,EAAE,QA5PO;AA6PfC,EAAAA,KAAK,EAAE;AA7PQ,CAAjB;AAgQA,MAAMC,UAAU,GAAG,eAAnB;AACA,MAAMC,cAAc,GAAG,OAAvB;AACA,MAAMC,SAAS,GAAGhkC,kBAAkB,CAAC;AACnCikC,EAAAA,gBAAgB,EAAE,8DADiB;AAEnCC,EAAAA,wBAAwB,EAAE,kDAFS;AAGnCC,EAAAA,yBAAyB,EAAE,gDAHQ;AAInCC,EAAAA,4BAA4B,EAAE,0GAJK;AAKnCC,EAAAA,mBAAmB,EAAE,gEALc;AAMnCC,EAAAA,sBAAsB,EAAE,4BANW;AAOnCC,EAAAA,4BAA4B,EAAE;AAPK,CAAD,EAQjC5kC,UAAU,CAACE,WARsB,CAApC;AASAiS,KAAK,CAACgd,MAAN,GAAe,IAAIpd,UAAJ,CAAe,MAAf,EAAuB,KAAvB,CAAf;AACAI,KAAK,CAAC0yB,MAAN,GAAe,IAAI9yB,UAAJ,CAAe,OAAf,EAAwB,KAAxB,CAAf;AACAI,KAAK,CAACid,MAAN,GAAe,IAAIrd,UAAJ,CAAe,gBAAf,EAAiC,IAAjC,EAAuC,IAAvC,CAAf;AACAhc,OAAO,CAAC+uC,OAAR,GAAkB,IAAI/vC,SAAJ,CAAc,SAAd,CAAlB;AACAgB,OAAO,CAACgvC,OAAR,GAAkB,IAAIhwC,SAAJ,CAAc,SAAd,EAAyB;AACzCN,EAAAA,UAAU,EAAE;AAD6B,CAAzB,CAAlB;AAGAsB,OAAO,CAAC8tB,WAAR,GAAsB,IAAI9uB,SAAJ,CAAc,aAAd,EAA6B;AACjDL,EAAAA,UAAU,EAAE;AADqC,CAA7B,CAAtB;AAGAqB,OAAO,CAACivC,SAAR,GAAoB,IAAIjwC,SAAJ,CAAc,WAAd,CAApB;;AAEAgB,OAAO,CAAC8tB,WAAR,CAAoBvuB,aAApB,GAAoC,YAAY;AAC9C,OAAK4I,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB+T,KAAK,CAACid,MAA9B;AACA,OAAKlxB,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB+T,KAAK,CAACgd,MAA9B;AACA,OAAKjxB,KAAL,CAAW6U,WAAX,GAAyB,KAAzB;AACD,CAJD;;AAMAhd,OAAO,CAACivC,SAAR,CAAkB1vC,aAAlB,GAAkC,UAAU4d,QAAV,EAAoB;AACpD,QAAMF,GAAG,GAAG,KAAK9U,KAAL,CAAW4U,OAAX,CAAmBrT,GAAnB,EAAZ;;AAEA,MAAIuT,GAAG,KAAKb,KAAK,CAACgd,MAAd,IAAwBjc,QAAQ,KAAKnd,OAAO,CAACqD,KAA7C,IAAsD4Z,GAAG,KAAKb,KAAK,CAAC0yB,MAAxE,EAAgF;AAC9E,SAAK3mC,KAAL,CAAW4U,OAAX,CAAmBrT,GAAnB;AACA,SAAKvB,KAAL,CAAW6U,WAAX,GAAyB,KAAKE,UAAL,OAAsBd,KAAK,CAACid,MAArD;AACD,GAHD,MAGO;AACL,SAAKlxB,KAAL,CAAW6U,WAAX,GAAyB,IAAzB;AACD;AACF,CATD;;AAWA,SAASkyB,UAAT,CAAoBC,MAApB,EAA4B;AAC1B,SAAOA,MAAM,GAAGA,MAAM,CAAC/lC,IAAP,KAAgB,oBAAhB,IAAwC+lC,MAAM,CAAC/lC,IAAP,KAAgB,oBAA3D,GAAkF,KAA/F;AACD;;AAED,SAASgmC,mBAAT,CAA6BD,MAA7B,EAAqC;AACnC,MAAIA,MAAM,CAAC/lC,IAAP,KAAgB,eAApB,EAAqC;AACnC,WAAO+lC,MAAM,CAACxvC,IAAd;AACD;;AAED,MAAIwvC,MAAM,CAAC/lC,IAAP,KAAgB,mBAApB,EAAyC;AACvC,WAAO+lC,MAAM,CAACE,SAAP,CAAiB1vC,IAAjB,GAAwB,GAAxB,GAA8BwvC,MAAM,CAACxvC,IAAP,CAAYA,IAAjD;AACD;;AAED,MAAIwvC,MAAM,CAAC/lC,IAAP,KAAgB,qBAApB,EAA2C;AACzC,WAAOgmC,mBAAmB,CAACD,MAAM,CAACA,MAAR,CAAnB,GAAqC,GAArC,GAA2CC,mBAAmB,CAACD,MAAM,CAACnf,QAAR,CAArE;AACD;;AAED,QAAM,IAAIpH,KAAJ,CAAU,+BAA+BumB,MAAM,CAAC/lC,IAAhD,CAAN;AACD;;AAED,IAAI+vB,GAAG,GAAIvjB,UAAU,IAAI,cAAcA,UAAd,CAAyB;AAChD05B,EAAAA,YAAY,GAAG;AACb,QAAIryB,GAAG,GAAG,EAAV;AACA,QAAIsyB,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAA5B;;AAEA,aAAS;AACP,UAAI,KAAKjM,KAAL,CAAWiM,GAAX,IAAkB,KAAKtM,MAA3B,EAAmC;AACjC,cAAM,KAAK6M,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B+nC,SAAS,CAACM,sBAAvC,CAAN;AACD;;AAED,YAAMY,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAX;;AAEA,cAAQo7B,EAAR;AACE,aAAK,EAAL;AACA,aAAK,GAAL;AACE,cAAI,KAAKrnC,KAAL,CAAWiM,GAAX,KAAmB,KAAKjM,KAAL,CAAW5B,KAAlC,EAAyC;AACvC,gBAAIipC,EAAE,KAAK,EAAP,IAAa,KAAKrnC,KAAL,CAAW6U,WAA5B,EAAyC;AACvC,gBAAE,KAAK7U,KAAL,CAAWiM,GAAb;AACA,qBAAO,KAAKqU,WAAL,CAAiBzoB,OAAO,CAAC8tB,WAAzB,CAAP;AACD;;AAED,mBAAO,MAAM0H,gBAAN,CAAuBga,EAAvB,CAAP;AACD;;AAEDvyB,UAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAP;AACA,iBAAO,KAAKqU,WAAL,CAAiBzoB,OAAO,CAACgvC,OAAzB,EAAkC/xB,GAAlC,CAAP;;AAEF,aAAK,EAAL;AACEA,UAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAP;AACA6I,UAAAA,GAAG,IAAI,KAAKwyB,aAAL,EAAP;AACAF,UAAAA,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAAxB;AACA;;AAEF,aAAK,EAAL;AACA,aAAK,GAAL;AAEA;AACE,cAAItO,SAAS,CAAC0pC,EAAD,CAAb,EAAmB;AACjBvyB,YAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAP;AACA6I,YAAAA,GAAG,IAAI,KAAKyyB,cAAL,CAAoB,IAApB,CAAP;AACAH,YAAAA,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAAxB;AACD,WAJD,MAIO;AACL,cAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACD;;AA/BL;AAkCD;AACF;;AAEDs7B,EAAAA,cAAc,CAACC,aAAD,EAAgB;AAC5B,UAAMH,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAX;AACA,QAAI6I,GAAJ;AACA,MAAE,KAAK9U,KAAL,CAAWiM,GAAb;;AAEA,QAAIo7B,EAAE,KAAK,EAAP,IAAa,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,MAA0C,EAA3D,EAA+D;AAC7D,QAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACA6I,MAAAA,GAAG,GAAG0yB,aAAa,GAAG,IAAH,GAAU,MAA7B;AACD,KAHD,MAGO;AACL1yB,MAAAA,GAAG,GAAG1G,MAAM,CAAC2H,YAAP,CAAoBsxB,EAApB,CAAN;AACD;;AAED,MAAE,KAAKrnC,KAAL,CAAWynC,OAAb;AACA,SAAKznC,KAAL,CAAWrB,SAAX,GAAuB,KAAKqB,KAAL,CAAWiM,GAAlC;AACA,WAAO6I,GAAP;AACD;;AAED4yB,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,QAAI7yB,GAAG,GAAG,EAAV;AACA,QAAIsyB,UAAU,GAAG,EAAE,KAAKpnC,KAAL,CAAWiM,GAA9B;;AAEA,aAAS;AACP,UAAI,KAAKjM,KAAL,CAAWiM,GAAX,IAAkB,KAAKtM,MAA3B,EAAmC;AACjC,cAAM,KAAK6M,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAAC+I,kBAA3C,CAAN;AACD;;AAED,YAAMo8B,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAX;AACA,UAAIo7B,EAAE,KAAKM,KAAX,EAAkB;;AAElB,UAAIN,EAAE,KAAK,EAAX,EAAe;AACbvyB,QAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAP;AACA6I,QAAAA,GAAG,IAAI,KAAKwyB,aAAL,EAAP;AACAF,QAAAA,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAAxB;AACD,OAJD,MAIO,IAAItO,SAAS,CAAC0pC,EAAD,CAAb,EAAmB;AACxBvyB,QAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAP;AACA6I,QAAAA,GAAG,IAAI,KAAKyyB,cAAL,CAAoB,KAApB,CAAP;AACAH,QAAAA,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAAxB;AACD,OAJM,MAIA;AACL,UAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACD;AACF;;AAED6I,IAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAX,EAA7B,CAAP;AACA,WAAO,KAAKqU,WAAL,CAAiBzoB,OAAO,CAACK,MAAzB,EAAiC4c,GAAjC,CAAP;AACD;;AAEDwyB,EAAAA,aAAa,GAAG;AACd,QAAIM,GAAG,GAAG,EAAV;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,MAAJ;AACA,QAAIT,EAAE,GAAG,KAAK5oC,KAAL,CAAW,KAAKuB,KAAL,CAAWiM,GAAtB,CAAT;AACA,UAAMgF,QAAQ,GAAG,EAAE,KAAKjR,KAAL,CAAWiM,GAA9B;;AAEA,WAAO,KAAKjM,KAAL,CAAWiM,GAAX,GAAiB,KAAKtM,MAAtB,IAAgCkoC,KAAK,KAAK,EAAjD,EAAqD;AACnDR,MAAAA,EAAE,GAAG,KAAK5oC,KAAL,CAAW,KAAKuB,KAAL,CAAWiM,GAAX,EAAX,CAAL;;AAEA,UAAIo7B,EAAE,KAAK,GAAX,EAAgB;AACd,YAAIO,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClB,cAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBA,YAAAA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAN;;AAEA,gBAAI9B,UAAU,CAACnwB,IAAX,CAAgB8xB,GAAhB,CAAJ,EAA0B;AACxBE,cAAAA,MAAM,GAAG15B,MAAM,CAAC45B,aAAP,CAAqBC,QAAQ,CAACL,GAAD,EAAM,EAAN,CAA7B,CAAT;AACD;AACF,WAND,MAMO;AACLA,YAAAA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAN;;AAEA,gBAAI7B,cAAc,CAACpwB,IAAf,CAAoB8xB,GAApB,CAAJ,EAA8B;AAC5BE,cAAAA,MAAM,GAAG15B,MAAM,CAAC45B,aAAP,CAAqBC,QAAQ,CAACL,GAAD,EAAM,EAAN,CAA7B,CAAT;AACD;AACF;AACF,SAdD,MAcO;AACLE,UAAAA,MAAM,GAAGxR,QAAQ,CAACsR,GAAD,CAAjB;AACD;;AAED;AACD;;AAEDA,MAAAA,GAAG,IAAIP,EAAP;AACD;;AAED,QAAI,CAACS,MAAL,EAAa;AACX,WAAK9nC,KAAL,CAAWiM,GAAX,GAAiBgF,QAAjB;AACA,aAAO,GAAP;AACD;;AAED,WAAO62B,MAAP;AACD;;AAEDI,EAAAA,WAAW,GAAG;AACZ,QAAIb,EAAJ;AACA,UAAMjpC,KAAK,GAAG,KAAK4B,KAAL,CAAWiM,GAAzB;;AAEA,OAAG;AACDo7B,MAAAA,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,EAAE,KAAKttB,KAAL,CAAWiM,GAAnC,CAAL;AACD,KAFD,QAES+J,gBAAgB,CAACqxB,EAAD,CAAhB,IAAwBA,EAAE,KAAK,EAFxC;;AAIA,WAAO,KAAK/mB,WAAL,CAAiBzoB,OAAO,CAAC+uC,OAAzB,EAAkC,KAAKnoC,KAAL,CAAWiD,KAAX,CAAiBtD,KAAjB,EAAwB,KAAK4B,KAAL,CAAWiM,GAAnC,CAAlC,CAAP;AACD;;AAEDk8B,EAAAA,kBAAkB,GAAG;AACnB,UAAM9nC,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEA,QAAI,KAAK5S,KAAL,CAAW/G,OAAO,CAAC+uC,OAAnB,CAAJ,EAAiC;AAC/BvmC,MAAAA,IAAI,CAAC7I,IAAL,GAAY,KAAKwI,KAAL,CAAW1J,KAAvB;AACD,KAFD,MAEO,IAAI,KAAK0J,KAAL,CAAWiB,IAAX,CAAgBhK,OAApB,EAA6B;AAClCoJ,MAAAA,IAAI,CAAC7I,IAAL,GAAY,KAAKwI,KAAL,CAAWiB,IAAX,CAAgBhK,OAA5B;AACD,KAFM,MAEA;AACL,WAAKisB,UAAL;AACD;;AAED,SAAKhM,IAAL;AACA,WAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED+nC,EAAAA,sBAAsB,GAAG;AACvB,UAAMn3B,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,UAAM1U,IAAI,GAAG,KAAK2wC,kBAAL,EAAb;AACA,QAAI,CAAC,KAAKhnB,GAAL,CAAStpB,OAAO,CAACsB,KAAjB,CAAL,EAA8B,OAAO3B,IAAP;AAC9B,UAAM6I,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,IAAAA,IAAI,CAAC6mC,SAAL,GAAiB1vC,IAAjB;AACA6I,IAAAA,IAAI,CAAC7I,IAAL,GAAY,KAAK2wC,kBAAL,EAAZ;AACA,WAAO,KAAKx2B,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDgoC,EAAAA,mBAAmB,GAAG;AACpB,UAAMp3B,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,QAAI7L,IAAI,GAAG,KAAK+nC,sBAAL,EAAX;;AAEA,QAAI/nC,IAAI,CAACY,IAAL,KAAc,mBAAlB,EAAuC;AACrC,aAAOZ,IAAP;AACD;;AAED,WAAO,KAAK8gB,GAAL,CAAStpB,OAAO,CAACwB,GAAjB,CAAP,EAA8B;AAC5B,YAAMivC,OAAO,GAAG,KAAK35B,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAhB;AACAo8B,MAAAA,OAAO,CAACtB,MAAR,GAAiB3mC,IAAjB;AACAioC,MAAAA,OAAO,CAACzgB,QAAR,GAAmB,KAAKsgB,kBAAL,EAAnB;AACA9nC,MAAAA,IAAI,GAAG,KAAKsR,UAAL,CAAgB22B,OAAhB,EAAyB,qBAAzB,CAAP;AACD;;AAED,WAAOjoC,IAAP;AACD;;AAEDkoC,EAAAA,sBAAsB,GAAG;AACvB,QAAIloC,IAAJ;;AAEA,YAAQ,KAAKL,KAAL,CAAWiB,IAAnB;AACE,WAAKpJ,OAAO,CAACa,MAAb;AACE2H,QAAAA,IAAI,GAAG,KAAKmR,SAAL,EAAP;AACA,aAAK0F,IAAL;AACA7W,QAAAA,IAAI,GAAG,KAAKmoC,2BAAL,CAAiCnoC,IAAjC,CAAP;;AAEA,YAAIA,IAAI,CAACuO,UAAL,CAAgB3N,IAAhB,KAAyB,oBAA7B,EAAmD;AACjD,eAAKuL,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB+nC,SAAS,CAACC,gBAAjC;AACD;;AAED,eAAO/lC,IAAP;;AAEF,WAAKxI,OAAO,CAAC8tB,WAAb;AACA,WAAK9tB,OAAO,CAACK,MAAb;AACE,eAAO,KAAKwY,aAAL,EAAP;;AAEF;AACE,cAAM,KAAKlE,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B+nC,SAAS,CAACK,mBAAvC,CAAN;AAjBJ;AAmBD;;AAEDiC,EAAAA,uBAAuB,GAAG;AACxB,UAAMpoC,IAAI,GAAG,KAAKsO,WAAL,CAAiB,KAAK3O,KAAL,CAAWsM,UAA5B,EAAwC,KAAKtM,KAAL,CAAWuM,aAAnD,CAAb;AACA,WAAO,KAAKyC,YAAL,CAAkB3O,IAAlB,EAAwB,oBAAxB,EAA8C,KAAKL,KAAL,CAAW5B,KAAzD,EAAgE,KAAK4B,KAAL,CAAWkM,QAA3E,CAAP;AACD;;AAEDw8B,EAAAA,mBAAmB,CAACroC,IAAD,EAAO;AACxB,SAAK6W,IAAL;AACA7W,IAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAKwS,eAAL,EAAlB;AACA,SAAKN,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,WAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDmoC,EAAAA,2BAA2B,CAACnoC,IAAD,EAAO;AAChC,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAJ,EAAgC;AAC9BwH,MAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAK65B,uBAAL,EAAlB;AACD,KAFD,MAEO;AACL,YAAM75B,UAAU,GAAG,KAAKwS,eAAL,EAAnB;AACA/gB,MAAAA,IAAI,CAACuO,UAAL,GAAkBA,UAAlB;AACD;;AAED,SAAKkS,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,WAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDsoC,EAAAA,iBAAiB,GAAG;AAClB,UAAMtoC,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEA,QAAI,KAAK2P,GAAL,CAAStpB,OAAO,CAACa,MAAjB,CAAJ,EAA8B;AAC5B,WAAKooB,MAAL,CAAYjpB,OAAO,CAAC6B,QAApB;AACA2G,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAK2D,uBAAL,EAAhB;AACA,WAAKvK,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,aAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAEDA,IAAAA,IAAI,CAAC7I,IAAL,GAAY,KAAK4wC,sBAAL,EAAZ;AACA/nC,IAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAK6qB,GAAL,CAAStpB,OAAO,CAACmC,EAAjB,IAAuB,KAAKuuC,sBAAL,EAAvB,GAAuD,IAApE;AACA,WAAO,KAAK52B,UAAL,CAAgBtR,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDuoC,EAAAA,wBAAwB,CAAC33B,QAAD,EAAW/E,QAAX,EAAqB;AAC3C,UAAM7L,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;;AAEA,QAAI,KAAKtN,KAAL,CAAW/G,OAAO,CAACivC,SAAnB,CAAJ,EAAmC;AACjC,WAAKhmB,MAAL,CAAYjpB,OAAO,CAACivC,SAApB;AACA,aAAO,KAAKn1B,UAAL,CAAgBtR,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAEDA,IAAAA,IAAI,CAAC7I,IAAL,GAAY,KAAK6wC,mBAAL,EAAZ;AACA,WAAO,KAAKQ,+BAAL,CAAqCxoC,IAArC,CAAP;AACD;;AAEDwoC,EAAAA,+BAA+B,CAACxoC,IAAD,EAAO;AACpC,UAAMwS,UAAU,GAAG,EAAnB;;AAEA,WAAO,CAAC,KAAKjU,KAAL,CAAW/G,OAAO,CAACqD,KAAnB,CAAD,IAA8B,CAAC,KAAK0D,KAAL,CAAW/G,OAAO,CAACivC,SAAnB,CAAtC,EAAqE;AACnEj0B,MAAAA,UAAU,CAAC3S,IAAX,CAAgB,KAAKyoC,iBAAL,EAAhB;AACD;;AAEDtoC,IAAAA,IAAI,CAACwS,UAAL,GAAkBA,UAAlB;AACAxS,IAAAA,IAAI,CAACyoC,WAAL,GAAmB,KAAK3nB,GAAL,CAAStpB,OAAO,CAACqD,KAAjB,CAAnB;AACA,SAAK4lB,MAAL,CAAYjpB,OAAO,CAACivC,SAApB;AACA,WAAO,KAAKn1B,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED0oC,EAAAA,wBAAwB,CAAC93B,QAAD,EAAW/E,QAAX,EAAqB;AAC3C,UAAM7L,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;;AAEA,QAAI,KAAKtN,KAAL,CAAW/G,OAAO,CAACivC,SAAnB,CAAJ,EAAmC;AACjC,WAAKhmB,MAAL,CAAYjpB,OAAO,CAACivC,SAApB;AACA,aAAO,KAAKn1B,UAAL,CAAgBtR,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAEDA,IAAAA,IAAI,CAAC7I,IAAL,GAAY,KAAK6wC,mBAAL,EAAZ;AACA,SAAKvnB,MAAL,CAAYjpB,OAAO,CAACivC,SAApB;AACA,WAAO,KAAKn1B,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED2oC,EAAAA,iBAAiB,CAAC/3B,QAAD,EAAW/E,QAAX,EAAqB;AACpC,UAAM7L,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA,UAAM+8B,QAAQ,GAAG,EAAjB;AACA,UAAMC,cAAc,GAAG,KAAKN,wBAAL,CAA8B33B,QAA9B,EAAwC/E,QAAxC,CAAvB;AACA,QAAIi9B,cAAc,GAAG,IAArB;;AAEA,QAAI,CAACD,cAAc,CAACJ,WAApB,EAAiC;AAC/BM,MAAAA,QAAQ,EAAE,SAAS;AACjB,gBAAQ,KAAKppC,KAAL,CAAWiB,IAAnB;AACE,eAAKpJ,OAAO,CAAC8tB,WAAb;AACE1U,YAAAA,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAAtB;AACA8N,YAAAA,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAAtB;AACA,iBAAKgL,IAAL;;AAEA,gBAAI,KAAKiK,GAAL,CAAStpB,OAAO,CAACqD,KAAjB,CAAJ,EAA6B;AAC3BiuC,cAAAA,cAAc,GAAG,KAAKJ,wBAAL,CAA8B93B,QAA9B,EAAwC/E,QAAxC,CAAjB;AACA,oBAAMk9B,QAAN;AACD;;AAEDH,YAAAA,QAAQ,CAAC/oC,IAAT,CAAc,KAAK8oC,iBAAL,CAAuB/3B,QAAvB,EAAiC/E,QAAjC,CAAd;AACA;;AAEF,eAAKrU,OAAO,CAACgvC,OAAb;AACEoC,YAAAA,QAAQ,CAAC/oC,IAAT,CAAc,KAAKwQ,aAAL,EAAd;AACA;;AAEF,eAAK7Y,OAAO,CAACa,MAAb;AACE;AACE,oBAAM2H,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,mBAAK0F,IAAL;;AAEA,kBAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAAC6B,QAAnB,CAAJ,EAAkC;AAChCuvC,gBAAAA,QAAQ,CAAC/oC,IAAT,CAAc,KAAKwoC,mBAAL,CAAyBroC,IAAzB,CAAd;AACD,eAFD,MAEO;AACL4oC,gBAAAA,QAAQ,CAAC/oC,IAAT,CAAc,KAAKsoC,2BAAL,CAAiCnoC,IAAjC,CAAd;AACD;;AAED;AACD;;AAEH;AACE,kBAAM,KAAK6iB,UAAL,EAAN;AAjCJ;AAmCD;;AAED,UAAI6jB,UAAU,CAACmC,cAAD,CAAV,IAA8B,CAACnC,UAAU,CAACoC,cAAD,CAA7C,EAA+D;AAC7D,aAAK38B,KAAL,CAAW28B,cAAc,CAAC/qC,KAA1B,EAAiC+nC,SAAS,CAACG,yBAA3C;AACD,OAFD,MAEO,IAAI,CAACS,UAAU,CAACmC,cAAD,CAAX,IAA+BnC,UAAU,CAACoC,cAAD,CAA7C,EAA+D;AACpE,aAAK38B,KAAL,CAAW28B,cAAc,CAAC/qC,KAA1B,EAAiC+nC,SAAS,CAACE,wBAA3C,EAAqEY,mBAAmB,CAACiC,cAAc,CAAC1xC,IAAhB,CAAxF;AACD,OAFM,MAEA,IAAI,CAACuvC,UAAU,CAACmC,cAAD,CAAX,IAA+B,CAACnC,UAAU,CAACoC,cAAD,CAA9C,EAAgE;AACrE,YAAIlC,mBAAmB,CAACkC,cAAc,CAAC3xC,IAAhB,CAAnB,KAA6CyvC,mBAAmB,CAACiC,cAAc,CAAC1xC,IAAhB,CAApE,EAA2F;AACzF,eAAKgV,KAAL,CAAW28B,cAAc,CAAC/qC,KAA1B,EAAiC+nC,SAAS,CAACE,wBAA3C,EAAqEY,mBAAmB,CAACiC,cAAc,CAAC1xC,IAAhB,CAAxF;AACD;AACF;AACF;;AAED,QAAIuvC,UAAU,CAACmC,cAAD,CAAd,EAAgC;AAC9B7oC,MAAAA,IAAI,CAACgpC,eAAL,GAAuBH,cAAvB;AACA7oC,MAAAA,IAAI,CAACipC,eAAL,GAAuBH,cAAvB;AACD,KAHD,MAGO;AACL9oC,MAAAA,IAAI,CAAC6oC,cAAL,GAAsBA,cAAtB;AACA7oC,MAAAA,IAAI,CAAC8oC,cAAL,GAAsBA,cAAtB;AACD;;AAED9oC,IAAAA,IAAI,CAAC4oC,QAAL,GAAgBA,QAAhB;;AAEA,QAAI,KAAKpnB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAM,KAAKrV,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B+nC,SAAS,CAACO,4BAAvC,CAAN;AACD;;AAED,WAAOK,UAAU,CAACmC,cAAD,CAAV,GAA6B,KAAKv3B,UAAL,CAAgBtR,IAAhB,EAAsB,aAAtB,CAA7B,GAAoE,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,YAAtB,CAA3E;AACD;;AAEDkpC,EAAAA,eAAe,GAAG;AAChB,UAAMt4B,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,SAAKgL,IAAL;AACA,WAAO,KAAK8xB,iBAAL,CAAuB/3B,QAAvB,EAAiC/E,QAAjC,CAAP;AACD;;AAEDwE,EAAAA,aAAa,CAACC,mBAAD,EAAsB;AACjC,QAAI,KAAK/R,KAAL,CAAW/G,OAAO,CAACgvC,OAAnB,CAAJ,EAAiC;AAC/B,aAAO,KAAKv4B,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,SAApC,CAAP;AACD,KAFD,MAEO,IAAI,KAAKsI,KAAL,CAAW/G,OAAO,CAAC8tB,WAAnB,CAAJ,EAAqC;AAC1C,aAAO,KAAK4jB,eAAL,EAAP;AACD,KAFM,MAEA,IAAI,KAAK1nB,YAAL,CAAkB,GAAlB,KAA0B,KAAKpjB,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,MAA0C,EAAxE,EAA4E;AACjF,WAAKqU,WAAL,CAAiBzoB,OAAO,CAAC8tB,WAAzB;AACA,aAAO,KAAK4jB,eAAL,EAAP;AACD,KAHM,MAGA;AACL,aAAO,MAAM74B,aAAN,CAAoBC,mBAApB,CAAP;AACD;AACF;;AAED0c,EAAAA,gBAAgB,CAACzvB,IAAD,EAAO;AACrB,QAAI,KAAKoC,KAAL,CAAWwpC,cAAf,EAA+B,OAAO,MAAMnc,gBAAN,CAAuBzvB,IAAvB,CAAP;AAC/B,UAAMgX,OAAO,GAAG,KAAKG,UAAL,EAAhB;;AAEA,QAAIH,OAAO,KAAKX,KAAK,CAACid,MAAtB,EAA8B;AAC5B,aAAO,KAAKiW,YAAL,EAAP;AACD;;AAED,QAAIvyB,OAAO,KAAKX,KAAK,CAACgd,MAAlB,IAA4Brc,OAAO,KAAKX,KAAK,CAAC0yB,MAAlD,EAA0D;AACxD,UAAI9wB,iBAAiB,CAACjY,IAAD,CAArB,EAA6B;AAC3B,eAAO,KAAKsqC,WAAL,EAAP;AACD;;AAED,UAAItqC,IAAI,KAAK,EAAb,EAAiB;AACf,UAAE,KAAKoC,KAAL,CAAWiM,GAAb;AACA,eAAO,KAAKqU,WAAL,CAAiBzoB,OAAO,CAACivC,SAAzB,CAAP;AACD;;AAED,UAAI,CAAClpC,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAAzB,KAAgCgX,OAAO,KAAKX,KAAK,CAACgd,MAAtD,EAA8D;AAC5D,eAAO,KAAKyW,aAAL,CAAmB9pC,IAAnB,CAAP;AACD;AACF;;AAED,QAAIA,IAAI,KAAK,EAAT,IAAe,KAAKoC,KAAL,CAAW6U,WAA1B,IAAyC,KAAKpW,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAA3F,EAA+F;AAC7F,QAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACA,aAAO,KAAKqU,WAAL,CAAiBzoB,OAAO,CAAC8tB,WAAzB,CAAP;AACD;;AAED,WAAO,MAAM0H,gBAAN,CAAuBzvB,IAAvB,CAAP;AACD;;AAEDxG,EAAAA,aAAa,CAAC4d,QAAD,EAAW;AACtB,QAAI,KAAKpW,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,YAAMqc,UAAU,GAAG,KAAKA,UAAL,EAAnB;;AAEA,UAAIA,UAAU,KAAKd,KAAK,CAACgd,MAAzB,EAAiC;AAC/B,aAAKjxB,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB+T,KAAK,CAACE,eAA9B;AACD,OAFD,MAEO,IAAIY,UAAU,KAAKd,KAAK,CAACid,MAAzB,EAAiC;AACtC,aAAKlxB,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB+T,KAAK,CAACI,aAA9B;AACD,OAFM,MAEA;AACL,cAAMjd,aAAN,CAAoB4d,QAApB;AACD;;AAED,WAAKhV,KAAL,CAAW6U,WAAX,GAAyB,IAAzB;AACD,KAZD,MAYO,IAAI,KAAKjW,KAAL,CAAW/G,OAAO,CAACqD,KAAnB,KAA6B8Z,QAAQ,KAAKnd,OAAO,CAAC8tB,WAAtD,EAAmE;AACxE,WAAK3lB,KAAL,CAAW4U,OAAX,CAAmBjV,MAAnB,IAA6B,CAA7B;AACA,WAAKK,KAAL,CAAW4U,OAAX,CAAmB1U,IAAnB,CAAwB+T,KAAK,CAAC0yB,MAA9B;AACA,WAAK3mC,KAAL,CAAW6U,WAAX,GAAyB,KAAzB;AACD,KAJM,MAIA;AACL,aAAO,MAAMzd,aAAN,CAAoB4d,QAApB,CAAP;AACD;AACF;;AAvb+C,CAAlD;;AA2bA,MAAMy0B,eAAN,SAA8B1vB,KAA9B,CAAoC;AAClCjjB,EAAAA,WAAW,CAAC,GAAG+Y,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;AACA,SAAKoE,KAAL,GAAa,EAAb;AACA,SAAKy1B,KAAL,GAAa,EAAb;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,kBAAL,GAA0B,EAA1B;AACD;;AARiC;;AAYpC,MAAMC,sBAAN,SAAqC3vB,YAArC,CAAkD;AAChDc,EAAAA,WAAW,CAACrN,KAAD,EAAQ;AACjB,WAAO,IAAI67B,eAAJ,CAAoB77B,KAApB,CAAP;AACD;;AAEDyN,EAAAA,WAAW,CAAC7jB,IAAD,EAAO8jB,WAAP,EAAoBrP,GAApB,EAAyB;AAClC,UAAMmP,KAAK,GAAG,KAAKJ,YAAL,EAAd;;AAEA,QAAIM,WAAW,GAAG/C,yBAAlB,EAA6C;AAC3C,WAAKiD,kBAAL,CAAwBJ,KAAxB,EAA+B5jB,IAA/B;AACA4jB,MAAAA,KAAK,CAACyuB,kBAAN,CAAyB3pC,IAAzB,CAA8B1I,IAA9B;AACA;AACD;;AAED,UAAM6jB,WAAN,CAAkB,GAAG5Z,SAArB;;AAEA,QAAI6Z,WAAW,GAAGvD,cAAlB,EAAkC;AAChC,UAAI,EAAEuD,WAAW,GAAGxD,eAAhB,CAAJ,EAAsC;AACpC,aAAKyD,yBAAL,CAA+BH,KAA/B,EAAsC5jB,IAAtC,EAA4C8jB,WAA5C,EAAyDrP,GAAzD;AACA,aAAKuP,kBAAL,CAAwBJ,KAAxB,EAA+B5jB,IAA/B;AACD;;AAED4jB,MAAAA,KAAK,CAACnH,KAAN,CAAY/T,IAAZ,CAAiB1I,IAAjB;AACD;;AAED,QAAI8jB,WAAW,GAAGjD,kBAAlB,EAAsC+C,KAAK,CAACsuB,KAAN,CAAYxpC,IAAZ,CAAiB1I,IAAjB;AACtC,QAAI8jB,WAAW,GAAGhD,wBAAlB,EAA4C8C,KAAK,CAACuuB,UAAN,CAAiBzpC,IAAjB,CAAsB1I,IAAtB;AAC5C,QAAI8jB,WAAW,GAAGlD,gBAAlB,EAAoCgD,KAAK,CAACwuB,OAAN,CAAc1pC,IAAd,CAAmB1I,IAAnB;AACrC;;AAEDkkB,EAAAA,mBAAmB,CAACN,KAAD,EAAQ5jB,IAAR,EAAc8jB,WAAd,EAA2B;AAC5C,QAAIF,KAAK,CAACsuB,KAAN,CAAY/tB,OAAZ,CAAoBnkB,IAApB,IAA4B,CAAC,CAAjC,EAAoC;AAClC,UAAI8jB,WAAW,GAAGjD,kBAAlB,EAAsC;AACpC,cAAM0xB,OAAO,GAAG,CAAC,EAAEzuB,WAAW,GAAGhD,wBAAhB,CAAjB;AACA,cAAM0xB,QAAQ,GAAG5uB,KAAK,CAACuuB,UAAN,CAAiBhuB,OAAjB,CAAyBnkB,IAAzB,IAAiC,CAAC,CAAnD;AACA,eAAOuyC,OAAO,KAAKC,QAAnB;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAI1uB,WAAW,GAAGlD,gBAAd,IAAkCgD,KAAK,CAACwuB,OAAN,CAAcjuB,OAAd,CAAsBnkB,IAAtB,IAA8B,CAAC,CAArE,EAAwE;AACtE,UAAI4jB,KAAK,CAACnB,OAAN,CAAc0B,OAAd,CAAsBnkB,IAAtB,IAA8B,CAAC,CAAnC,EAAsC;AACpC,eAAO,CAAC,EAAE8jB,WAAW,GAAGxD,eAAhB,CAAR;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;;AAED,QAAIwD,WAAW,GAAGvD,cAAd,IAAgCqD,KAAK,CAACnH,KAAN,CAAY0H,OAAZ,CAAoBnkB,IAApB,IAA4B,CAAC,CAAjE,EAAoE;AAClE,aAAO,IAAP;AACD;;AAED,WAAO,MAAMkkB,mBAAN,CAA0B,GAAGja,SAA7B,CAAP;AACD;;AAEDma,EAAAA,gBAAgB,CAAC7K,EAAD,EAAK;AACnB,QAAI,KAAKqJ,UAAL,CAAgB,CAAhB,EAAmBnG,KAAnB,CAAyB0H,OAAzB,CAAiC5K,EAAE,CAACvZ,IAApC,MAA8C,CAAC,CAA/C,IAAoD,KAAK4iB,UAAL,CAAgB,CAAhB,EAAmByvB,kBAAnB,CAAsCluB,OAAtC,CAA8C5K,EAAE,CAACvZ,IAAjD,MAA2D,CAAC,CAApH,EAAuH;AACrH,YAAMokB,gBAAN,CAAuB7K,EAAvB;AACD;AACF;;AA5D+C;;AAgElD,MAAMk5B,KAAK,GAAG,MAAd;AAAA,MACMC,WAAW,GAAG,MADpB;AAAA,MAEMC,WAAW,GAAG,MAFpB;AAAA,MAGMC,YAAY,GAAG,MAHrB;AAAA,MAIMC,QAAQ,GAAG,MAJjB;;AAKA,MAAMC,0BAAN,CAAiC;AAC/BxzC,EAAAA,WAAW,GAAG;AACZ,SAAKyzC,MAAL,GAAc,EAAd;AACD;;AAEDrvB,EAAAA,KAAK,CAACtN,KAAD,EAAQ;AACX,SAAK28B,MAAL,CAAYrqC,IAAZ,CAAiB0N,KAAjB;AACD;;AAEDuN,EAAAA,IAAI,GAAG;AACL,SAAKovB,MAAL,CAAYhpC,GAAZ;AACD;;AAEDipC,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKD,MAAL,CAAY,KAAKA,MAAL,CAAY5qC,MAAZ,GAAqB,CAAjC,CAAP;AACD;;AAEW,MAAR8qC,QAAQ,GAAG;AACb,WAAO,CAAC,KAAKD,YAAL,KAAsBL,WAAvB,IAAsC,CAA7C;AACD;;AAEW,MAARO,QAAQ,GAAG;AACb,WAAO,CAAC,KAAKF,YAAL,KAAsBN,WAAvB,IAAsC,CAA7C;AACD;;AAEY,MAATS,SAAS,GAAG;AACd,WAAO,CAAC,KAAKH,YAAL,KAAsBJ,YAAvB,IAAuC,CAA9C;AACD;;AAEQ,MAALQ,KAAK,GAAG;AACV,WAAO,CAAC,KAAKJ,YAAL,KAAsBH,QAAvB,IAAmC,CAA1C;AACD;;AA/B8B;;AAkCjC,SAASQ,aAAT,CAAuB37B,OAAvB,EAAgCmB,WAAhC,EAA6C;AAC3C,SAAO,CAACnB,OAAO,GAAGi7B,WAAH,GAAiB,CAAzB,KAA+B95B,WAAW,GAAG65B,WAAH,GAAiB,CAA3D,CAAP;AACD;;AAED,SAASY,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,MAAIA,CAAC,IAAI,IAAT,EAAe;AACb,UAAM,IAAItqB,KAAJ,CAAW,cAAasqB,CAAE,SAA1B,CAAN;AACD;;AAED,SAAOA,CAAP;AACD;;AAED,SAASC,MAAT,CAAgBD,CAAhB,EAAmB;AACjB,MAAI,CAACA,CAAL,EAAQ;AACN,UAAM,IAAItqB,KAAJ,CAAU,aAAV,CAAN;AACD;AACF;;AAED,MAAMwqB,QAAQ,GAAG9oC,kBAAkB,CAAC;AAClC+oC,EAAAA,+BAA+B,EAAE,0EADC;AAElCC,EAAAA,iCAAiC,EAAE,6DAFD;AAGlCC,EAAAA,+BAA+B,EAAE,0CAHC;AAIlCC,EAAAA,qBAAqB,EAAE,mDAJW;AAKlCC,EAAAA,sBAAsB,EAAE,oDALU;AAMlCC,EAAAA,4BAA4B,EAAE,6DANI;AAOlCC,EAAAA,eAAe,EAAE,qCAPiB;AAQlCC,EAAAA,+BAA+B,EAAE,mDARC;AASlCC,EAAAA,gCAAgC,EAAE,2DATA;AAUlCC,EAAAA,8BAA8B,EAAE,sCAVE;AAWlCC,EAAAA,iBAAiB,EAAE,2BAXe;AAYlCC,EAAAA,uBAAuB,EAAE,4BAZS;AAalCC,EAAAA,kBAAkB,EAAE,qCAbc;AAclCC,EAAAA,mBAAmB,EAAE,sCAda;AAelCC,EAAAA,iCAAiC,EAAE,8DAfD;AAgBlCC,EAAAA,wBAAwB,EAAE,4CAhBQ;AAiBlCC,EAAAA,qBAAqB,EAAE,kDAjBW;AAkBlCC,EAAAA,yBAAyB,EAAE,uDAlBO;AAmBlCC,EAAAA,8BAA8B,EAAE,gEAnBE;AAoBlCC,EAAAA,wBAAwB,EAAE,sDApBQ;AAqBlCC,EAAAA,yBAAyB,EAAE,0DArBO;AAsBlCC,EAAAA,uBAAuB,EAAE,qDAtBS;AAuBlCC,EAAAA,2BAA2B,EAAE,+CAvBK;AAwBlCC,EAAAA,qBAAqB,EAAE,2CAxBW;AAyBlCC,EAAAA,uBAAuB,EAAE,yDAzBS;AA0BlCC,EAAAA,gCAAgC,EAAE,0DA1BA;AA2BlCC,EAAAA,iCAAiC,EAAE,4DA3BD;AA4BlCC,EAAAA,wCAAwC,EAAE,kFA5BR;AA6BlCC,EAAAA,0BAA0B,EAAE,uDA7BM;AA8BlCC,EAAAA,qBAAqB,EAAE,4GA9BW;AA+BlCC,EAAAA,iBAAiB,EAAE,gFA/Be;AAgClCC,EAAAA,yBAAyB,EAAE,uDAhCO;AAiClCC,EAAAA,8BAA8B,EAAE,gEAjCE;AAkClCC,EAAAA,0BAA0B,EAAE,mFAlCM;AAmClCC,EAAAA,qCAAqC,EAAE,qDAnCL;AAoClCC,EAAAA,iCAAiC,EAAE,8CApCD;AAqClCC,EAAAA,8BAA8B,EAAE,wDArCE;AAsClCC,EAAAA,6BAA6B,EAAE,+CAtCG;AAuClCC,EAAAA,yBAAyB,EAAE,mHAvCO;AAwClCC,EAAAA,sCAAsC,EAAE,kFAxCN;AAyClCC,EAAAA,2BAA2B,EAAE,uEAzCK;AA0ClCC,EAAAA,kBAAkB,EAAE,8EA1Cc;AA2ClCC,EAAAA,wBAAwB,EAAE,wCA3CQ;AA4ClCC,EAAAA,6BAA6B,EAAE,6CA5CG;AA6ClCC,EAAAA,6BAA6B,EAAE,qDA7CG;AA8ClCC,EAAAA,gCAAgC,EAAE,mEA9CA;AA+ClCC,EAAAA,iCAAiC,EAAE;AA/CD,CAAD,EAgDhClsC,UAAU,CAACE,WAhDqB,CAAnC;;AAkDA,SAASisC,mBAAT,CAA6B33C,KAA7B,EAAoC;AAClC,UAAQA,KAAR;AACE,SAAK,KAAL;AACE,aAAO,cAAP;;AAEF,SAAK,SAAL;AACE,aAAO,kBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,OAAL;AACE,aAAO,gBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,WAAL;AACE,aAAO,oBAAP;;AAEF,SAAK,SAAL;AACE,aAAO,kBAAP;;AAEF;AACE,aAAOyK,SAAP;AAhCJ;AAkCD;;AAED,SAASmtC,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAOA,QAAQ,KAAK,SAAb,IAA0BA,QAAQ,KAAK,QAAvC,IAAmDA,QAAQ,KAAK,WAAvE;AACD;;AAED,IAAIC,UAAU,GAAI3gC,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACvD0S,EAAAA,eAAe,GAAG;AAChB,WAAO2pB,sBAAP;AACD;;AAEDuE,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKzvC,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAP;AACD;;AAED82C,EAAAA,wBAAwB,GAAG;AACzB,WAAO,CAAC,KAAK1vC,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,KAAgC,KAAKuG,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAhC,IAA8D,KAAKkG,KAAL,CAAW/G,OAAO,CAACoD,IAAnB,CAA9D,IAA0F,KAAK2D,KAAL,CAAW/G,OAAO,CAAC6B,QAAnB,CAA1F,IAA0H,KAAKkF,KAAL,CAAW/G,OAAO,CAACM,WAAnB,CAA1H,IAA6J,KAAKo2C,qBAAL,EAA9J,KAA+L,CAAC,KAAKn5B,qBAAL,EAAvM;AACD;;AAEDo5B,EAAAA,4BAA4B,GAAG;AAC7B,SAAKt3B,IAAL;AACA,WAAO,KAAKo3B,wBAAL,EAAP;AACD;;AAEDG,EAAAA,eAAe,CAACC,gBAAD,EAAmB;AAChC,QAAI,CAAC,KAAK9vC,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAL,EAA+B;AAC7B,aAAOuJ,SAAP;AACD;;AAED,UAAMotC,QAAQ,GAAG,KAAKnuC,KAAL,CAAW1J,KAA5B;;AAEA,QAAIo4C,gBAAgB,CAAC/yB,OAAjB,CAAyBwyB,QAAzB,MAAuC,CAAC,CAAxC,IAA6C,KAAKQ,UAAL,CAAgB,KAAKH,4BAAL,CAAkCI,IAAlC,CAAuC,IAAvC,CAAhB,CAAjD,EAAgH;AAC9G,aAAOT,QAAP;AACD;;AAED,WAAOptC,SAAP;AACD;;AAED8tC,EAAAA,gBAAgB,CAACC,QAAD,EAAWJ,gBAAX,EAA6BK,mBAA7B,EAAkD3hC,aAAlD,EAAiE;AAC/E,UAAM4hC,YAAY,GAAG,CAAC/iC,GAAD,EAAMkiC,QAAN,EAAgBc,MAAhB,EAAwBC,KAAxB,KAAkC;AACrD,UAAIf,QAAQ,KAAKc,MAAb,IAAuBH,QAAQ,CAACI,KAAD,CAAnC,EAA4C;AAC1C,aAAK1iC,KAAL,CAAWP,GAAX,EAAgBg/B,QAAQ,CAACwB,qBAAzB,EAAgDwC,MAAhD,EAAwDC,KAAxD;AACD;AACF,KAJD;;AAMA,UAAMC,YAAY,GAAG,CAACljC,GAAD,EAAMkiC,QAAN,EAAgBiB,IAAhB,EAAsBC,IAAtB,KAA+B;AAClD,UAAIP,QAAQ,CAACM,IAAD,CAAR,IAAkBjB,QAAQ,KAAKkB,IAA/B,IAAuCP,QAAQ,CAACO,IAAD,CAAR,IAAkBlB,QAAQ,KAAKiB,IAA1E,EAAgF;AAC9E,aAAK5iC,KAAL,CAAWP,GAAX,EAAgBg/B,QAAQ,CAACiB,qBAAzB,EAAgDkD,IAAhD,EAAsDC,IAAtD;AACD;AACF,KAJD;;AAMA,aAAS;AACP,YAAMp+B,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,YAAM+vC,QAAQ,GAAG,KAAKM,eAAL,CAAqBC,gBAAgB,CAACx+B,MAAjB,CAAwB6+B,mBAAmB,IAAI,IAAvB,GAA8BA,mBAA9B,GAAoD,EAA5E,CAArB,CAAjB;AACA,UAAI,CAACZ,QAAL,EAAe;;AAEf,UAAID,kBAAkB,CAACC,QAAD,CAAtB,EAAkC;AAChC,YAAIW,QAAQ,CAACQ,aAAb,EAA4B;AAC1B,eAAK9iC,KAAL,CAAWyE,QAAX,EAAqBg6B,QAAQ,CAACU,8BAA9B;AACD,SAFD,MAEO;AACLqD,UAAAA,YAAY,CAAC/9B,QAAD,EAAWk9B,QAAX,EAAqBA,QAArB,EAA+B,UAA/B,CAAZ;AACAa,UAAAA,YAAY,CAAC/9B,QAAD,EAAWk9B,QAAX,EAAqBA,QAArB,EAA+B,QAA/B,CAAZ;AACAW,UAAAA,QAAQ,CAACQ,aAAT,GAAyBnB,QAAzB;AACD;AACF,OARD,MAQO;AACL,YAAIh4C,MAAM,CAACo5C,cAAP,CAAsB3e,IAAtB,CAA2Bke,QAA3B,EAAqCX,QAArC,CAAJ,EAAoD;AAClD,eAAK3hC,KAAL,CAAWyE,QAAX,EAAqBg6B,QAAQ,CAACW,iBAA9B,EAAiDuC,QAAjD;AACD,SAFD,MAEO;AACLa,UAAAA,YAAY,CAAC/9B,QAAD,EAAWk9B,QAAX,EAAqB,QAArB,EAA+B,UAA/B,CAAZ;AACAa,UAAAA,YAAY,CAAC/9B,QAAD,EAAWk9B,QAAX,EAAqB,QAArB,EAA+B,UAA/B,CAAZ;AACAa,UAAAA,YAAY,CAAC/9B,QAAD,EAAWk9B,QAAX,EAAqB,UAArB,EAAiC,UAAjC,CAAZ;AACAa,UAAAA,YAAY,CAAC/9B,QAAD,EAAWk9B,QAAX,EAAqB,UAArB,EAAiC,UAAjC,CAAZ;AACAgB,UAAAA,YAAY,CAACl+B,QAAD,EAAWk9B,QAAX,EAAqB,SAArB,EAAgC,UAAhC,CAAZ;AACAgB,UAAAA,YAAY,CAACl+B,QAAD,EAAWk9B,QAAX,EAAqB,QAArB,EAA+B,UAA/B,CAAZ;AACD;;AAEDW,QAAAA,QAAQ,CAACX,QAAD,CAAR,GAAqB,IAArB;AACD;;AAED,UAAIY,mBAAmB,IAAI,IAAvB,IAA+BA,mBAAmB,CAAC/yB,QAApB,CAA6BmyB,QAA7B,CAAnC,EAA2E;AACzE,aAAK3hC,KAAL,CAAWyE,QAAX,EAAqB7D,aAArB,EAAoC+gC,QAApC;AACD;AACF;AACF;;AAEDqB,EAAAA,kBAAkB,CAAC/9B,IAAD,EAAO;AACvB,YAAQA,IAAR;AACE,WAAK,aAAL;AACA,WAAK,aAAL;AACE,eAAO,KAAK7S,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAP;;AAEF,WAAK,uBAAL;AACE,eAAO,KAAK+F,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAP;;AAEF,WAAK,mBAAL;AACE,eAAO,KAAKkG,KAAL,CAAW/G,OAAO,CAACW,QAAnB,CAAP;;AAEF,WAAK,2BAAL;AACE,eAAO,KAAKqpB,YAAL,CAAkB,GAAlB,CAAP;AAZJ;;AAeA,UAAM,IAAIpB,KAAJ,CAAU,aAAV,CAAN;AACD;;AAEDgvB,EAAAA,WAAW,CAACh+B,IAAD,EAAOi+B,YAAP,EAAqB;AAC9B,UAAMplB,MAAM,GAAG,EAAf;;AAEA,WAAO,CAAC,KAAKklB,kBAAL,CAAwB/9B,IAAxB,CAAR,EAAuC;AACrC6Y,MAAAA,MAAM,CAACpqB,IAAP,CAAYwvC,YAAY,EAAxB;AACD;;AAED,WAAOplB,MAAP;AACD;;AAEDqlB,EAAAA,oBAAoB,CAACl+B,IAAD,EAAOi+B,YAAP,EAAqB;AACvC,WAAO5E,OAAO,CAAC,KAAK8E,0BAAL,CAAgCn+B,IAAhC,EAAsCi+B,YAAtC,EAAoD,IAApD,CAAD,CAAd;AACD;;AAEDE,EAAAA,0BAA0B,CAACn+B,IAAD,EAAOi+B,YAAP,EAAqBG,aAArB,EAAoC;AAC5D,UAAMvlB,MAAM,GAAG,EAAf;;AAEA,aAAS;AACP,UAAI,KAAKklB,kBAAL,CAAwB/9B,IAAxB,CAAJ,EAAmC;AACjC;AACD;;AAED,YAAMgc,OAAO,GAAGiiB,YAAY,EAA5B;;AAEA,UAAIjiB,OAAO,IAAI,IAAf,EAAqB;AACnB,eAAO1sB,SAAP;AACD;;AAEDupB,MAAAA,MAAM,CAACpqB,IAAP,CAAYutB,OAAZ;;AAEA,UAAI,KAAKtM,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAAJ,EAA6B;AAC3B;AACD;;AAED,UAAI,KAAKu2C,kBAAL,CAAwB/9B,IAAxB,CAAJ,EAAmC;AACjC;AACD;;AAED,UAAIo+B,aAAJ,EAAmB;AACjB,aAAK/uB,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;;AAED,aAAO8H,SAAP;AACD;;AAED,WAAOupB,MAAP;AACD;;AAEDwlB,EAAAA,oBAAoB,CAACr+B,IAAD,EAAOi+B,YAAP,EAAqBK,OAArB,EAA8BC,cAA9B,EAA8C;AAChE,QAAI,CAACA,cAAL,EAAqB;AACnB,UAAID,OAAJ,EAAa;AACX,aAAKjvB,MAAL,CAAYjpB,OAAO,CAACQ,QAApB;AACD,OAFD,MAEO;AACL,aAAKytB,gBAAL,CAAsB,GAAtB;AACD;AACF;;AAED,UAAMwE,MAAM,GAAG,KAAKqlB,oBAAL,CAA0Bl+B,IAA1B,EAAgCi+B,YAAhC,CAAf;;AAEA,QAAIK,OAAJ,EAAa;AACX,WAAKjvB,MAAL,CAAYjpB,OAAO,CAACW,QAApB;AACD,KAFD,MAEO;AACL,WAAKstB,gBAAL,CAAsB,GAAtB;AACD;;AAED,WAAOwE,MAAP;AACD;;AAED2lB,EAAAA,iBAAiB,GAAG;AAClB,UAAM5vC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAKsP,MAAL,CAAYjpB,OAAO,CAACiF,OAApB;AACA,SAAKgkB,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;;AAEA,QAAI,CAAC,KAAK6F,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAL,EAAiC;AAC/B,WAAKsU,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B6sC,QAAQ,CAAC6C,6BAAtC;AACD;;AAEDztC,IAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKhX,aAAL,EAAhB;AACA,SAAKoQ,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;;AAEA,QAAI,KAAKmoB,GAAL,CAAStpB,OAAO,CAACwB,GAAjB,CAAJ,EAA2B;AACzBgH,MAAAA,IAAI,CAAC6vC,SAAL,GAAiB,KAAKC,iBAAL,CAAuB,IAAvB,CAAjB;AACD;;AAED,QAAI,KAAKtuB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAK2/B,oBAAL,EAAtB;AACD;;AAED,WAAO,KAAKz+B,UAAL,CAAgBtR,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED8vC,EAAAA,iBAAiB,CAACE,kBAAD,EAAqB;AACpC,QAAIvI,MAAM,GAAG,KAAKpmB,eAAL,EAAb;;AAEA,WAAO,KAAKP,GAAL,CAAStpB,OAAO,CAACwB,GAAjB,CAAP,EAA8B;AAC5B,YAAMgH,IAAI,GAAG,KAAKoT,eAAL,CAAqBq0B,MAArB,CAAb;AACAznC,MAAAA,IAAI,CAAC+uB,IAAL,GAAY0Y,MAAZ;AACAznC,MAAAA,IAAI,CAAC2kB,KAAL,GAAa,KAAKtD,eAAL,CAAqB2uB,kBAArB,CAAb;AACAvI,MAAAA,MAAM,GAAG,KAAKn2B,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAT;AACD;;AAED,WAAOynC,MAAP;AACD;;AAEDwI,EAAAA,oBAAoB,GAAG;AACrB,UAAMjwC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAACkwC,QAAL,GAAgB,KAAKJ,iBAAL,CAAuB,KAAvB,CAAhB;;AAEA,QAAI,CAAC,KAAK/6B,qBAAL,EAAD,IAAiC,KAAKyM,YAAL,CAAkB,GAAlB,CAArC,EAA6D;AAC3DxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAK2/B,oBAAL,EAAtB;AACD;;AAED,WAAO,KAAKz+B,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDmwC,EAAAA,wBAAwB,CAACC,GAAD,EAAM;AAC5B,SAAKv5B,IAAL;AACA,UAAM7W,IAAI,GAAG,KAAKoT,eAAL,CAAqBg9B,GAArB,CAAb;AACApwC,IAAAA,IAAI,CAACqwC,aAAL,GAAqBD,GAArB;AACApwC,IAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAKuuB,qBAAL,CAA2B,KAA3B,CAAtB;AACAtwC,IAAAA,IAAI,CAACuwC,OAAL,GAAe,KAAf;AACA,WAAO,KAAKj/B,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDwwC,EAAAA,mBAAmB,GAAG;AACpB,UAAMxwC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0F,IAAL;AACA,WAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAEDywC,EAAAA,gBAAgB,GAAG;AACjB,UAAMzwC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAKsP,MAAL,CAAYjpB,OAAO,CAACuF,OAApB;;AAEA,QAAI,KAAKwB,KAAL,CAAW/G,OAAO,CAACiF,OAAnB,CAAJ,EAAiC;AAC/BuD,MAAAA,IAAI,CAAC0wC,QAAL,GAAgB,KAAKd,iBAAL,EAAhB;AACD,KAFD,MAEO;AACL5vC,MAAAA,IAAI,CAAC0wC,QAAL,GAAgB,KAAKZ,iBAAL,CAAuB,IAAvB,CAAhB;AACD;;AAED,WAAO,KAAKx+B,UAAL,CAAgBtR,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED2wC,EAAAA,oBAAoB,GAAG;AACrB,UAAM3wC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAAC7I,IAAL,GAAY,KAAKy5C,mBAAL,CAAyB5wC,IAAI,CAACjC,KAA9B,CAAZ;AACAiC,IAAAA,IAAI,CAAC6wC,UAAL,GAAkB,KAAKC,kBAAL,CAAwBt5C,OAAO,CAAC+E,QAAhC,CAAlB;AACAyD,IAAAA,IAAI,CAACkjB,OAAL,GAAe,KAAK4tB,kBAAL,CAAwBt5C,OAAO,CAACmC,EAAhC,CAAf;AACA,WAAO,KAAK2X,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED+wC,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAKvvB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,aAAO,KAAKwvB,qBAAL,EAAP;AACD;AACF;;AAEDA,EAAAA,qBAAqB,GAAG;AACtB,UAAMhxC,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEA,QAAI,KAAKqQ,YAAL,CAAkB,GAAlB,KAA0B,KAAKjjB,KAAL,CAAW/G,OAAO,CAAC8tB,WAAnB,CAA9B,EAA+D;AAC7D,WAAKzO,IAAL;AACD,KAFD,MAEO;AACL,WAAKgM,UAAL;AACD;;AAED7iB,IAAAA,IAAI,CAACoM,MAAL,GAAc,KAAKqjC,oBAAL,CAA0B,2BAA1B,EAAuD,KAAKkB,oBAAL,CAA0BpC,IAA1B,CAA+B,IAA/B,CAAvD,EAA6F,KAA7F,EAAoG,IAApG,CAAd;;AAEA,QAAIvuC,IAAI,CAACoM,MAAL,CAAY9M,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAK6M,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB6sC,QAAQ,CAACc,mBAAhC;AACD;;AAED,WAAO,KAAKp6B,UAAL,CAAgBtR,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAEDixC,EAAAA,6BAA6B,GAAG;AAC9B,QAAI,KAAK9qB,SAAL,GAAiBvlB,IAAjB,KAA0BpJ,OAAO,CAACwE,MAAtC,EAA8C;AAC5C,WAAK6a,IAAL;AACA,aAAO,KAAKo5B,oBAAL,EAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDiB,EAAAA,eAAe,CAACC,WAAD,EAAcC,SAAd,EAAyB;AACtC,UAAMC,mBAAmB,GAAGF,WAAW,KAAK35C,OAAO,CAAC2B,KAApD;AACAi4C,IAAAA,SAAS,CAAChhC,cAAV,GAA2B,KAAK2gC,wBAAL,EAA3B;AACA,SAAKtwB,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;AACA04C,IAAAA,SAAS,CAACE,UAAV,GAAuB,KAAKC,8BAAL,EAAvB;;AAEA,QAAIF,mBAAJ,EAAyB;AACvBD,MAAAA,SAAS,CAACrvB,cAAV,GAA2B,KAAKyvB,oCAAL,CAA0CL,WAA1C,CAA3B;AACD,KAFD,MAEO,IAAI,KAAK5yC,KAAL,CAAW4yC,WAAX,CAAJ,EAA6B;AAClCC,MAAAA,SAAS,CAACrvB,cAAV,GAA2B,KAAKyvB,oCAAL,CAA0CL,WAA1C,CAA3B;AACD;AACF;;AAEDI,EAAAA,8BAA8B,GAAG;AAC/B,WAAO,KAAKE,gBAAL,CAAsBj6C,OAAO,CAACmB,MAA9B,EAAsC,EAAtC,EAA0CgX,GAA1C,CAA8CrC,OAAO,IAAI;AAC9D,UAAIA,OAAO,CAAC1M,IAAR,KAAiB,YAAjB,IAAiC0M,OAAO,CAAC1M,IAAR,KAAiB,aAAlD,IAAmE0M,OAAO,CAAC1M,IAAR,KAAiB,eAApF,IAAuG0M,OAAO,CAAC1M,IAAR,KAAiB,cAA5H,EAA4I;AAC1I,aAAKuL,KAAL,CAAWmB,OAAO,CAACvP,KAAnB,EAA0B6sC,QAAQ,CAAC+C,iCAAnC,EAAsErgC,OAAO,CAAC1M,IAA9E;AACD;;AAED,aAAO0M,OAAP;AACD,KANM,CAAP;AAOD;;AAEDokC,EAAAA,0BAA0B,GAAG;AAC3B,QAAI,CAAC,KAAK5wB,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAAD,IAA4B,CAAC,KAAK+4C,gBAAL,EAAjC,EAA0D;AACxD,WAAKlxB,MAAL,CAAYjpB,OAAO,CAACqB,IAApB;AACD;AACF;;AAED+4C,EAAAA,sBAAsB,CAACxgC,IAAD,EAAOpR,IAAP,EAAa;AACjC,SAAKkxC,eAAL,CAAqB15C,OAAO,CAACsB,KAA7B,EAAoCkH,IAApC;AACA,SAAK0xC,0BAAL;AACA,WAAO,KAAKpgC,UAAL,CAAgBtR,IAAhB,EAAsBoR,IAAtB,CAAP;AACD;;AAEDygC,EAAAA,+BAA+B,GAAG;AAChC,SAAKh7B,IAAL;AACA,WAAO,KAAKiK,GAAL,CAAStpB,OAAO,CAACL,IAAjB,KAA0B,KAAKoH,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAjC;AACD;;AAEDg5C,EAAAA,wBAAwB,CAAC9xC,IAAD,EAAO;AAC7B,QAAI,EAAE,KAAKzB,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,KAAgC,KAAK+5C,WAAL,CAAiB,KAAKF,+BAAL,CAAqCtD,IAArC,CAA0C,IAA1C,CAAjB,CAAlC,CAAJ,EAA0G;AACxG,aAAO7tC,SAAP;AACD;;AAED,SAAK+f,MAAL,CAAYjpB,OAAO,CAACQ,QAApB;AACA,UAAM0Y,EAAE,GAAG,KAAK2Q,eAAL,EAAX;AACA3Q,IAAAA,EAAE,CAACqR,cAAH,GAAoB,KAAKuuB,qBAAL,EAApB;AACA,SAAKtuB,gBAAL,CAAsBtR,EAAtB;AACA,SAAK+P,MAAL,CAAYjpB,OAAO,CAACW,QAApB;AACA6H,IAAAA,IAAI,CAACsxC,UAAL,GAAkB,CAAC5gC,EAAD,CAAlB;AACA,UAAM9P,IAAI,GAAG,KAAKoxC,wBAAL,EAAb;AACA,QAAIpxC,IAAJ,EAAUZ,IAAI,CAAC+hB,cAAL,GAAsBnhB,IAAtB;AACV,SAAK8wC,0BAAL;AACA,WAAO,KAAKpgC,UAAL,CAAgBtR,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAEDiyC,EAAAA,gCAAgC,CAACjyC,IAAD,EAAOkyC,QAAP,EAAiB;AAC/C,QAAI,KAAKpxB,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC+G,IAAI,CAACqS,QAAL,GAAgB,IAAhB;AAChC,UAAM8/B,OAAO,GAAGnyC,IAAhB;;AAEA,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,KAA8B,KAAK8oB,YAAL,CAAkB,GAAlB,CAAlC,EAA0D;AACxD,UAAI0wB,QAAJ,EAAc;AACZ,aAAK/lC,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB6sC,QAAQ,CAACkC,0BAAhC;AACD;;AAED,YAAM79B,MAAM,GAAGkjC,OAAf;;AAEA,UAAIljC,MAAM,CAACmC,IAAP,IAAe,KAAKoQ,YAAL,CAAkB,GAAlB,CAAnB,EAA2C;AACzC,aAAKrV,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2Bg/B,QAAQ,CAACG,+BAApC;AACD;;AAED,WAAKmG,eAAL,CAAqB15C,OAAO,CAACsB,KAA7B,EAAoCmW,MAApC;AACA,WAAKyiC,0BAAL;;AAEA,UAAIziC,MAAM,CAACmC,IAAP,KAAgB,KAApB,EAA2B;AACzB,YAAInC,MAAM,CAACqiC,UAAP,CAAkBhyC,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,eAAK6M,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACU,cAAzC;;AAEA,cAAI,KAAK6rB,WAAL,CAAiBnf,MAAM,CAACqiC,UAAP,CAAkB,CAAlB,CAAjB,CAAJ,EAA4C;AAC1C,iBAAKnlC,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2Bg/B,QAAQ,CAACE,iCAApC;AACD;AACF;AACF,OARD,MAQO,IAAI77B,MAAM,CAACmC,IAAP,KAAgB,KAApB,EAA2B;AAChC,YAAInC,MAAM,CAACqiC,UAAP,CAAkBhyC,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,eAAK6M,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACW,cAAzC;AACD,SAFD,MAEO;AACL,gBAAM4vC,cAAc,GAAGnjC,MAAM,CAACqiC,UAAP,CAAkB,CAAlB,CAAvB;;AAEA,cAAI,KAAKljB,WAAL,CAAiBgkB,cAAjB,CAAJ,EAAsC;AACpC,iBAAKjmC,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2Bg/B,QAAQ,CAACE,iCAApC;AACD;;AAED,cAAIsH,cAAc,CAACxxC,IAAf,KAAwB,YAAxB,IAAwCwxC,cAAc,CAAC//B,QAA3D,EAAqE;AACnE,iBAAKlG,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2Bg/B,QAAQ,CAACmC,qCAApC;AACD;;AAED,cAAIqF,cAAc,CAACxxC,IAAf,KAAwB,aAA5B,EAA2C;AACzC,iBAAKuL,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2Bg/B,QAAQ,CAACoC,iCAApC;AACD;AACF;;AAED,YAAI/9B,MAAM,CAAC8S,cAAX,EAA2B;AACzB,eAAK5V,KAAL,CAAW8C,MAAM,CAAC8S,cAAP,CAAsBhkB,KAAjC,EAAwC6sC,QAAQ,CAACqC,8BAAjD;AACD;AACF,OAtBM,MAsBA;AACLh+B,QAAAA,MAAM,CAACmC,IAAP,GAAc,QAAd;AACD;;AAED,aAAO,KAAKE,UAAL,CAAgBrC,MAAhB,EAAwB,mBAAxB,CAAP;AACD,KAjDD,MAiDO;AACL,YAAMuY,QAAQ,GAAG2qB,OAAjB;AACA,UAAID,QAAJ,EAAc1qB,QAAQ,CAAC0qB,QAAT,GAAoB,IAApB;AACd,YAAMtxC,IAAI,GAAG,KAAKoxC,wBAAL,EAAb;AACA,UAAIpxC,IAAJ,EAAU4mB,QAAQ,CAACzF,cAAT,GAA0BnhB,IAA1B;AACV,WAAK8wC,0BAAL;AACA,aAAO,KAAKpgC,UAAL,CAAgBkW,QAAhB,EAA0B,qBAA1B,CAAP;AACD;AACF;;AAED6qB,EAAAA,iBAAiB,GAAG;AAClB,UAAMryC,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEA,QAAI,KAAK5S,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,KAA8B,KAAK8oB,YAAL,CAAkB,GAAlB,CAAlC,EAA0D;AACxD,aAAO,KAAKowB,sBAAL,CAA4B,4BAA5B,EAA0D5xC,IAA1D,CAAP;AACD;;AAED,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAAC2E,IAAnB,CAAJ,EAA8B;AAC5B,YAAMuU,EAAE,GAAG,KAAKS,SAAL,EAAX;AACA,WAAK0F,IAAL;;AAEA,UAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,KAA8B,KAAK8oB,YAAL,CAAkB,GAAlB,CAAlC,EAA0D;AACxD,eAAO,KAAKowB,sBAAL,CAA4B,iCAA5B,EAA+D5xC,IAA/D,CAAP;AACD,OAFD,MAEO;AACLA,QAAAA,IAAI,CAACmS,GAAL,GAAW,KAAKmW,gBAAL,CAAsB5X,EAAtB,EAA0B,KAA1B,CAAX;AACA,eAAO,KAAKuhC,gCAAL,CAAsCjyC,IAAtC,EAA4C,KAA5C,CAAP;AACD;AACF;;AAED,SAAKwuC,gBAAL,CAAsBxuC,IAAtB,EAA4B,CAAC,UAAD,CAA5B,EAA0C,CAAC,SAAD,EAAY,UAAZ,EAAwB,SAAxB,EAAmC,WAAnC,EAAgD,QAAhD,EAA0D,QAA1D,EAAoE,UAApE,CAA1C,EAA2H4qC,QAAQ,CAACuB,2BAApI;AACA,UAAMmG,GAAG,GAAG,KAAKR,wBAAL,CAA8B9xC,IAA9B,CAAZ;;AAEA,QAAIsyC,GAAJ,EAAS;AACP,aAAOA,GAAP;AACD;;AAED,SAAK5jB,iBAAL,CAAuB1uB,IAAvB,EAA6B,KAA7B;;AAEA,QAAI,CAACA,IAAI,CAACqR,QAAN,IAAkBrR,IAAI,CAACmS,GAAL,CAASvR,IAAT,KAAkB,YAApC,KAAqDZ,IAAI,CAACmS,GAAL,CAAShb,IAAT,KAAkB,KAAlB,IAA2B6I,IAAI,CAACmS,GAAL,CAAShb,IAAT,KAAkB,KAAlG,KAA4G,KAAK82C,wBAAL,EAAhH,EAAiJ;AAC/IjuC,MAAAA,IAAI,CAACoR,IAAL,GAAYpR,IAAI,CAACmS,GAAL,CAAShb,IAArB;AACA,WAAKu3B,iBAAL,CAAuB1uB,IAAvB,EAA6B,KAA7B;AACD;;AAED,WAAO,KAAKiyC,gCAAL,CAAsCjyC,IAAtC,EAA4C,CAAC,CAACA,IAAI,CAACkyC,QAAnD,CAAP;AACD;;AAEDK,EAAAA,kBAAkB,GAAG;AACnB,UAAMvyC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAAC60B,OAAL,GAAe,KAAK2d,wBAAL,EAAf;AACA,WAAO,KAAKlhC,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDwyC,EAAAA,wBAAwB,GAAG;AACzB,SAAK/xB,MAAL,CAAYjpB,OAAO,CAACa,MAApB;AACA,UAAMw8B,OAAO,GAAG,KAAKua,WAAL,CAAiB,aAAjB,EAAgC,KAAKiD,iBAAL,CAAuB9D,IAAvB,CAA4B,IAA5B,CAAhC,CAAhB;AACA,SAAK9tB,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,WAAOq8B,OAAP;AACD;;AAED4d,EAAAA,qBAAqB,GAAG;AACtB,SAAK57B,IAAL;;AAEA,QAAI,KAAKiK,GAAL,CAAStpB,OAAO,CAACkD,OAAjB,CAAJ,EAA+B;AAC7B,aAAO,KAAK8nB,YAAL,CAAkB,UAAlB,CAAP;AACD;;AAED,QAAI,KAAKA,YAAL,CAAkB,UAAlB,CAAJ,EAAmC;AACjC,WAAK3L,IAAL;AACD;;AAED,QAAI,CAAC,KAAKtY,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,CAAL,EAAmC;AACjC,aAAO,KAAP;AACD;;AAED,SAAK6e,IAAL;;AAEA,QAAI,CAAC,KAAKm3B,cAAL,EAAL,EAA4B;AAC1B,aAAO,KAAP;AACD;;AAED,SAAKn3B,IAAL;AACA,WAAO,KAAKtY,KAAL,CAAW/G,OAAO,CAACqF,GAAnB,CAAP;AACD;;AAED61C,EAAAA,0BAA0B,GAAG;AAC3B,UAAM1yC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAAC7I,IAAL,GAAY,KAAKy5C,mBAAL,CAAyB5wC,IAAI,CAACjC,KAA9B,CAAZ;AACAiC,IAAAA,IAAI,CAAC6wC,UAAL,GAAkB,KAAK8B,qBAAL,CAA2Bn7C,OAAO,CAACqF,GAAnC,CAAlB;AACA,WAAO,KAAKyU,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED4yC,EAAAA,iBAAiB,GAAG;AAClB,UAAM5yC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAKsP,MAAL,CAAYjpB,OAAO,CAACa,MAApB;;AAEA,QAAI,KAAKkG,KAAL,CAAW/G,OAAO,CAACkD,OAAnB,CAAJ,EAAiC;AAC/BsF,MAAAA,IAAI,CAACkyC,QAAL,GAAgB,KAAKvyC,KAAL,CAAW1J,KAA3B;AACA,WAAK4gB,IAAL;AACA,WAAKgK,gBAAL,CAAsB,UAAtB;AACD,KAJD,MAIO,IAAI,KAAKwB,aAAL,CAAmB,UAAnB,CAAJ,EAAoC;AACzCriB,MAAAA,IAAI,CAACkyC,QAAL,GAAgB,IAAhB;AACD;;AAED,SAAKzxB,MAAL,CAAYjpB,OAAO,CAACQ,QAApB;AACAgI,IAAAA,IAAI,CAACwlB,aAAL,GAAqB,KAAKktB,0BAAL,EAArB;AACA1yC,IAAAA,IAAI,CAAC6yC,QAAL,GAAgB,KAAKxwB,aAAL,CAAmB,IAAnB,IAA2B,KAAKywB,WAAL,EAA3B,GAAgD,IAAhE;AACA,SAAKryB,MAAL,CAAYjpB,OAAO,CAACW,QAApB;;AAEA,QAAI,KAAKoG,KAAL,CAAW/G,OAAO,CAACkD,OAAnB,CAAJ,EAAiC;AAC/BsF,MAAAA,IAAI,CAACqS,QAAL,GAAgB,KAAK1S,KAAL,CAAW1J,KAA3B;AACA,WAAK4gB,IAAL;AACA,WAAK4J,MAAL,CAAYjpB,OAAO,CAACyB,QAApB;AACD,KAJD,MAIO,IAAI,KAAK6nB,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AACrC+G,MAAAA,IAAI,CAACqS,QAAL,GAAgB,IAAhB;AACD;;AAEDrS,IAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAKgxB,cAAL,EAAtB;AACA,SAAK9wB,SAAL;AACA,SAAKxB,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,WAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDgzC,EAAAA,gBAAgB,GAAG;AACjB,UAAMhzC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAACizC,YAAL,GAAoB,KAAKxD,oBAAL,CAA0B,mBAA1B,EAA+C,KAAKyD,uBAAL,CAA6B3E,IAA7B,CAAkC,IAAlC,CAA/C,EAAwF,IAAxF,EAA8F,KAA9F,CAApB;AACA,QAAI4E,mBAAmB,GAAG,KAA1B;AACA,QAAIC,eAAe,GAAG,IAAtB;AACApzC,IAAAA,IAAI,CAACizC,YAAL,CAAkBznC,OAAlB,CAA0B6nC,WAAW,IAAI;AACvC,UAAIC,gBAAJ;;AAEA,UAAI;AACF1yC,QAAAA;AADE,UAEAyyC,WAFJ;;AAIA,UAAIF,mBAAmB,IAAIvyC,IAAI,KAAK,YAAhC,IAAgDA,IAAI,KAAK,gBAAzD,IAA6E,EAAEA,IAAI,KAAK,oBAAT,IAAiCyyC,WAAW,CAAChhC,QAA/C,CAAjF,EAA2I;AACzI,aAAKlG,KAAL,CAAWknC,WAAW,CAACt1C,KAAvB,EAA8B6sC,QAAQ,CAAC6B,0BAAvC;AACD;;AAED0G,MAAAA,mBAAmB,GAAGA,mBAAmB,IAAIvyC,IAAI,KAAK,oBAAT,IAAiCyyC,WAAW,CAAChhC,QAApE,IAAgFzR,IAAI,KAAK,gBAA/G;;AAEA,UAAIA,IAAI,KAAK,YAAb,EAA2B;AACzByyC,QAAAA,WAAW,GAAGA,WAAW,CAACtxB,cAA1B;AACAnhB,QAAAA,IAAI,GAAGyyC,WAAW,CAACzyC,IAAnB;AACD;;AAED,YAAM2yC,SAAS,GAAG3yC,IAAI,KAAK,oBAA3B;AACAwyC,MAAAA,eAAe,GAAG,CAACE,gBAAgB,GAAGF,eAApB,KAAwC,IAAxC,GAA+CE,gBAA/C,GAAkEC,SAApF;;AAEA,UAAIH,eAAe,KAAKG,SAAxB,EAAmC;AACjC,aAAKpnC,KAAL,CAAWknC,WAAW,CAACt1C,KAAvB,EAA8B6sC,QAAQ,CAAC0B,gCAAvC;AACD;AACF,KAxBD;AAyBA,WAAO,KAAKh7B,UAAL,CAAgBtR,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDkzC,EAAAA,uBAAuB,GAAG;AACxB,UAAM;AACJn1C,MAAAA,KAAK,EAAE6S,QADH;AAEJ/E,MAAAA;AAFI,QAGF,KAAKlM,KAHT;AAIA,UAAMiiB,IAAI,GAAG,KAAKd,GAAL,CAAStpB,OAAO,CAAC6B,QAAjB,CAAb;AACA,QAAIuH,IAAI,GAAG,KAAKkyC,WAAL,EAAX;AACA,UAAMzgC,QAAQ,GAAG,KAAKyO,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAjB;AACA,UAAMu6C,OAAO,GAAG,KAAK1yB,GAAL,CAAStpB,OAAO,CAACsB,KAAjB,CAAhB;;AAEA,QAAI06C,OAAJ,EAAa;AACX,YAAMC,WAAW,GAAG,KAAKrgC,eAAL,CAAqBxS,IAArB,CAApB;AACA6yC,MAAAA,WAAW,CAACphC,QAAZ,GAAuBA,QAAvB;;AAEA,UAAIzR,IAAI,CAACA,IAAL,KAAc,iBAAd,IAAmC,CAACA,IAAI,CAACwP,cAAzC,IAA2DxP,IAAI,CAACsvC,QAAL,CAActvC,IAAd,KAAuB,YAAtF,EAAoG;AAClG6yC,QAAAA,WAAW,CAAC/8C,KAAZ,GAAoBkK,IAAI,CAACsvC,QAAzB;AACD,OAFD,MAEO;AACL,aAAK/jC,KAAL,CAAWvL,IAAI,CAAC7C,KAAhB,EAAuB6sC,QAAQ,CAACyB,uBAAhC;AACAoH,QAAAA,WAAW,CAAC/8C,KAAZ,GAAoBkK,IAApB;AACD;;AAED6yC,MAAAA,WAAW,CAAC/qB,WAAZ,GAA0B,KAAKoqB,WAAL,EAA1B;AACAlyC,MAAAA,IAAI,GAAG,KAAK0Q,UAAL,CAAgBmiC,WAAhB,EAA6B,oBAA7B,CAAP;AACD,KAbD,MAaO,IAAIphC,QAAJ,EAAc;AACnB,YAAMqhC,gBAAgB,GAAG,KAAKtgC,eAAL,CAAqBxS,IAArB,CAAzB;AACA8yC,MAAAA,gBAAgB,CAAC3xB,cAAjB,GAAkCnhB,IAAlC;AACAA,MAAAA,IAAI,GAAG,KAAK0Q,UAAL,CAAgBoiC,gBAAhB,EAAkC,gBAAlC,CAAP;AACD;;AAED,QAAI9xB,IAAJ,EAAU;AACR,YAAM+xB,QAAQ,GAAG,KAAKrlC,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAjB;AACA8nC,MAAAA,QAAQ,CAAC5xB,cAAT,GAA0BnhB,IAA1B;AACAA,MAAAA,IAAI,GAAG,KAAK0Q,UAAL,CAAgBqiC,QAAhB,EAA0B,YAA1B,CAAP;AACD;;AAED,WAAO/yC,IAAP;AACD;;AAEDgzC,EAAAA,wBAAwB,GAAG;AACzB,UAAM5zC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAKsP,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;AACAsH,IAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAK+wB,WAAL,EAAtB;AACA,SAAKryB,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACA,WAAO,KAAK2Y,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAED6zC,EAAAA,gCAAgC,CAACjzC,IAAD,EAAOkzC,QAAP,EAAiB;AAC/C,UAAM9zC,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEA,QAAIvQ,IAAI,KAAK,mBAAb,EAAkC;AAChCZ,MAAAA,IAAI,CAAC8zC,QAAL,GAAgB,CAAC,CAACA,QAAlB;AACA,UAAIA,QAAJ,EAAc,KAAKj9B,IAAL;AACd,WAAKA,IAAL;AACD;;AAED,SAAKq6B,eAAL,CAAqB15C,OAAO,CAAC2B,KAA7B,EAAoC6G,IAApC;AACA,WAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsBY,IAAtB,CAAP;AACD;;AAEDmzC,EAAAA,sBAAsB,GAAG;AACvB,UAAM/zC,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEAnR,IAAAA,IAAI,CAACq0B,OAAL,GAAe,CAAC,MAAM;AACpB,cAAQ,KAAK10B,KAAL,CAAWiB,IAAnB;AACE,aAAKpJ,OAAO,CAACC,GAAb;AACA,aAAKD,OAAO,CAACE,MAAb;AACA,aAAKF,OAAO,CAACK,MAAb;AACA,aAAKL,OAAO,CAACmF,KAAb;AACA,aAAKnF,OAAO,CAACoF,MAAb;AACE,iBAAO,KAAKyT,aAAL,EAAP;;AAEF;AACE,gBAAM,KAAKwS,UAAL,EAAN;AATJ;AAWD,KAZc,GAAf;;AAcA,WAAO,KAAKvR,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDg0C,EAAAA,0BAA0B,GAAG;AAC3B,UAAMh0C,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAACq0B,OAAL,GAAe,KAAK4f,aAAL,CAAmB,KAAnB,CAAf;AACA,WAAO,KAAK3iC,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDk0C,EAAAA,yBAAyB,GAAG;AAC1B,QAAI,KAAKv0C,KAAL,CAAW6gB,MAAf,EAAuB,OAAO,KAAKsyB,WAAL,EAAP;AACvB,WAAO,MAAMoB,yBAAN,EAAP;AACD;;AAEDC,EAAAA,kCAAkC,GAAG;AACnC,UAAMC,WAAW,GAAG,KAAK5D,mBAAL,EAApB;;AAEA,QAAI,KAAKhuB,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKzN,qBAAL,EAAhC,EAA8D;AAC5D,aAAO,KAAKo7B,wBAAL,CAA8BiE,WAA9B,CAAP;AACD,KAFD,MAEO;AACL,aAAOA,WAAP;AACD;AACF;;AAEDC,EAAAA,mBAAmB,GAAG;AACpB,YAAQ,KAAK10C,KAAL,CAAWiB,IAAnB;AACE,WAAKpJ,OAAO,CAACL,IAAb;AACA,WAAKK,OAAO,CAACwF,KAAb;AACA,WAAKxF,OAAO,CAACkF,KAAb;AACE;AACE,gBAAMkE,IAAI,GAAG,KAAKrC,KAAL,CAAW/G,OAAO,CAACwF,KAAnB,IAA4B,eAA5B,GAA8C,KAAKuB,KAAL,CAAW/G,OAAO,CAACkF,KAAnB,IAA4B,eAA5B,GAA8CkxC,mBAAmB,CAAC,KAAKjuC,KAAL,CAAW1J,KAAZ,CAA5H;;AAEA,cAAI2K,IAAI,KAAKF,SAAT,IAAsB,KAAK4zC,iBAAL,OAA6B,EAAvD,EAA2D;AACzD,kBAAMt0C,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,iBAAK0F,IAAL;AACA,mBAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsBY,IAAtB,CAAP;AACD;;AAED,iBAAO,KAAKqvC,oBAAL,EAAP;AACD;;AAEH,WAAKz4C,OAAO,CAACK,MAAb;AACA,WAAKL,OAAO,CAACC,GAAb;AACA,WAAKD,OAAO,CAACE,MAAb;AACA,WAAKF,OAAO,CAACmF,KAAb;AACA,WAAKnF,OAAO,CAACoF,MAAb;AACE,eAAO,KAAKm3C,sBAAL,EAAP;;AAEF,WAAKv8C,OAAO,CAACkD,OAAb;AACE,YAAI,KAAKiF,KAAL,CAAW1J,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,gBAAM+J,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,gBAAMuhB,SAAS,GAAG,KAAKvM,SAAL,EAAlB;;AAEA,cAAIuM,SAAS,CAAC9xB,IAAV,KAAmBpJ,OAAO,CAACC,GAA3B,IAAkCi7B,SAAS,CAAC9xB,IAAV,KAAmBpJ,OAAO,CAACE,MAAjE,EAAyE;AACvE,kBAAM,KAAKmrB,UAAL,EAAN;AACD;;AAED7iB,UAAAA,IAAI,CAACq0B,OAAL,GAAe,KAAKkgB,eAAL,EAAf;AACA,iBAAO,KAAKjjC,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED;;AAEF,WAAKxI,OAAO,CAAC4E,KAAb;AACE,eAAO,KAAK+3C,kCAAL,EAAP;;AAEF,WAAK38C,OAAO,CAACuF,OAAb;AACE,eAAO,KAAK0zC,gBAAL,EAAP;;AAEF,WAAKj5C,OAAO,CAACiF,OAAb;AACE,eAAO,KAAKmzC,iBAAL,EAAP;;AAEF,WAAKp4C,OAAO,CAACa,MAAb;AACE,eAAO,KAAK05C,WAAL,CAAiB,KAAKU,qBAAL,CAA2BlE,IAA3B,CAAgC,IAAhC,CAAjB,IAA0D,KAAKqE,iBAAL,EAA1D,GAAqF,KAAKL,kBAAL,EAA5F;;AAEF,WAAK/6C,OAAO,CAACQ,QAAb;AACE,eAAO,KAAKg7C,gBAAL,EAAP;;AAEF,WAAKx7C,OAAO,CAACkB,MAAb;AACE,eAAO,KAAKk7C,wBAAL,EAAP;;AAEF,WAAKp8C,OAAO,CAAC8B,SAAb;AACE,eAAO,KAAK06C,0BAAL,EAAP;AAzDJ;;AA4DA,UAAM,KAAKnxB,UAAL,EAAN;AACD;;AAED2xB,EAAAA,wBAAwB,GAAG;AACzB,QAAI5zC,IAAI,GAAG,KAAKyzC,mBAAL,EAAX;;AAEA,WAAO,CAAC,KAAKt/B,qBAAL,EAAD,IAAiC,KAAK+L,GAAL,CAAStpB,OAAO,CAACQ,QAAjB,CAAxC,EAAoE;AAClE,UAAI,KAAKuG,KAAL,CAAW/G,OAAO,CAACW,QAAnB,CAAJ,EAAkC;AAChC,cAAM6H,IAAI,GAAG,KAAKoT,eAAL,CAAqBxS,IAArB,CAAb;AACAZ,QAAAA,IAAI,CAAC0oB,WAAL,GAAmB9nB,IAAnB;AACA,aAAK6f,MAAL,CAAYjpB,OAAO,CAACW,QAApB;AACAyI,QAAAA,IAAI,GAAG,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsB,aAAtB,CAAP;AACD,OALD,MAKO;AACL,cAAMA,IAAI,GAAG,KAAKoT,eAAL,CAAqBxS,IAArB,CAAb;AACAZ,QAAAA,IAAI,CAAC2oB,UAAL,GAAkB/nB,IAAlB;AACAZ,QAAAA,IAAI,CAAC4oB,SAAL,GAAiB,KAAKkqB,WAAL,EAAjB;AACA,aAAKryB,MAAL,CAAYjpB,OAAO,CAACW,QAApB;AACAyI,QAAAA,IAAI,GAAG,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAP;AACD;AACF;;AAED,WAAOY,IAAP;AACD;;AAED6zC,EAAAA,mBAAmB,CAACpnB,QAAD,EAAW;AAC5B,UAAMrtB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0P,gBAAL,CAAsBwM,QAAtB;AACArtB,IAAAA,IAAI,CAACqtB,QAAL,GAAgBA,QAAhB;AACArtB,IAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAK2yB,2BAAL,EAAtB;;AAEA,QAAIrnB,QAAQ,KAAK,UAAjB,EAA6B;AAC3B,WAAKsnB,gCAAL,CAAsC30C,IAAtC;AACD;;AAED,WAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED20C,EAAAA,gCAAgC,CAAC30C,IAAD,EAAO;AACrC,YAAQA,IAAI,CAAC+hB,cAAL,CAAoBnhB,IAA5B;AACE,WAAK,aAAL;AACA,WAAK,aAAL;AACE;;AAEF;AACE,aAAKuL,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB6sC,QAAQ,CAAC0C,kBAAhC;AANJ;AAQD;;AAEDsH,EAAAA,gBAAgB,GAAG;AACjB,UAAM50C,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0P,gBAAL,CAAsB,OAAtB;AACA,UAAM2E,aAAa,GAAG,KAAKrU,SAAL,EAAtB;AACAqU,IAAAA,aAAa,CAACruB,IAAd,GAAqB,KAAKy5C,mBAAL,CAAyBprB,aAAa,CAACznB,KAAvC,CAArB;AACAiC,IAAAA,IAAI,CAACwlB,aAAL,GAAqB,KAAKlU,UAAL,CAAgBkU,aAAhB,EAA+B,iBAA/B,CAArB;AACA,WAAO,KAAKlU,UAAL,CAAgBtR,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED00C,EAAAA,2BAA2B,GAAG;AAC5B,UAAMrnB,QAAQ,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgCwnB,IAAhC,CAAqCC,EAAE,IAAI,KAAKtyB,YAAL,CAAkBsyB,EAAlB,CAA3C,CAAjB;AACA,WAAOznB,QAAQ,GAAG,KAAKonB,mBAAL,CAAyBpnB,QAAzB,CAAH,GAAwC,KAAK7K,YAAL,CAAkB,OAAlB,IAA6B,KAAKoyB,gBAAL,EAA7B,GAAuD,KAAKJ,wBAAL,EAA9G;AACD;;AAEDO,EAAAA,8BAA8B,CAAC3jC,IAAD,EAAO4jC,oBAAP,EAA6B3nB,QAA7B,EAAuC;AACnE,UAAMrtB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,UAAM8jC,kBAAkB,GAAG,KAAKn0B,GAAL,CAASuM,QAAT,CAA3B;AACA,UAAMzZ,KAAK,GAAG,EAAd;;AAEA,OAAG;AACDA,MAAAA,KAAK,CAAC/T,IAAN,CAAWm1C,oBAAoB,EAA/B;AACD,KAFD,QAES,KAAKl0B,GAAL,CAASuM,QAAT,CAFT;;AAIA,QAAIzZ,KAAK,CAACtU,MAAN,KAAiB,CAAjB,IAAsB,CAAC21C,kBAA3B,EAA+C;AAC7C,aAAOrhC,KAAK,CAAC,CAAD,CAAZ;AACD;;AAED5T,IAAAA,IAAI,CAAC4T,KAAL,GAAaA,KAAb;AACA,WAAO,KAAKtC,UAAL,CAAgBtR,IAAhB,EAAsBoR,IAAtB,CAAP;AACD;;AAED8jC,EAAAA,+BAA+B,GAAG;AAChC,WAAO,KAAKH,8BAAL,CAAoC,oBAApC,EAA0D,KAAKL,2BAAL,CAAiCnG,IAAjC,CAAsC,IAAtC,CAA1D,EAAuG/2C,OAAO,CAAC8C,UAA/G,CAAP;AACD;;AAED66C,EAAAA,wBAAwB,GAAG;AACzB,WAAO,KAAKJ,8BAAL,CAAoC,aAApC,EAAmD,KAAKG,+BAAL,CAAqC3G,IAArC,CAA0C,IAA1C,CAAnD,EAAoG/2C,OAAO,CAAC4C,SAA5G,CAAP;AACD;;AAEDg7C,EAAAA,uBAAuB,GAAG;AACxB,QAAI,KAAK5zB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,aAAO,IAAP;AACD;;AAED,WAAO,KAAKjjB,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,KAA8B,KAAKq5C,WAAL,CAAiB,KAAKsD,oCAAL,CAA0C9G,IAA1C,CAA+C,IAA/C,CAAjB,CAArC;AACD;;AAED+G,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAK/2C,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4B,KAAKoH,KAAL,CAAW/G,OAAO,CAAC4E,KAAnB,CAAhC,EAA2D;AACzD,WAAKya,IAAL;AACA,aAAO,IAAP;AACD;;AAED,QAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,UAAIk9C,iBAAiB,GAAG,CAAxB;AACA,WAAK1+B,IAAL;;AAEA,aAAO0+B,iBAAiB,GAAG,CAA3B,EAA8B;AAC5B,YAAI,KAAKh3C,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,YAAEk9C,iBAAF;AACD,SAFD,MAEO,IAAI,KAAKh3C,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAJ,EAAgC;AACrC,YAAE+8C,iBAAF;AACD;;AAED,aAAK1+B,IAAL;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,CAAJ,EAAkC;AAChC,UAAIu9C,iBAAiB,GAAG,CAAxB;AACA,WAAK1+B,IAAL;;AAEA,aAAO0+B,iBAAiB,GAAG,CAA3B,EAA8B;AAC5B,YAAI,KAAKh3C,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,CAAJ,EAAkC;AAChC,YAAEu9C,iBAAF;AACD,SAFD,MAEO,IAAI,KAAKh3C,KAAL,CAAW/G,OAAO,CAACW,QAAnB,CAAJ,EAAkC;AACvC,YAAEo9C,iBAAF;AACD;;AAED,aAAK1+B,IAAL;AACD;;AAED,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDw+B,EAAAA,oCAAoC,GAAG;AACrC,SAAKx+B,IAAL;;AAEA,QAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,KAA8B,KAAK4F,KAAL,CAAW/G,OAAO,CAAC6B,QAAnB,CAAlC,EAAgE;AAC9D,aAAO,IAAP;AACD;;AAED,QAAI,KAAKi8C,oBAAL,EAAJ,EAAiC;AAC/B,UAAI,KAAK/2C,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,KAA6B,KAAKyF,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,CAA7B,IAA0D,KAAK2F,KAAL,CAAW/G,OAAO,CAACyB,QAAnB,CAA1D,IAA0F,KAAKsF,KAAL,CAAW/G,OAAO,CAACmC,EAAnB,CAA9F,EAAsH;AACpH,eAAO,IAAP;AACD;;AAED,UAAI,KAAK4E,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,CAAJ,EAAgC;AAC9B,aAAKke,IAAL;;AAEA,YAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAAC2B,KAAnB,CAAJ,EAA+B;AAC7B,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WAAO,KAAP;AACD;;AAEDq4C,EAAAA,oCAAoC,CAACL,WAAD,EAAc;AAChD,WAAO,KAAKqE,QAAL,CAAc,MAAM;AACzB,YAAMC,CAAC,GAAG,KAAKtkC,SAAL,EAAV;AACA,WAAKsP,MAAL,CAAY0wB,WAAZ;AACA,YAAMnxC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,YAAMo/B,OAAO,GAAG,CAAC,CAAC,KAAKjC,UAAL,CAAgB,KAAKoH,2BAAL,CAAiCnH,IAAjC,CAAsC,IAAtC,CAAhB,CAAlB;;AAEA,UAAIgC,OAAO,IAAI,KAAKhyC,KAAL,CAAW/G,OAAO,CAAC4E,KAAnB,CAAf,EAA0C;AACxC,YAAIu5C,iBAAiB,GAAG,KAAKxB,kCAAL,EAAxB;;AAEA,YAAIwB,iBAAiB,CAAC/0C,IAAlB,KAA2B,YAA/B,EAA6C;AAC3CZ,UAAAA,IAAI,CAACqwC,aAAL,GAAqBsF,iBAArB;AACA31C,UAAAA,IAAI,CAACuwC,OAAL,GAAe,IAAf;AACAoF,UAAAA,iBAAiB,GAAG,KAAKrkC,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAApB;AACD,SAJD,MAIO;AACL,eAAKmxB,0BAAL,CAAgCwkB,iBAAhC,EAAmD31C,IAAnD;AACA21C,UAAAA,iBAAiB,CAACpF,OAAlB,GAA4B,IAA5B;AACD;;AAEDkF,QAAAA,CAAC,CAAC1zB,cAAF,GAAmB4zB,iBAAnB;AACA,eAAO,KAAKrkC,UAAL,CAAgBmkC,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAED,YAAMG,qBAAqB,GAAG,KAAK5H,cAAL,MAAyB,KAAKM,UAAL,CAAgB,KAAKuH,0BAAL,CAAgCtH,IAAhC,CAAqC,IAArC,CAAhB,CAAvD;;AAEA,UAAI,CAACqH,qBAAL,EAA4B;AAC1B,YAAI,CAACrF,OAAL,EAAc;AACZ,iBAAO,KAAKD,qBAAL,CAA2B,KAA3B,EAAkCmF,CAAlC,CAAP;AACD;;AAEDz1C,QAAAA,IAAI,CAACqwC,aAAL,GAAqB,KAAKhvB,eAAL,EAArB;AACArhB,QAAAA,IAAI,CAACuwC,OAAL,GAAeA,OAAf;AACAkF,QAAAA,CAAC,CAAC1zB,cAAF,GAAmB,KAAKzQ,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAnB;AACA,eAAO,KAAKsR,UAAL,CAAgBmkC,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAED,YAAM70C,IAAI,GAAG,KAAK0vC,qBAAL,CAA2B,KAA3B,CAAb;AACAtwC,MAAAA,IAAI,CAACqwC,aAAL,GAAqBuF,qBAArB;AACA51C,MAAAA,IAAI,CAAC+hB,cAAL,GAAsBnhB,IAAtB;AACAZ,MAAAA,IAAI,CAACuwC,OAAL,GAAeA,OAAf;AACAkF,MAAAA,CAAC,CAAC1zB,cAAF,GAAmB,KAAKzQ,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAnB;AACA,aAAO,KAAKsR,UAAL,CAAgBmkC,CAAhB,EAAmB,kBAAnB,CAAP;AACD,KAzCM,CAAP;AA0CD;;AAEDK,EAAAA,uCAAuC,GAAG;AACxC,WAAO,KAAKv3C,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,IAA4B,KAAK04C,oCAAL,CAA0Ch6C,OAAO,CAACsB,KAAlD,CAA5B,GAAuF4H,SAA9F;AACD;;AAEDsxC,EAAAA,wBAAwB,GAAG;AACzB,WAAO,KAAKzzC,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,IAA4B,KAAKw3C,qBAAL,EAA5B,GAA2D5vC,SAAlE;AACD;;AAEDqyC,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKjC,kBAAL,CAAwBt5C,OAAO,CAACsB,KAAhC,CAAP;AACD;;AAED+8C,EAAAA,0BAA0B,GAAG;AAC3B,UAAMnlC,EAAE,GAAG,KAAK2Q,eAAL,EAAX;;AAEA,QAAI,KAAKmB,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKzN,qBAAL,EAAhC,EAA8D;AAC5D,WAAK8B,IAAL;AACA,aAAOnG,EAAP;AACD;AACF;;AAEDglC,EAAAA,2BAA2B,GAAG;AAC5B,QAAI,CAAC,KAAKn3C,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAD,IAA6B,KAAKwI,KAAL,CAAW1J,KAAX,KAAqB,SAAlD,IAA+D,KAAK8e,qBAAL,EAAnE,EAAiG;AAC/F,aAAO,KAAP;AACD;;AAED,UAAMghC,WAAW,GAAG,KAAKp2C,KAAL,CAAWo2C,WAA/B;AACA,SAAKl/B,IAAL;;AAEA,QAAI,CAAC,KAAKtY,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAD,IAA6B,CAAC,KAAKoH,KAAL,CAAW/G,OAAO,CAAC4E,KAAnB,CAAlC,EAA6D;AAC3D,aAAO,KAAP;AACD;;AAED,QAAI25C,WAAJ,EAAiB;AACf,WAAK5pC,KAAL,CAAW,KAAKxM,KAAL,CAAWmM,YAAtB,EAAoCjK,aAAa,CAACqD,0BAAlD,EAA8E,SAA9E;AACD;;AAED,WAAO,IAAP;AACD;;AAEDorC,EAAAA,qBAAqB,CAAC0F,QAAQ,GAAG,IAAZ,EAAkBP,CAAC,GAAG,KAAKtkC,SAAL,EAAtB,EAAwC;AAC3D,SAAKqkC,QAAL,CAAc,MAAM;AAClB,UAAIQ,QAAJ,EAAc,KAAKv1B,MAAL,CAAYjpB,OAAO,CAACsB,KAApB;AACd28C,MAAAA,CAAC,CAAC1zB,cAAF,GAAmB,KAAK+wB,WAAL,EAAnB;AACD,KAHD;AAIA,WAAO,KAAKxhC,UAAL,CAAgBmkC,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAED3C,EAAAA,WAAW,GAAG;AACZnI,IAAAA,MAAM,CAAC,KAAKhrC,KAAL,CAAW6gB,MAAZ,CAAN;AACA,UAAM5f,IAAI,GAAG,KAAKq1C,yBAAL,EAAb;;AAEA,QAAI,KAAKlhC,qBAAL,MAAgC,CAAC,KAAK+L,GAAL,CAAStpB,OAAO,CAAC+E,QAAjB,CAArC,EAAiE;AAC/D,aAAOqE,IAAP;AACD;;AAED,UAAMZ,IAAI,GAAG,KAAKoT,eAAL,CAAqBxS,IAArB,CAAb;AACAZ,IAAAA,IAAI,CAACk2C,SAAL,GAAiBt1C,IAAjB;AACAZ,IAAAA,IAAI,CAACm2C,WAAL,GAAmB,KAAKF,yBAAL,EAAnB;AACA,SAAKx1B,MAAL,CAAYjpB,OAAO,CAACyB,QAApB;AACA+G,IAAAA,IAAI,CAACo2C,QAAL,GAAgB,KAAKtD,WAAL,EAAhB;AACA,SAAKryB,MAAL,CAAYjpB,OAAO,CAACsB,KAApB;AACAkH,IAAAA,IAAI,CAACq2C,SAAL,GAAiB,KAAKvD,WAAL,EAAjB;AACA,WAAO,KAAKxhC,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDs2C,EAAAA,8BAA8B,GAAG;AAC/B,WAAO,KAAK9zB,YAAL,CAAkB,UAAlB,KAAiC,KAAK2D,SAAL,GAAiBvlB,IAAjB,KAA0BpJ,OAAO,CAAC2E,IAA1E;AACD;;AAED85C,EAAAA,yBAAyB,GAAG;AAC1B,QAAI,KAAKb,uBAAL,EAAJ,EAAoC;AAClC,aAAO,KAAKvB,gCAAL,CAAsC,gBAAtC,CAAP;AACD;;AAED,QAAI,KAAKt1C,KAAL,CAAW/G,OAAO,CAAC2E,IAAnB,CAAJ,EAA8B;AAC5B,aAAO,KAAK03C,gCAAL,CAAsC,mBAAtC,CAAP;AACD,KAFD,MAEO,IAAI,KAAKyC,8BAAL,EAAJ,EAA2C;AAChD,aAAO,KAAKzC,gCAAL,CAAsC,mBAAtC,EAA2D,IAA3D,CAAP;AACD;;AAED,WAAO,KAAKsB,wBAAL,EAAP;AACD;;AAEDoB,EAAAA,oBAAoB,GAAG;AACrB,UAAMv2C,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEA,UAAMnV,MAAM,GAAG,KAAKi1C,6BAAL,EAAf;;AAEAjxC,IAAAA,IAAI,CAAC+hB,cAAL,GAAsB/lB,MAAM,IAAI,KAAKw6C,mBAAL,EAAhC;AACA,SAAK/wB,gBAAL,CAAsB,GAAtB;AACAzlB,IAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAKgmC,eAAL,EAAlB;AACA,WAAO,KAAKjjC,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDy2C,EAAAA,qBAAqB,CAACC,UAAD,EAAa;AAChC,UAAMC,aAAa,GAAG,KAAKh3C,KAAL,CAAW5B,KAAjC;AACA,UAAM64C,aAAa,GAAG,KAAKtH,oBAAL,CAA0B,uBAA1B,EAAmD,KAAKuH,kCAAL,CAAwCtI,IAAxC,CAA6C,IAA7C,CAAnD,CAAtB;;AAEA,QAAI,CAACqI,aAAa,CAACt3C,MAAnB,EAA2B;AACzB,WAAK6M,KAAL,CAAWwqC,aAAX,EAA0B/L,QAAQ,CAACY,uBAAnC,EAA4DkL,UAA5D;AACD;;AAED,WAAOE,aAAP;AACD;;AAEDC,EAAAA,kCAAkC,GAAG;AACnC,UAAM72C,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAKuhC,iBAAL,CAAuB,KAAvB,CAAlB;;AAEA,QAAI,KAAKtuB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BxhB,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAK2/B,oBAAL,EAAtB;AACD;;AAED,WAAO,KAAKz+B,UAAL,CAAgBtR,IAAhB,EAAsB,+BAAtB,CAAP;AACD;;AAED82C,EAAAA,2BAA2B,CAAC92C,IAAD,EAAO;AAChCA,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2Q,eAAL,EAAV;AACA,SAAK2M,SAAL,CAAehuB,IAAI,CAAC0Q,EAApB,EAAwB,kCAAxB,EAA4D8H,iBAA5D;AACAxY,IAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAK2gC,wBAAL,EAAtB;;AAEA,QAAI,KAAKjwB,GAAL,CAAStpB,OAAO,CAAC+E,QAAjB,CAAJ,EAAgC;AAC9ByD,MAAAA,IAAI,CAAC2jB,OAAL,GAAe,KAAK8yB,qBAAL,CAA2B,SAA3B,CAAf;AACD;;AAED,UAAM51C,IAAI,GAAG,KAAKsQ,SAAL,EAAb;AACAtQ,IAAAA,IAAI,CAACA,IAAL,GAAY,KAAK20C,QAAL,CAAc,KAAKhD,wBAAL,CAA8BjE,IAA9B,CAAmC,IAAnC,CAAd,CAAZ;AACAvuC,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAKyQ,UAAL,CAAgBzQ,IAAhB,EAAsB,iBAAtB,CAAZ;AACA,WAAO,KAAKyQ,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED+2C,EAAAA,2BAA2B,CAAC/2C,IAAD,EAAO;AAChCA,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2Q,eAAL,EAAV;AACA,SAAK2M,SAAL,CAAehuB,IAAI,CAAC0Q,EAApB,EAAwB,uBAAxB,EAAiD+H,YAAjD;AACAzY,IAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAK2gC,wBAAL,EAAtB;AACA/wC,IAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAKyzB,QAAL,CAAc,MAAM;AACxC,WAAK/0B,MAAL,CAAYjpB,OAAO,CAACmC,EAApB;;AAEA,UAAI,KAAK6oB,YAAL,CAAkB,WAAlB,KAAkC,KAAK2D,SAAL,GAAiBvlB,IAAjB,KAA0BpJ,OAAO,CAACwB,GAAxE,EAA6E;AAC3E,cAAMgH,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,aAAK0F,IAAL;AACA,eAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAED,aAAO,KAAK8yC,WAAL,EAAP;AACD,KAVqB,CAAtB;AAWA,SAAK7wB,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDg3C,EAAAA,aAAa,CAACC,EAAD,EAAK;AAChB,UAAMC,UAAU,GAAG,KAAKv3C,KAAL,CAAW4U,OAA9B;AACA,SAAK5U,KAAL,CAAW4U,OAAX,GAAqB,CAAC2iC,UAAU,CAAC,CAAD,CAAX,CAArB;;AAEA,QAAI;AACF,aAAOD,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKt3C,KAAL,CAAW4U,OAAX,GAAqB2iC,UAArB;AACD;AACF;;AAED1B,EAAAA,QAAQ,CAACyB,EAAD,EAAK;AACX,UAAM12B,SAAS,GAAG,KAAK5gB,KAAL,CAAW6gB,MAA7B;AACA,SAAK7gB,KAAL,CAAW6gB,MAAX,GAAoB,IAApB;;AAEA,QAAI;AACF,aAAOy2B,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKt3C,KAAL,CAAW6gB,MAAX,GAAoBD,SAApB;AACD;AACF;;AAEDuwB,EAAAA,kBAAkB,CAACz5C,KAAD,EAAQ;AACxB,WAAO,CAAC,KAAKkH,KAAL,CAAWlH,KAAX,CAAD,GAAqBqJ,SAArB,GAAiC,KAAK81C,mBAAL,EAAxC;AACD;;AAED7D,EAAAA,qBAAqB,CAACt7C,KAAD,EAAQ;AAC3B,WAAO,KAAK8/C,iBAAL,CAAuB,MAAM,KAAK12B,MAAL,CAAYppB,KAAZ,CAA7B,CAAP;AACD;;AAEDm/C,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAKW,iBAAL,CAAuB,MAAM,KAAKtgC,IAAL,EAA7B,CAAP;AACD;;AAEDsgC,EAAAA,iBAAiB,CAACF,EAAD,EAAK;AACpB,WAAO,KAAKzB,QAAL,CAAc,MAAM;AACzByB,MAAAA,EAAE;AACF,aAAO,KAAKnE,WAAL,EAAP;AACD,KAHM,CAAP;AAID;;AAEDsE,EAAAA,iBAAiB,GAAG;AAClB,UAAMp3C,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAKnS,KAAL,CAAW/G,OAAO,CAACK,MAAnB,IAA6B,KAAKwY,aAAL,EAA7B,GAAoD,KAAKgR,eAAL,CAAqB,IAArB,CAA9D;;AAEA,QAAI,KAAKP,GAAL,CAAStpB,OAAO,CAACmC,EAAjB,CAAJ,EAA0B;AACxBqG,MAAAA,IAAI,CAACq3C,WAAL,GAAmB,KAAKrsB,uBAAL,EAAnB;AACD;;AAED,WAAO,KAAK1Z,UAAL,CAAgBtR,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDs3C,EAAAA,sBAAsB,CAACt3C,IAAD,EAAO0pC,OAAP,EAAgB;AACpC,QAAIA,OAAJ,EAAa1pC,IAAI,CAACof,KAAL,GAAa,IAAb;AACbpf,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2Q,eAAL,EAAV;AACA,SAAK2M,SAAL,CAAehuB,IAAI,CAAC0Q,EAApB,EAAwB,6BAAxB,EAAuDg5B,OAAO,GAAG5wB,kBAAH,GAAwBJ,YAAtF;AACA,SAAK+H,MAAL,CAAYjpB,OAAO,CAACa,MAApB;AACA2H,IAAAA,IAAI,CAAC60B,OAAL,GAAe,KAAKya,oBAAL,CAA0B,aAA1B,EAAyC,KAAK8H,iBAAL,CAAuB7I,IAAvB,CAA4B,IAA5B,CAAzC,CAAf;AACA,SAAK9tB,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACA,WAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDu3C,EAAAA,kBAAkB,GAAG;AACnB,UAAMv3C,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK4J,KAAL,CAAWF,KAAX,CAAiB/D,WAAjB;AACA,SAAK2J,MAAL,CAAYjpB,OAAO,CAACa,MAApB;AACA,SAAKm/C,2BAAL,CAAiCx3C,IAAI,CAACa,IAAL,GAAY,EAA7C,EAAiDH,SAAjD,EAA4D,IAA5D,EAAkElJ,OAAO,CAACgB,MAA1E;AACA,SAAKuiB,KAAL,CAAWD,IAAX;AACA,WAAO,KAAKxJ,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDy3C,EAAAA,mCAAmC,CAACz3C,IAAD,EAAO03C,MAAM,GAAG,KAAhB,EAAuB;AACxD13C,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2Q,eAAL,EAAV;;AAEA,QAAI,CAACq2B,MAAL,EAAa;AACX,WAAK1pB,SAAL,CAAehuB,IAAI,CAAC0Q,EAApB,EAAwB,iCAAxB,EAA2DqI,iBAA3D;AACD;;AAED,QAAI,KAAK+H,GAAL,CAAStpB,OAAO,CAACwB,GAAjB,CAAJ,EAA2B;AACzB,YAAM2+C,KAAK,GAAG,KAAKxmC,SAAL,EAAd;AACA,WAAKsmC,mCAAL,CAAyCE,KAAzC,EAAgD,IAAhD;AACA33C,MAAAA,IAAI,CAACa,IAAL,GAAY82C,KAAZ;AACD,KAJD,MAIO;AACL,WAAK58B,KAAL,CAAWF,KAAX,CAAiBtD,eAAjB;AACA,WAAKqgC,SAAL,CAAe/8B,KAAf,CAAqB+uB,KAArB;AACA5pC,MAAAA,IAAI,CAACa,IAAL,GAAY,KAAK02C,kBAAL,EAAZ;AACA,WAAKK,SAAL,CAAe98B,IAAf;AACA,WAAKC,KAAL,CAAWD,IAAX;AACD;;AAED,WAAO,KAAKxJ,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAED63C,EAAAA,uCAAuC,CAAC73C,IAAD,EAAO;AAC5C,QAAI,KAAKwiB,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AAC/BxiB,MAAAA,IAAI,CAAC83C,MAAL,GAAc,IAAd;AACA93C,MAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2Q,eAAL,EAAV;AACD,KAHD,MAGO,IAAI,KAAK9iB,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAJ,EAAgC;AACrCmI,MAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAKL,aAAL,EAAV;AACD,KAFM,MAEA;AACL,WAAKwS,UAAL;AACD;;AAED,QAAI,KAAKtkB,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,WAAK0iB,KAAL,CAAWF,KAAX,CAAiBtD,eAAjB;AACA,WAAKqgC,SAAL,CAAe/8B,KAAf,CAAqB+uB,KAArB;AACA5pC,MAAAA,IAAI,CAACa,IAAL,GAAY,KAAK02C,kBAAL,EAAZ;AACA,WAAKK,SAAL,CAAe98B,IAAf;AACA,WAAKC,KAAL,CAAWD,IAAX;AACD,KAND,MAMO;AACL,WAAKmH,SAAL;AACD;;AAED,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAED+3C,EAAAA,8BAA8B,CAAC/3C,IAAD,EAAOg4C,QAAP,EAAiB;AAC7Ch4C,IAAAA,IAAI,CAACg4C,QAAL,GAAgBA,QAAQ,IAAI,KAA5B;AACAh4C,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2Q,eAAL,EAAV;AACA,SAAK2M,SAAL,CAAehuB,IAAI,CAAC0Q,EAApB,EAAwB,2BAAxB,EAAqD2H,YAArD;AACA,SAAKoI,MAAL,CAAYjpB,OAAO,CAACmC,EAApB;AACA,UAAMs+C,eAAe,GAAG,KAAKC,sBAAL,EAAxB;;AAEA,QAAIl4C,IAAI,CAACif,UAAL,KAAoB,MAApB,IAA8Bg5B,eAAe,CAACr3C,IAAhB,KAAyB,2BAA3D,EAAwF;AACtF,WAAKuL,KAAL,CAAW8rC,eAAe,CAACl6C,KAA3B,EAAkC6sC,QAAQ,CAACgB,wBAA3C;AACD;;AAED5rC,IAAAA,IAAI,CAACi4C,eAAL,GAAuBA,eAAvB;AACA,SAAKh2B,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,2BAAtB,CAAP;AACD;;AAEDm4C,EAAAA,2BAA2B,GAAG;AAC5B,WAAO,KAAK31B,YAAL,CAAkB,SAAlB,KAAgC,KAAK8xB,iBAAL,OAA6B,EAApE;AACD;;AAED4D,EAAAA,sBAAsB,GAAG;AACvB,WAAO,KAAKC,2BAAL,KAAqC,KAAKC,8BAAL,EAArC,GAA6E,KAAKtI,iBAAL,CAAuB,KAAvB,CAApF;AACD;;AAEDsI,EAAAA,8BAA8B,GAAG;AAC/B,UAAMp4C,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0P,gBAAL,CAAsB,SAAtB;AACA,SAAKJ,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;;AAEA,QAAI,CAAC,KAAK6F,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAL,EAAiC;AAC/B,YAAM,KAAKgrB,UAAL,EAAN;AACD;;AAED7iB,IAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAK8B,aAAL,EAAlB;AACA,SAAKoQ,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACA,WAAO,KAAK2Y,UAAL,CAAgBtR,IAAhB,EAAsB,2BAAtB,CAAP;AACD;;AAED+xC,EAAAA,WAAW,CAACsG,CAAD,EAAI;AACb,UAAM14C,KAAK,GAAG,KAAKA,KAAL,CAAWyqB,KAAX,EAAd;AACA,UAAMkuB,GAAG,GAAGD,CAAC,EAAb;AACA,SAAK14C,KAAL,GAAaA,KAAb;AACA,WAAO24C,GAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAACF,CAAD,EAAI;AACpB,UAAMpuB,MAAM,GAAG,KAAKC,QAAL,CAAc8G,KAAK,IAAIqnB,CAAC,MAAMrnB,KAAK,EAAnC,CAAf;AACA,QAAI/G,MAAM,CAACoH,OAAP,IAAkB,CAACpH,MAAM,CAACjqB,IAA9B,EAAoC,OAAOU,SAAP;AACpC,QAAIupB,MAAM,CAACrd,KAAX,EAAkB,KAAKjN,KAAL,GAAasqB,MAAM,CAACE,SAApB;AAClB,WAAOF,MAAM,CAACjqB,IAAd;AACD;;AAEDsuC,EAAAA,UAAU,CAAC+J,CAAD,EAAI;AACZ,UAAM14C,KAAK,GAAG,KAAKA,KAAL,CAAWyqB,KAAX,EAAd;AACA,UAAMH,MAAM,GAAGouB,CAAC,EAAhB;;AAEA,QAAIpuB,MAAM,KAAKvpB,SAAX,IAAwBupB,MAAM,KAAK,KAAvC,EAA8C;AAC5C,aAAOA,MAAP;AACD,KAFD,MAEO;AACL,WAAKtqB,KAAL,GAAaA,KAAb;AACA,aAAOe,SAAP;AACD;AACF;;AAED83C,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACtB,QAAI,KAAK9G,gBAAL,EAAJ,EAA6B;AAC3B;AACD;;AAED,QAAI+G,SAAS,GAAG,KAAK/4C,KAAL,CAAWiB,IAA3B;AACA,QAAIwQ,IAAJ;;AAEA,QAAI,KAAKoR,YAAL,CAAkB,KAAlB,CAAJ,EAA8B;AAC5Bk2B,MAAAA,SAAS,GAAGlhD,OAAO,CAACuE,IAApB;AACAqV,MAAAA,IAAI,GAAG,KAAP;AACD;;AAED,WAAO,KAAKunC,kBAAL,CAAwB,MAAM;AACnC,cAAQD,SAAR;AACE,aAAKlhD,OAAO,CAACiE,SAAb;AACEg9C,UAAAA,IAAI,CAAC7zB,OAAL,GAAe,IAAf;AACA,iBAAO,KAAKg0B,sBAAL,CAA4BH,IAA5B,EAAkC,KAAlC,EAAyC,IAAzC,CAAP;;AAEF,aAAKjhD,OAAO,CAAC8E,MAAb;AACEm8C,UAAAA,IAAI,CAAC7zB,OAAL,GAAe,IAAf;AACA,iBAAO,KAAKi0B,UAAL,CAAgBJ,IAAhB,EAAsB,IAAtB,EAA4B,KAA5B,CAAP;;AAEF,aAAKjhD,OAAO,CAACwE,MAAb;AACE,cAAI,KAAKuC,KAAL,CAAW/G,OAAO,CAACwE,MAAnB,KAA8B,KAAK2zB,qBAAL,CAA2B,MAA3B,CAAlC,EAAsE;AACpE,iBAAKlP,MAAL,CAAYjpB,OAAO,CAACwE,MAApB;AACA,iBAAK6kB,gBAAL,CAAsB,MAAtB;AACA,mBAAO,KAAKy2B,sBAAL,CAA4BmB,IAA5B,EAAkC,IAAlC,CAAP;AACD;;AAEH,aAAKjhD,OAAO,CAACuE,IAAb;AACEqV,UAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKzR,KAAL,CAAW1J,KAA1B;AACA,iBAAO,KAAK6iD,iBAAL,CAAuBL,IAAvB,EAA6BrnC,IAA7B,CAAP;;AAEF,aAAK5Z,OAAO,CAACL,IAAb;AACE;AACE,kBAAMlB,KAAK,GAAG,KAAK0J,KAAL,CAAW1J,KAAzB;;AAEA,gBAAIA,KAAK,KAAK,QAAd,EAAwB;AACtB,qBAAO,KAAK4hD,uCAAL,CAA6CY,IAA7C,CAAP;AACD,aAFD,MAEO;AACL,qBAAO,KAAKM,kBAAL,CAAwBN,IAAxB,EAA8BxiD,KAA9B,EAAqC,IAArC,CAAP;AACD;AACF;AA7BL;AA+BD,KAhCM,CAAP;AAiCD;;AAED+iD,EAAAA,2BAA2B,GAAG;AAC5B,WAAO,KAAKD,kBAAL,CAAwB,KAAK5nC,SAAL,EAAxB,EAA0C,KAAKxR,KAAL,CAAW1J,KAArD,EAA4D,IAA5D,CAAP;AACD;;AAEDgjD,EAAAA,0BAA0B,CAACj5C,IAAD,EAAO2pB,IAAP,EAAa;AACrC,YAAQA,IAAI,CAACxyB,IAAb;AACE,WAAK,SAAL;AACE;AACE,gBAAM4nB,WAAW,GAAG,KAAKy5B,iBAAL,CAAuBx4C,IAAvB,CAApB;;AAEA,cAAI+e,WAAJ,EAAiB;AACfA,YAAAA,WAAW,CAAC6F,OAAZ,GAAsB,IAAtB;AACA,mBAAO7F,WAAP;AACD;;AAED;AACD;;AAEH,WAAK,QAAL;AACE,YAAI,KAAKxgB,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,eAAK0iB,KAAL,CAAWF,KAAX,CAAiBtD,eAAjB;AACA,eAAKqgC,SAAL,CAAe/8B,KAAf,CAAqB+uB,KAArB;AACA,gBAAMsP,GAAG,GAAGl5C,IAAZ;AACAk5C,UAAAA,GAAG,CAACpB,MAAJ,GAAa,IAAb;AACAoB,UAAAA,GAAG,CAACxoC,EAAJ,GAASiZ,IAAT;AACAuvB,UAAAA,GAAG,CAACr4C,IAAJ,GAAW,KAAK02C,kBAAL,EAAX;AACA,eAAKx8B,KAAL,CAAWD,IAAX;AACA,eAAK88B,SAAL,CAAe98B,IAAf;AACA,iBAAO,KAAKxJ,UAAL,CAAgB4nC,GAAhB,EAAqB,qBAArB,CAAP;AACD;;AAED;;AAEF;AACE,eAAO,KAAKH,kBAAL,CAAwB/4C,IAAxB,EAA8B2pB,IAAI,CAACxyB,IAAnC,EAAyC,KAAzC,CAAP;AA7BJ;AA+BD;;AAED4hD,EAAAA,kBAAkB,CAAC/4C,IAAD,EAAO/J,KAAP,EAAc4gB,IAAd,EAAoB;AACpC,YAAQ5gB,KAAR;AACE,WAAK,UAAL;AACE,YAAI,KAAKkjD,qBAAL,CAA2BtiC,IAA3B,MAAqC,KAAKtY,KAAL,CAAW/G,OAAO,CAAC8E,MAAnB,KAA8B,KAAKiC,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAnE,CAAJ,EAAkG;AAChG,iBAAO,KAAKiiD,0BAAL,CAAgCp5C,IAAhC,CAAP;AACD;;AAED;;AAEF,WAAK,MAAL;AACE,YAAI6W,IAAI,IAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAZ,EAAsC;AACpC,cAAI0f,IAAJ,EAAU,KAAKA,IAAL;AACV,iBAAO,KAAKygC,sBAAL,CAA4Bt3C,IAA5B,EAAkC,KAAlC,CAAP;AACD;;AAED;;AAEF,WAAK,WAAL;AACE,YAAI,KAAKm5C,qBAAL,CAA2BtiC,IAA3B,KAAoC,KAAKtY,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAxC,EAAkE;AAChE,iBAAO,KAAK2/C,2BAAL,CAAiC92C,IAAjC,CAAP;AACD;;AAED;;AAEF,WAAK,QAAL;AACE,YAAI,KAAKm5C,qBAAL,CAA2BtiC,IAA3B,CAAJ,EAAsC;AACpC,cAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAJ,EAAgC;AAC9B,mBAAO,KAAKggD,uCAAL,CAA6C73C,IAA7C,CAAP;AACD,WAFD,MAEO,IAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AACnC,mBAAO,KAAKsgD,mCAAL,CAAyCz3C,IAAzC,CAAP;AACD;AACF;;AAED;;AAEF,WAAK,WAAL;AACE,YAAI,KAAKm5C,qBAAL,CAA2BtiC,IAA3B,KAAoC,KAAKtY,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAxC,EAAkE;AAChE,iBAAO,KAAKsgD,mCAAL,CAAyCz3C,IAAzC,CAAP;AACD;;AAED;;AAEF,WAAK,MAAL;AACE,YAAI,KAAKm5C,qBAAL,CAA2BtiC,IAA3B,KAAoC,KAAKtY,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAxC,EAAkE;AAChE,iBAAO,KAAK4/C,2BAAL,CAAiC/2C,IAAjC,CAAP;AACD;;AAED;AA9CJ;AAgDD;;AAEDm5C,EAAAA,qBAAqB,CAACtiC,IAAD,EAAO;AAC1B,QAAIA,IAAJ,EAAU;AACR,UAAI,KAAKwiC,qBAAL,EAAJ,EAAkC,OAAO,KAAP;AAClC,WAAKxiC,IAAL;AACA,aAAO,IAAP;AACD;;AAED,WAAO,CAAC,KAAK86B,gBAAL,EAAR;AACD;;AAED2H,EAAAA,mCAAmC,CAAC1oC,QAAD,EAAW/E,QAAX,EAAqB;AACtD,QAAI,CAAC,KAAK2V,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAO9gB,SAAP;AACD;;AAED,UAAM64C,yBAAyB,GAAG,KAAK55C,KAAL,CAAWouB,sBAA7C;AACA,SAAKpuB,KAAL,CAAWouB,sBAAX,GAAoC,IAApC;AACA,UAAMuqB,GAAG,GAAG,KAAKC,kBAAL,CAAwB,MAAM;AACxC,YAAMv4C,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,MAAAA,IAAI,CAACoQ,cAAL,GAAsB,KAAK4gC,qBAAL,EAAtB;AACA,YAAM7gB,mBAAN,CAA0BnwB,IAA1B;AACAA,MAAAA,IAAI,CAAC8hB,UAAL,GAAkB,KAAKg0B,uCAAL,EAAlB;AACA,WAAKr1B,MAAL,CAAYjpB,OAAO,CAAC2B,KAApB;AACA,aAAO6G,IAAP;AACD,KAPW,CAAZ;AAQA,SAAKL,KAAL,CAAWouB,sBAAX,GAAoCwrB,yBAApC;;AAEA,QAAI,CAACjB,GAAL,EAAU;AACR,aAAO53C,SAAP;AACD;;AAED,WAAO,KAAK6xB,oBAAL,CAA0B+lB,GAA1B,EAA+B,IAA/B,EAAqC,IAArC,CAAP;AACD;;AAEDvI,EAAAA,oBAAoB,GAAG;AACrB,UAAM/vC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAACoM,MAAL,GAAc,KAAKopC,QAAL,CAAc,MAAM,KAAKwB,aAAL,CAAmB,MAAM;AACzD,WAAKvxB,gBAAL,CAAsB,GAAtB;AACA,aAAO,KAAK6pB,oBAAL,CAA0B,2BAA1B,EAAuD,KAAKwD,WAAL,CAAiBvE,IAAjB,CAAsB,IAAtB,CAAvD,CAAP;AACD,KAHiC,CAApB,CAAd;;AAKA,QAAIvuC,IAAI,CAACoM,MAAL,CAAY9M,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAK6M,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB6sC,QAAQ,CAACa,kBAAhC;AACD;;AAED,SAAK9rC,KAAL,CAAW6U,WAAX,GAAyB,KAAzB;AACA,SAAKiR,gBAAL,CAAsB,GAAtB;AACA,WAAO,KAAKnU,UAAL,CAAgBtR,IAAhB,EAAsB,8BAAtB,CAAP;AACD;;AAEDw5C,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKj7C,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5B,cAAQ,KAAKwI,KAAL,CAAW1J,KAAnB;AACE,aAAK,UAAL;AACA,aAAK,SAAL;AACA,aAAK,MAAL;AACA,aAAK,WAAL;AACA,aAAK,QAAL;AACA,aAAK,WAAL;AACA,aAAK,MAAL;AACE,iBAAO,IAAP;AARJ;AAUD;;AAED,WAAO,KAAP;AACD;;AAED4zB,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAK2vB,oBAAL,EAAJ,EAAiC,OAAO,KAAP;AACjC,WAAO,MAAM3vB,wBAAN,EAAP;AACD;;AAED4vB,EAAAA,uBAAuB,CAACrpB,cAAD,EAAiBspB,UAAjB,EAA6B;AAClD,UAAM9oC,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,QAAIojC,aAAJ;AACA,QAAIiD,QAAQ,GAAG,KAAf;;AAEA,QAAI9hB,cAAc,KAAK1vB,SAAvB,EAAkC;AAChCuuC,MAAAA,aAAa,GAAG,KAAK0K,mBAAL,EAAhB;AACAzH,MAAAA,QAAQ,GAAG,CAAC,CAAC,KAAK9D,eAAL,CAAqB,CAAC,UAAD,CAArB,CAAb;;AAEA,UAAIhe,cAAc,KAAK,KAAnB,KAA6B6e,aAAa,IAAIiD,QAA9C,CAAJ,EAA6D;AAC3D,aAAK/lC,KAAL,CAAWyE,QAAX,EAAqBg6B,QAAQ,CAACyC,2BAA9B;AACD;AACF;;AAED,UAAMte,IAAI,GAAG,KAAKD,iBAAL,EAAb;AACA,SAAKD,4BAAL,CAAkCE,IAAlC;AACA,UAAM6qB,GAAG,GAAG,KAAK9qB,iBAAL,CAAuBC,IAAI,CAAChxB,KAA5B,EAAmCgxB,IAAI,CAACrvB,GAAL,CAAS3B,KAA5C,EAAmDgxB,IAAnD,CAAZ;;AAEA,QAAIkgB,aAAa,IAAIiD,QAArB,EAA+B;AAC7B,YAAM2H,EAAE,GAAG,KAAKvrC,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAX;;AAEA,UAAI6tC,UAAU,CAACp6C,MAAf,EAAuB;AACrBu6C,QAAAA,EAAE,CAACH,UAAH,GAAgBA,UAAhB;AACD;;AAED,UAAIzK,aAAJ,EAAmB4K,EAAE,CAAC5K,aAAH,GAAmBA,aAAnB;AACnB,UAAIiD,QAAJ,EAAc2H,EAAE,CAAC3H,QAAH,GAAcA,QAAd;;AAEd,UAAI0H,GAAG,CAACh5C,IAAJ,KAAa,YAAb,IAA6Bg5C,GAAG,CAACh5C,IAAJ,KAAa,mBAA9C,EAAmE;AACjE,aAAKuL,KAAL,CAAW0tC,EAAE,CAAC97C,KAAd,EAAqB6sC,QAAQ,CAAC8C,gCAA9B;AACD;;AAEDmM,MAAAA,EAAE,CAACC,SAAH,GAAeF,GAAf;AACA,aAAO,KAAKtoC,UAAL,CAAgBuoC,EAAhB,EAAoB,qBAApB,CAAP;AACD;;AAED,QAAIH,UAAU,CAACp6C,MAAf,EAAuB;AACrByvB,MAAAA,IAAI,CAAC2qB,UAAL,GAAkBA,UAAlB;AACD;;AAED,WAAOE,GAAP;AACD;;AAEDtwB,EAAAA,0BAA0B,CAACtpB,IAAD,EAAOY,IAAP,EAAamQ,QAAQ,GAAG,KAAxB,EAA+B;AACvD,QAAI,KAAKxS,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7BkH,MAAAA,IAAI,CAAC8hB,UAAL,GAAkB,KAAK0vB,oCAAL,CAA0Ch6C,OAAO,CAACsB,KAAlD,CAAlB;AACD;;AAED,UAAMihD,YAAY,GAAGn5C,IAAI,KAAK,qBAAT,GAAiC,mBAAjC,GAAuDA,IAAI,KAAK,aAAT,GAAyB,iBAAzB,GAA6CF,SAAzH;;AAEA,QAAIq5C,YAAY,IAAI,CAAC,KAAKx7C,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAjB,IAA+C,KAAKs5C,gBAAL,EAAnD,EAA4E;AAC1E,WAAKrgC,UAAL,CAAgBtR,IAAhB,EAAsB+5C,YAAtB;AACA;AACD;;AAED,QAAIA,YAAY,KAAK,mBAAjB,IAAwC,KAAKp6C,KAAL,CAAWq6C,gBAAvD,EAAyE;AACvE,WAAK7tC,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB6sC,QAAQ,CAACS,gCAAhC;;AAEA,UAAIrrC,IAAI,CAAC4kB,OAAT,EAAkB;AAChB,cAAM0E,0BAAN,CAAiCtpB,IAAjC,EAAuC+5C,YAAvC,EAAqDhpC,QAArD;AACA;AACD;AACF;;AAED,UAAMuY,0BAAN,CAAiCtpB,IAAjC,EAAuCY,IAAvC,EAA6CmQ,QAA7C;AACD;;AAEDkpC,EAAAA,2BAA2B,CAACj6C,IAAD,EAAO;AAChC,QAAI,CAACA,IAAI,CAACa,IAAN,IAAcb,IAAI,CAAC0Q,EAAvB,EAA2B;AACzB,WAAKsd,SAAL,CAAehuB,IAAI,CAAC0Q,EAApB,EAAwB,eAAxB,EAAyCiI,eAAzC;AACD,KAFD,MAEO;AACL,YAAMshC,2BAAN,CAAkC,GAAG74C,SAArC;AACD;AACF;;AAED84C,EAAAA,0BAA0B,CAACC,KAAD,EAAQ;AAChCA,IAAAA,KAAK,CAAC3uC,OAAN,CAAcxL,IAAI,IAAI;AACpB,UAAI,CAACA,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACY,IAA9B,MAAwC,sBAA5C,EAAoE;AAClE,aAAKuL,KAAL,CAAWnM,IAAI,CAAC+hB,cAAL,CAAoBhkB,KAA/B,EAAsC6sC,QAAQ,CAAC2C,wBAA/C;AACD;AACF,KAJD;AAKD;;AAED/f,EAAAA,gBAAgB,CAACF,QAAD,EAAW8sB,UAAX,EAAuB;AACrC,SAAKF,0BAAL,CAAgC5sB,QAAhC;AACA,WAAOA,QAAP;AACD;;AAEDK,EAAAA,cAAc,CAAC,GAAGne,IAAJ,EAAU;AACtB,UAAMxP,IAAI,GAAG,MAAM2tB,cAAN,CAAqB,GAAGne,IAAxB,CAAb;;AAEA,QAAIxP,IAAI,CAACY,IAAL,KAAc,iBAAlB,EAAqC;AACnC,WAAKs5C,0BAAL,CAAgCl6C,IAAI,CAACC,QAArC;AACD;;AAED,WAAOD,IAAP;AACD;;AAED6S,EAAAA,cAAc,CAACC,IAAD,EAAOlC,QAAP,EAAiB/E,QAAjB,EAA2BkH,OAA3B,EAAoCpT,KAApC,EAA2C;AACvD,QAAI,CAAC,KAAKoV,qBAAL,EAAD,IAAiC,KAAKxW,KAAL,CAAW/G,OAAO,CAACsC,IAAnB,CAArC,EAA+D;AAC7D,WAAK6F,KAAL,CAAW6U,WAAX,GAAyB,KAAzB;AACA,WAAKqC,IAAL;AACA,YAAMwjC,iBAAiB,GAAG,KAAK/rC,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAA1B;AACAwuC,MAAAA,iBAAiB,CAAC9rC,UAAlB,GAA+BuE,IAA/B;AACA,aAAO,KAAKxB,UAAL,CAAgB+oC,iBAAhB,EAAmC,qBAAnC,CAAP;AACD;;AAED,QAAI,KAAK74B,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAMyI,MAAM,GAAG,KAAKsuB,kBAAL,CAAwB,MAAM;AAC3C,YAAI,CAACxlC,OAAD,IAAY,KAAKunC,oBAAL,CAA0BxnC,IAA1B,CAAhB,EAAiD;AAC/C,gBAAMynC,YAAY,GAAG,KAAKjB,mCAAL,CAAyC1oC,QAAzC,EAAmD/E,QAAnD,CAArB;;AAEA,cAAI0uC,YAAJ,EAAkB;AAChB,mBAAOA,YAAP;AACD;AACF;;AAED,cAAMv6C,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,QAAAA,IAAI,CAACsS,MAAL,GAAcQ,IAAd;AACA,cAAMsf,aAAa,GAAG,KAAK2d,oBAAL,EAAtB;;AAEA,YAAI3d,aAAJ,EAAmB;AACjB,cAAI,CAACrf,OAAD,IAAY,KAAK+N,GAAL,CAAStpB,OAAO,CAACkB,MAAjB,CAAhB,EAA0C;AACxCsH,YAAAA,IAAI,CAACoB,SAAL,GAAiB,KAAK4wB,4BAAL,CAAkCx6B,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACA,iBAAKuhD,0BAAL,CAAgCl6C,IAAI,CAACoB,SAArC;AACApB,YAAAA,IAAI,CAACoQ,cAAL,GAAsBgiB,aAAtB;;AAEA,gBAAIzyB,KAAK,CAACqT,mBAAV,EAA+B;AAC7BhT,cAAAA,IAAI,CAACqS,QAAL,GAAgB,KAAhB;AACD;;AAED,mBAAO,KAAKD,oBAAL,CAA0BpS,IAA1B,EAAgCL,KAAK,CAACqT,mBAAtC,CAAP;AACD,WAVD,MAUO,IAAI,KAAKzU,KAAL,CAAW/G,OAAO,CAAC8B,SAAnB,CAAJ,EAAmC;AACxC,kBAAM2wB,MAAM,GAAG,KAAKuwB,6BAAL,CAAmC1nC,IAAnC,EAAyClC,QAAzC,EAAmD/E,QAAnD,EAA6DlM,KAA7D,CAAf;AACAsqB,YAAAA,MAAM,CAAC7Z,cAAP,GAAwBgiB,aAAxB;AACA,mBAAOnI,MAAP;AACD;AACF;;AAED,aAAKpH,UAAL;AACD,OAhCc,CAAf;AAiCA,UAAIoH,MAAJ,EAAY,OAAOA,MAAP;AACb;;AAED,WAAO,MAAMpX,cAAN,CAAqBC,IAArB,EAA2BlC,QAA3B,EAAqC/E,QAArC,EAA+CkH,OAA/C,EAAwDpT,KAAxD,CAAP;AACD;;AAED0yB,EAAAA,iBAAiB,CAACryB,IAAD,EAAO;AACtB,QAAI,KAAKwhB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAMpR,cAAc,GAAG,KAAKmoC,kBAAL,CAAwB,MAAM;AACnD,cAAM/oC,IAAI,GAAG,KAAKugC,oBAAL,EAAb;AACA,YAAI,CAAC,KAAKxxC,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAAL,EAAiC,KAAKmqB,UAAL;AACjC,eAAOrT,IAAP;AACD,OAJsB,CAAvB;;AAMA,UAAIY,cAAJ,EAAoB;AAClBpQ,QAAAA,IAAI,CAACoQ,cAAL,GAAsBA,cAAtB;AACD;AACF;;AAED,UAAMiiB,iBAAN,CAAwBryB,IAAxB;AACD;;AAEDy6C,EAAAA,WAAW,CAAC1rB,IAAD,EAAO2rB,YAAP,EAAqBC,YAArB,EAAmCC,OAAnC,EAA4C;AACrD,QAAInQ,OAAO,CAACjzC,OAAO,CAACqF,GAAR,CAAY/F,KAAb,CAAP,GAA6B8jD,OAA7B,IAAwC,CAAC,KAAK7lC,qBAAL,EAAzC,IAAyE,KAAKyN,YAAL,CAAkB,IAAlB,CAA7E,EAAsG;AACpG,YAAMxiB,IAAI,GAAG,KAAKsO,WAAL,CAAiBosC,YAAjB,EAA+BC,YAA/B,CAAb;AACA36C,MAAAA,IAAI,CAACuO,UAAL,GAAkBwgB,IAAlB;;AAEA,YAAM/yB,MAAM,GAAG,KAAKi1C,6BAAL,EAAf;;AAEA,UAAIj1C,MAAJ,EAAY;AACVgE,QAAAA,IAAI,CAAC+hB,cAAL,GAAsB/lB,MAAtB;AACD,OAFD,MAEO;AACLgE,QAAAA,IAAI,CAAC+hB,cAAL,GAAsB,KAAKy0B,mBAAL,EAAtB;AACD;;AAED,WAAKllC,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB;AACA,WAAK66C,YAAL;AACA,aAAO,KAAKJ,WAAL,CAAiBz6C,IAAjB,EAAuB06C,YAAvB,EAAqCC,YAArC,EAAmDC,OAAnD,CAAP;AACD;;AAED,WAAO,MAAMH,WAAN,CAAkB1rB,IAAlB,EAAwB2rB,YAAxB,EAAsCC,YAAtC,EAAoDC,OAApD,CAAP;AACD;;AAED3qB,EAAAA,iBAAiB,CAAC7Z,IAAD,EAAOvK,QAAP,EAAiBivC,aAAjB,EAAgC3tB,SAAhC,EAA2C,CAAE;;AAE9D4tB,EAAAA,qBAAqB,GAAG,CAAE;;AAE1B/3B,EAAAA,WAAW,CAAChjB,IAAD,EAAO;AAChBA,IAAAA,IAAI,CAACif,UAAL,GAAkB,OAAlB;;AAEA,QAAI,KAAK1gB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4B,KAAKoH,KAAL,CAAW/G,OAAO,CAACoD,IAAnB,CAA5B,IAAwD,KAAK2D,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAA5D,EAAwF;AACtF,UAAI2iD,KAAK,GAAG,KAAK70B,SAAL,EAAZ;;AAEA,UAAI,KAAK3D,YAAL,CAAkB,MAAlB,KAA6Bw4B,KAAK,CAACp6C,IAAN,KAAepJ,OAAO,CAACoB,KAApD,IAA6D,EAAEoiD,KAAK,CAACp6C,IAAN,KAAepJ,OAAO,CAACL,IAAvB,IAA+B6jD,KAAK,CAAC/kD,KAAN,KAAgB,MAAjD,CAA7D,IAAyH+kD,KAAK,CAACp6C,IAAN,KAAepJ,OAAO,CAACmC,EAApJ,EAAwJ;AACtJqG,QAAAA,IAAI,CAACif,UAAL,GAAkB,MAAlB;AACA,aAAKpI,IAAL;AACAmkC,QAAAA,KAAK,GAAG,KAAK70B,SAAL,EAAR;AACD;;AAED,UAAI,KAAK5nB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4B6jD,KAAK,CAACp6C,IAAN,KAAepJ,OAAO,CAACmC,EAAvD,EAA2D;AACzD,eAAO,KAAKo+C,8BAAL,CAAoC/3C,IAApC,CAAP;AACD;AACF;;AAED,UAAMi7C,UAAU,GAAG,MAAMj4B,WAAN,CAAkBhjB,IAAlB,CAAnB;;AAEA,QAAIi7C,UAAU,CAACh8B,UAAX,KAA0B,MAA1B,IAAoCg8B,UAAU,CAACroC,UAAX,CAAsBtT,MAAtB,GAA+B,CAAnE,IAAwE27C,UAAU,CAACroC,UAAX,CAAsB,CAAtB,EAAyBhS,IAAzB,KAAkC,wBAA9G,EAAwI;AACtI,WAAKuL,KAAL,CAAW8uC,UAAU,CAACl9C,KAAtB,EAA6B6sC,QAAQ,CAACwC,sCAAtC;AACD;;AAED,WAAO6N,UAAP;AACD;;AAEDvoC,EAAAA,WAAW,CAAC1S,IAAD,EAAO;AAChB,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACiF,OAAnB,CAAJ,EAAiC;AAC/B,WAAKoa,IAAL;;AAEA,UAAI,KAAK2L,YAAL,CAAkB,MAAlB,KAA6B,KAAK8xB,iBAAL,OAA6B,EAA9D,EAAkE;AAChEt0C,QAAAA,IAAI,CAACif,UAAL,GAAkB,MAAlB;AACA,aAAKpI,IAAL;AACD,OAHD,MAGO;AACL7W,QAAAA,IAAI,CAACif,UAAL,GAAkB,OAAlB;AACD;;AAED,aAAO,KAAK84B,8BAAL,CAAoC/3C,IAApC,EAA0C,IAA1C,CAAP;AACD,KAXD,MAWO,IAAI,KAAK8gB,GAAL,CAAStpB,OAAO,CAACmC,EAAjB,CAAJ,EAA0B;AAC/B,YAAMC,MAAM,GAAGoG,IAAf;AACApG,MAAAA,MAAM,CAAC2U,UAAP,GAAoB,KAAKwS,eAAL,EAApB;AACA,WAAKkB,SAAL;AACA,aAAO,KAAK3Q,UAAL,CAAgB1X,MAAhB,EAAwB,oBAAxB,CAAP;AACD,KALM,MAKA,IAAI,KAAKyoB,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AACnC,YAAMyJ,IAAI,GAAG9rB,IAAb;AACA,WAAK6gB,gBAAL,CAAsB,WAAtB;AACAiL,MAAAA,IAAI,CAACpb,EAAL,GAAU,KAAK2Q,eAAL,EAAV;AACA,WAAKY,SAAL;AACA,aAAO,KAAK3Q,UAAL,CAAgBwa,IAAhB,EAAsB,8BAAtB,CAAP;AACD,KANM,MAMA;AACL,UAAI,KAAKtJ,YAAL,CAAkB,MAAlB,KAA6B,KAAK2D,SAAL,GAAiBvlB,IAAjB,KAA0BpJ,OAAO,CAACa,MAAnE,EAA2E;AACzE,aAAKwe,IAAL;AACA7W,QAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AACD,OAHD,MAGO;AACLrjB,QAAAA,IAAI,CAACqjB,UAAL,GAAkB,OAAlB;AACD;;AAED,aAAO,MAAM3Q,WAAN,CAAkB1S,IAAlB,CAAP;AACD;AACF;;AAEDk7C,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAK14B,YAAL,CAAkB,UAAlB,KAAiC,KAAK2D,SAAL,GAAiBvlB,IAAjB,KAA0BpJ,OAAO,CAAC8E,MAA1E;AACD;;AAEDwtB,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAKoxB,eAAL,EAAJ,EAA4B;AAC1B,YAAMC,GAAG,GAAG,KAAKhqC,SAAL,EAAZ;AACA,WAAK0F,IAAL;AACAskC,MAAAA,GAAG,CAACrH,QAAJ,GAAe,IAAf;AACA,WAAK+E,UAAL,CAAgBsC,GAAhB,EAAqB,IAArB,EAA2B,IAA3B;AACA,aAAOA,GAAP;AACD;;AAED,QAAI,KAAKx7C,KAAL,CAAW1J,KAAX,KAAqB,WAAzB,EAAsC;AACpC,YAAMg0B,MAAM,GAAG,KAAK8uB,kBAAL,CAAwB,KAAK5nC,SAAL,EAAxB,EAA0C,KAAKxR,KAAL,CAAW1J,KAArD,EAA4D,IAA5D,CAAf;AACA,UAAIg0B,MAAJ,EAAY,OAAOA,MAAP;AACb;;AAED,WAAO,MAAMH,4BAAN,EAAP;AACD;;AAEDsxB,EAAAA,qBAAqB,CAAC7mC,OAAD,EAAUiV,QAAV,EAAoB;AACvC,QAAI,KAAK7pB,KAAL,CAAWiB,IAAX,KAAoBpJ,OAAO,CAACwE,MAAhC,EAAwC;AACtC,YAAMg/C,KAAK,GAAG,KAAK70B,SAAL,EAAd;;AAEA,UAAI60B,KAAK,CAACp6C,IAAN,KAAepJ,OAAO,CAACL,IAAvB,IAA+B6jD,KAAK,CAAC/kD,KAAN,KAAgB,MAAnD,EAA2D;AACzD,cAAM+J,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,aAAKsP,MAAL,CAAYjpB,OAAO,CAACwE,MAApB;AACA,aAAK6kB,gBAAL,CAAsB,MAAtB;AACA,eAAO,KAAKy2B,sBAAL,CAA4Bt3C,IAA5B,EAAkC,IAAlC,CAAP;AACD;AACF;;AAED,WAAO,MAAMo7C,qBAAN,CAA4B7mC,OAA5B,EAAqCiV,QAArC,CAAP;AACD;;AAEDmwB,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAKvL,eAAL,CAAqB,CAAC,QAAD,EAAW,WAAX,EAAwB,SAAxB,CAArB,CAAP;AACD;;AAEDiN,EAAAA,kBAAkB,CAAC3uB,MAAD,EAAS4uB,SAAT,EAAoB;AACpC,WAAOA,SAAS,CAACC,IAAV,CAAezN,QAAQ,IAAI;AAChC,UAAID,kBAAkB,CAACC,QAAD,CAAtB,EAAkC;AAChC,eAAOphB,MAAM,CAACuiB,aAAP,KAAyBnB,QAAhC;AACD;;AAED,aAAO,CAAC,CAACphB,MAAM,CAACohB,QAAD,CAAf;AACD,KANM,CAAP;AAOD;;AAEDrhB,EAAAA,gBAAgB,CAAC1c,SAAD,EAAY2c,MAAZ,EAAoB/sB,KAApB,EAA2B;AACzC,UAAM67C,8BAA8B,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,WAAjC,EAA8C,UAA9C,EAA0D,UAA1D,EAAsE,UAAtE,CAAvC;AACA,SAAKhN,gBAAL,CAAsB9hB,MAAtB,EAA8B8uB,8BAA8B,CAAC3rC,MAA/B,CAAsC,CAAC,QAAD,CAAtC,CAA9B;;AAEA,UAAM4rC,gCAAgC,GAAG,MAAM;AAC7C,YAAMx1B,QAAQ,GAAG,CAAC,CAACyG,MAAM,CAACxG,MAA1B;;AAEA,UAAID,QAAQ,IAAI,KAAKnF,GAAL,CAAStpB,OAAO,CAACa,MAAjB,CAAhB,EAA0C;AACxC,YAAI,KAAKgjD,kBAAL,CAAwB3uB,MAAxB,EAAgC8uB,8BAAhC,CAAJ,EAAqE;AACnE,eAAKrvC,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2Bg/B,QAAQ,CAACsC,6BAApC;AACD;;AAED,aAAKwO,qBAAL,CAA2B3rC,SAA3B,EAAsC2c,MAAtC;AACD,OAND,MAMO;AACL,aAAKivB,4BAAL,CAAkC5rC,SAAlC,EAA6C2c,MAA7C,EAAqD/sB,KAArD,EAA4DsmB,QAA5D;AACD;AACF,KAZD;;AAcA,QAAIyG,MAAM,CAAC9H,OAAX,EAAoB;AAClB,WAAK+zB,kBAAL,CAAwB8C,gCAAxB;AACD,KAFD,MAEO;AACLA,MAAAA,gCAAgC;AACjC;AACF;;AAEDE,EAAAA,4BAA4B,CAAC5rC,SAAD,EAAY2c,MAAZ,EAAoB/sB,KAApB,EAA2BsmB,QAA3B,EAAqC;AAC/D,UAAMqsB,GAAG,GAAG,KAAKR,wBAAL,CAA8BplB,MAA9B,CAAZ;;AAEA,QAAI4lB,GAAJ,EAAS;AACPviC,MAAAA,SAAS,CAAClP,IAAV,CAAehB,IAAf,CAAoByyC,GAApB;;AAEA,UAAI5lB,MAAM,CAAConB,QAAX,EAAqB;AACnB,aAAK3nC,KAAL,CAAWugB,MAAM,CAAC3uB,KAAlB,EAAyB6sC,QAAQ,CAACkB,yBAAlC;AACD;;AAED,UAAIpf,MAAM,CAACuiB,aAAX,EAA0B;AACxB,aAAK9iC,KAAL,CAAWugB,MAAM,CAAC3uB,KAAlB,EAAyB6sC,QAAQ,CAACmB,8BAAlC,EAAkErf,MAAM,CAACuiB,aAAzE;AACD;;AAED,UAAIviB,MAAM,CAAC9H,OAAX,EAAoB;AAClB,aAAKzY,KAAL,CAAWugB,MAAM,CAAC3uB,KAAlB,EAAyB6sC,QAAQ,CAACoB,wBAAlC;AACD;;AAED,UAAItf,MAAM,CAAC/Y,QAAX,EAAqB;AACnB,aAAKxH,KAAL,CAAWugB,MAAM,CAAC3uB,KAAlB,EAAyB6sC,QAAQ,CAACqB,yBAAlC;AACD;;AAED;AACD;;AAED,QAAI,CAAC,KAAKtsC,KAAL,CAAWi8C,eAAZ,IAA+BlvB,MAAM,CAAConB,QAA1C,EAAoD;AAClD,WAAK3nC,KAAL,CAAWugB,MAAM,CAAC3uB,KAAlB,EAAyB6sC,QAAQ,CAAC2B,iCAAlC;AACD;;AAED,QAAI7f,MAAM,CAAC/Y,QAAX,EAAqB;AACnB,UAAI,CAAChU,KAAK,CAACk8C,aAAX,EAA0B;AACxB,aAAK1vC,KAAL,CAAWugB,MAAM,CAAC3uB,KAAlB,EAAyB6sC,QAAQ,CAAC8B,qBAAlC;AACD;AACF;;AAED,UAAMiP,4BAAN,CAAmC5rC,SAAnC,EAA8C2c,MAA9C,EAAsD/sB,KAAtD,EAA6DsmB,QAA7D;AACD;;AAED61B,EAAAA,4BAA4B,CAACC,YAAD,EAAe;AACzC,UAAM1pC,QAAQ,GAAG,KAAKyO,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAjB;AACA,QAAIoZ,QAAJ,EAAc0pC,YAAY,CAAC1pC,QAAb,GAAwB,IAAxB;;AAEd,QAAI0pC,YAAY,CAAC7J,QAAb,IAAyB,KAAK3zC,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAA7B,EAAyD;AACvD,WAAKyT,KAAL,CAAW4vC,YAAY,CAACh+C,KAAxB,EAA+B6sC,QAAQ,CAACK,sBAAxC;AACD;;AAED,QAAI8Q,YAAY,CAACn3B,OAAb,IAAwB,KAAKrmB,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAA5B,EAAwD;AACtD,WAAKyT,KAAL,CAAW4vC,YAAY,CAACh+C,KAAxB,EAA+B6sC,QAAQ,CAACI,qBAAxC;AACD;AACF;;AAEDthB,EAAAA,wBAAwB,CAAC1pB,IAAD,EAAO2pB,IAAP,EAAa;AACnC,UAAMmC,IAAI,GAAGnC,IAAI,CAAC/oB,IAAL,KAAc,YAAd,GAA6B,KAAKq4C,0BAAL,CAAgCj5C,IAAhC,EAAsC2pB,IAAtC,CAA7B,GAA2EjpB,SAAxF;AACA,WAAOorB,IAAI,IAAI,MAAMpC,wBAAN,CAA+B1pB,IAA/B,EAAqC2pB,IAArC,CAAf;AACD;;AAEDC,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAK4vB,oBAAL,EAAJ,EAAiC,OAAO,IAAP;AACjC,WAAO,MAAM5vB,4BAAN,EAAP;AACD;;AAEDG,EAAAA,gBAAgB,CAACJ,IAAD,EAAO/Y,QAAP,EAAiB/E,QAAjB,EAA2Bme,gBAA3B,EAA6C;AAC3D,QAAI,CAACA,gBAAD,IAAqB,CAAC,KAAKzrB,KAAL,CAAW/G,OAAO,CAACyB,QAAnB,CAA1B,EAAwD;AACtD,aAAO,MAAM8wB,gBAAN,CAAuBJ,IAAvB,EAA6B/Y,QAA7B,EAAuC/E,QAAvC,EAAiDme,gBAAjD,CAAP;AACD;;AAED,UAAMC,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM,MAAMH,gBAAN,CAAuBJ,IAAvB,EAA6B/Y,QAA7B,EAAuC/E,QAAvC,CAApB,CAAf;;AAEA,QAAI,CAACoe,MAAM,CAACjqB,IAAZ,EAAkB;AAChBgqB,MAAAA,gBAAgB,CAACjsB,KAAjB,GAAyBksB,MAAM,CAACrd,KAAP,CAAahB,GAAb,IAAoB,KAAKjM,KAAL,CAAW5B,KAAxD;AACA,aAAO4rB,IAAP;AACD;;AAED,QAAIM,MAAM,CAACrd,KAAX,EAAkB,KAAKjN,KAAL,GAAasqB,MAAM,CAACE,SAApB;AAClB,WAAOF,MAAM,CAACjqB,IAAd;AACD;;AAED2rB,EAAAA,cAAc,CAAC3rB,IAAD,EAAO4Q,QAAP,EAAiB/E,QAAjB,EAA2B;AACvC7L,IAAAA,IAAI,GAAG,MAAM2rB,cAAN,CAAqB3rB,IAArB,EAA2B4Q,QAA3B,EAAqC/E,QAArC,CAAP;;AAEA,QAAI,KAAKiV,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9B+G,MAAAA,IAAI,CAACqS,QAAL,GAAgB,IAAhB;AACA,WAAK2P,gBAAL,CAAsBhiB,IAAtB;AACD;;AAED,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAM8yB,YAAY,GAAG,KAAKtd,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAArB;AACA+f,MAAAA,YAAY,CAACrd,UAAb,GAA0BvO,IAA1B;AACA4rB,MAAAA,YAAY,CAAC7J,cAAb,GAA8B,KAAKuuB,qBAAL,EAA9B;AACA,aAAO,KAAKh/B,UAAL,CAAgBsa,YAAhB,EAA8B,sBAA9B,CAAP;AACD;;AAED,WAAO5rB,IAAP;AACD;;AAED+rB,EAAAA,sBAAsB,CAAC/rB,IAAD,EAAO;AAC3B,UAAM4Q,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,UAAMmwC,SAAS,GAAG,KAAK35B,aAAL,CAAmB,SAAnB,CAAlB;;AAEA,QAAI25B,SAAS,KAAK,KAAKx5B,YAAL,CAAkB,SAAlB,KAAgC,CAAC,KAAKoH,4BAAL,EAAtC,CAAb,EAAyF;AACvF,YAAM,KAAKzd,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B6sC,QAAQ,CAACe,iCAAtC,CAAN;AACD;;AAED,QAAI5sB,WAAJ;;AAEA,QAAI,KAAKxgB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5B4nB,MAAAA,WAAW,GAAG,KAAKi6B,2BAAL,EAAd;AACD;;AAED,QAAI,CAACj6B,WAAL,EAAkB;AAChBA,MAAAA,WAAW,GAAG,MAAMgN,sBAAN,CAA6B/rB,IAA7B,CAAd;AACD;;AAED,QAAI+e,WAAW,KAAKA,WAAW,CAACne,IAAZ,KAAqB,wBAArB,IAAiDme,WAAW,CAACne,IAAZ,KAAqB,wBAAtE,IAAkGo7C,SAAvG,CAAf,EAAkI;AAChIh8C,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AACD;;AAED,QAAItE,WAAW,IAAIi9B,SAAnB,EAA8B;AAC5B,WAAKC,kBAAL,CAAwBl9B,WAAxB,EAAqCnO,QAArC,EAA+C/E,QAA/C;AACAkT,MAAAA,WAAW,CAAC6F,OAAZ,GAAsB,IAAtB;AACD;;AAED,WAAO7F,WAAP;AACD;;AAEDuN,EAAAA,YAAY,CAACtsB,IAAD,EAAOusB,WAAP,EAAoBC,UAApB,EAAgC;AAC1C,QAAI,CAAC,CAACD,WAAD,IAAgBC,UAAjB,KAAgC,KAAKhK,YAAL,CAAkB,YAAlB,CAApC,EAAqE;AACnE;AACD;;AAED,UAAM8J,YAAN,CAAmBtsB,IAAnB,EAAyBusB,WAAzB,EAAsCC,UAAtC,EAAkDxsB,IAAI,CAAC4kB,OAAL,GAAejM,eAAf,GAAiCP,UAAnF;AACA,UAAMhI,cAAc,GAAG,KAAK2gC,wBAAL,EAAvB;AACA,QAAI3gC,cAAJ,EAAoBpQ,IAAI,CAACoQ,cAAL,GAAsBA,cAAtB;AACrB;;AAED8rC,EAAAA,4BAA4B,CAACl8C,IAAD,EAAO;AACjC,QAAI,CAACA,IAAI,CAACqS,QAAN,IAAkB,KAAKyO,GAAL,CAAStpB,OAAO,CAACsC,IAAjB,CAAtB,EAA8C;AAC5CkG,MAAAA,IAAI,CAACm8C,QAAL,GAAgB,IAAhB;AACD;;AAED,UAAMv7C,IAAI,GAAG,KAAKoxC,wBAAL,EAAb;AACA,QAAIpxC,IAAJ,EAAUZ,IAAI,CAAC+hB,cAAL,GAAsBnhB,IAAtB;AACX;;AAED2Q,EAAAA,kBAAkB,CAACvR,IAAD,EAAO;AACvB,SAAKk8C,4BAAL,CAAkCl8C,IAAlC;;AAEA,QAAI,KAAKL,KAAL,CAAWq6C,gBAAX,IAA+B,KAAKz7C,KAAL,CAAW/G,OAAO,CAACmC,EAAnB,CAAnC,EAA2D;AACzD,WAAKwS,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B6sC,QAAQ,CAACQ,+BAAtC;AACD;;AAED,WAAO,MAAM75B,kBAAN,CAAyBvR,IAAzB,CAAP;AACD;;AAEDyR,EAAAA,yBAAyB,CAACzR,IAAD,EAAO;AAC9B,QAAIA,IAAI,CAAC8zC,QAAT,EAAmB;AACjB,WAAK3nC,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB6sC,QAAQ,CAACgC,yBAAhC;AACD;;AAED,QAAI5sC,IAAI,CAACivC,aAAT,EAAwB;AACtB,WAAK9iC,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB6sC,QAAQ,CAACiC,8BAAhC,EAAgE7sC,IAAI,CAACivC,aAArE;AACD;;AAED,SAAKiN,4BAAL,CAAkCl8C,IAAlC;AACA,WAAO,MAAMyR,yBAAN,CAAgCzR,IAAhC,CAAP;AACD;;AAED8P,EAAAA,eAAe,CAACC,SAAD,EAAYd,MAAZ,EAAoBe,WAApB,EAAiCnB,OAAjC,EAA0CoB,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzF,UAAME,cAAc,GAAG,KAAK2gC,wBAAL,EAAvB;;AAEA,QAAI3gC,cAAc,IAAIH,aAAtB,EAAqC;AACnC,WAAK9D,KAAL,CAAWiE,cAAc,CAACrS,KAA1B,EAAiC6sC,QAAQ,CAACM,4BAA1C;AACD;;AAED,QAAIj8B,MAAM,CAAC2V,OAAP,KAAmB3V,MAAM,CAACmC,IAAP,KAAgB,KAAhB,IAAyBnC,MAAM,CAACmC,IAAP,KAAgB,KAA5D,CAAJ,EAAwE;AACtE,WAAKjF,KAAL,CAAW8C,MAAM,CAAClR,KAAlB,EAAyB6sC,QAAQ,CAACO,eAAlC,EAAmDl8B,MAAM,CAACmC,IAA1D;AACD;;AAED,QAAIhB,cAAJ,EAAoBnB,MAAM,CAACmB,cAAP,GAAwBA,cAAxB;AACpB,UAAMN,eAAN,CAAsBC,SAAtB,EAAiCd,MAAjC,EAAyCe,WAAzC,EAAsDnB,OAAtD,EAA+DoB,aAA/D,EAA8EC,iBAA9E;AACD;;AAEDme,EAAAA,sBAAsB,CAACte,SAAD,EAAYd,MAAZ,EAAoBe,WAApB,EAAiCnB,OAAjC,EAA0C;AAC9D,UAAMuB,cAAc,GAAG,KAAK2gC,wBAAL,EAAvB;AACA,QAAI3gC,cAAJ,EAAoBnB,MAAM,CAACmB,cAAP,GAAwBA,cAAxB;AACpB,UAAMie,sBAAN,CAA6Bte,SAA7B,EAAwCd,MAAxC,EAAgDe,WAAhD,EAA6DnB,OAA7D;AACD;;AAEDyf,EAAAA,eAAe,CAACtuB,IAAD,EAAO;AACpB,UAAMsuB,eAAN,CAAsBtuB,IAAtB;;AAEA,QAAIA,IAAI,CAACoN,UAAL,IAAmB,KAAKoU,YAAL,CAAkB,GAAlB,CAAvB,EAA+C;AAC7CxhB,MAAAA,IAAI,CAACuuB,mBAAL,GAA2B,KAAKwhB,oBAAL,EAA3B;AACD;;AAED,QAAI,KAAK1tB,aAAL,CAAmB,YAAnB,CAAJ,EAAsC;AACpCriB,MAAAA,IAAI,CAAC4jB,UAAL,GAAkB,KAAK6yB,qBAAL,CAA2B,YAA3B,CAAlB;AACD;AACF;;AAED7nB,EAAAA,iBAAiB,CAACjd,IAAD,EAAO,GAAGnC,IAAV,EAAgB;AAC/B,UAAMY,cAAc,GAAG,KAAK2gC,wBAAL,EAAvB;AACA,QAAI3gC,cAAJ,EAAoBuB,IAAI,CAACvB,cAAL,GAAsBA,cAAtB;AACpB,UAAMwe,iBAAN,CAAwBjd,IAAxB,EAA8B,GAAGnC,IAAjC;AACD;;AAED2gB,EAAAA,mBAAmB,CAACnwB,IAAD,EAAOowB,cAAP,EAAuB;AACxC,UAAMhgB,cAAc,GAAG,KAAK2gC,wBAAL,EAAvB;AACA,QAAI3gC,cAAJ,EAAoBpQ,IAAI,CAACoQ,cAAL,GAAsBA,cAAtB;AACpB,UAAM+f,mBAAN,CAA0BnwB,IAA1B,EAAgCowB,cAAhC;AACD;;AAEDC,EAAAA,UAAU,CAACvE,IAAD,EAAO1a,IAAP,EAAa;AACrB,UAAMif,UAAN,CAAiBvE,IAAjB,EAAuB1a,IAAvB;;AAEA,QAAI0a,IAAI,CAACpb,EAAL,CAAQ9P,IAAR,KAAiB,YAAjB,IAAiC,KAAKkgB,GAAL,CAAStpB,OAAO,CAACsC,IAAjB,CAArC,EAA6D;AAC3DgyB,MAAAA,IAAI,CAACqwB,QAAL,GAAgB,IAAhB;AACD;;AAED,UAAMv7C,IAAI,GAAG,KAAKoxC,wBAAL,EAAb;;AAEA,QAAIpxC,IAAJ,EAAU;AACRkrB,MAAAA,IAAI,CAACpb,EAAL,CAAQqR,cAAR,GAAyBnhB,IAAzB;AACA,WAAKohB,gBAAL,CAAsB8J,IAAI,CAACpb,EAA3B;AACD;AACF;;AAED4f,EAAAA,iCAAiC,CAACtwB,IAAD,EAAOuwB,IAAP,EAAa;AAC5C,QAAI,KAAKhyB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7BkH,MAAAA,IAAI,CAAC8hB,UAAL,GAAkB,KAAKwuB,qBAAL,EAAlB;AACD;;AAED,WAAO,MAAMhgB,iCAAN,CAAwCtwB,IAAxC,EAA8CuwB,IAA9C,CAAP;AACD;;AAEDzF,EAAAA,gBAAgB,CAAC,GAAGtb,IAAJ,EAAU;AACxB,QAAIkhB,IAAJ,EAAUI,KAAV,EAAiBsrB,SAAjB,EAA4BrrB,KAA5B,EAAmCsrB,UAAnC,EAA+CC,KAA/C,EAAsDC,UAAtD;;AAEA,QAAI58C,KAAJ;AACA,QAAIgxB,GAAJ;AACA,QAAI6rB,QAAJ;;AAEA,QAAI,KAAK19C,SAAL,CAAe,KAAf,MAA0B,KAAKP,KAAL,CAAW/G,OAAO,CAAC8tB,WAAnB,KAAmC,KAAK9D,YAAL,CAAkB,GAAlB,CAA7D,CAAJ,EAA0F;AACxF7hB,MAAAA,KAAK,GAAG,KAAKA,KAAL,CAAWyqB,KAAX,EAAR;AACAuG,MAAAA,GAAG,GAAG,KAAKzG,QAAL,CAAc,MAAM,MAAMY,gBAAN,CAAuB,GAAGtb,IAA1B,CAApB,EAAqD7P,KAArD,CAAN;AACA,UAAI,CAACgxB,GAAG,CAAC/jB,KAAT,EAAgB,OAAO+jB,GAAG,CAAC3wB,IAAX;AAChB,YAAM;AACJuU,QAAAA;AADI,UAEF,KAAK5U,KAFT;;AAIA,UAAI4U,OAAO,CAACA,OAAO,CAACjV,MAAR,GAAiB,CAAlB,CAAP,KAAgCsU,KAAK,CAACgd,MAA1C,EAAkD;AAChDrc,QAAAA,OAAO,CAACjV,MAAR,IAAkB,CAAlB;AACD,OAFD,MAEO,IAAIiV,OAAO,CAACA,OAAO,CAACjV,MAAR,GAAiB,CAAlB,CAAP,KAAgCsU,KAAK,CAACid,MAA1C,EAAkD;AACvDtc,QAAAA,OAAO,CAACjV,MAAR,IAAkB,CAAlB;AACD;AACF;;AAED,QAAI,EAAE,CAACoxB,IAAI,GAAGC,GAAR,KAAgB,IAAhB,IAAwBD,IAAI,CAAC9jB,KAA/B,KAAyC,CAAC,KAAK4U,YAAL,CAAkB,GAAlB,CAA9C,EAAsE;AACpE,aAAO,MAAMsJ,gBAAN,CAAuB,GAAGtb,IAA1B,CAAP;AACD;;AAED,QAAIY,cAAJ;AACAzQ,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAL,CAAWyqB,KAAX,EAAjB;AACA,UAAMjxB,KAAK,GAAG,KAAK+wB,QAAL,CAAc8G,KAAK,IAAI;AACnC,UAAItD,WAAJ,EAAiB+uB,eAAjB;;AAEArsC,MAAAA,cAAc,GAAG,KAAK4gC,qBAAL,EAAjB;AACA,YAAMrnB,IAAI,GAAG,MAAMmB,gBAAN,CAAuB,GAAGtb,IAA1B,CAAb;;AAEA,UAAIma,IAAI,CAAC/oB,IAAL,KAAc,yBAAd,IAA2C,CAAC8sB,WAAW,GAAG/D,IAAI,CAACnb,KAApB,KAA8B,IAA9B,IAAsCkf,WAAW,CAACte,aAAjG,EAAgH;AAC9G4hB,QAAAA,KAAK;AACN;;AAED,UAAI,CAAC,CAACyrB,eAAe,GAAGrsC,cAAnB,KAAsC,IAAtC,GAA6C,KAAK,CAAlD,GAAsDqsC,eAAe,CAACrwC,MAAhB,CAAuB9M,MAA9E,MAA0F,CAA9F,EAAiG;AAC/F,aAAK6xB,0BAAL,CAAgCxH,IAAhC,EAAsCvZ,cAAtC;AACD;;AAEDuZ,MAAAA,IAAI,CAACvZ,cAAL,GAAsBA,cAAtB;AACA,aAAOuZ,IAAP;AACD,KAhBa,EAgBXhqB,KAhBW,CAAd;AAiBA,QAAI,CAACxG,KAAK,CAACyT,KAAP,IAAgB,CAACzT,KAAK,CAACk4B,OAA3B,EAAoC,OAAOl4B,KAAK,CAAC6G,IAAb;;AAEpC,QAAI,CAAC2wB,GAAL,EAAU;AACRga,MAAAA,MAAM,CAAC,CAAC,KAAK7rC,SAAL,CAAe,KAAf,CAAF,CAAN;AACA09C,MAAAA,QAAQ,GAAG,KAAKtyB,QAAL,CAAc,MAAM,MAAMY,gBAAN,CAAuB,GAAGtb,IAA1B,CAApB,EAAqD7P,KAArD,CAAX;AACA,UAAI,CAAC68C,QAAQ,CAAC5vC,KAAd,EAAqB,OAAO4vC,QAAQ,CAACx8C,IAAhB;AACtB;;AAED,QAAI,CAAC8wB,KAAK,GAAGH,GAAT,KAAiB,IAAjB,IAAyBG,KAAK,CAAC9wB,IAAnC,EAAyC;AACvC,WAAKL,KAAL,GAAagxB,GAAG,CAACxG,SAAjB;AACA,aAAOwG,GAAG,CAAC3wB,IAAX;AACD;;AAED,QAAI7G,KAAK,CAAC6G,IAAV,EAAgB;AACd,WAAKL,KAAL,GAAaxG,KAAK,CAACgxB,SAAnB;AACA,aAAOhxB,KAAK,CAAC6G,IAAb;AACD;;AAED,QAAI,CAACo8C,SAAS,GAAGI,QAAb,KAA0B,IAA1B,IAAkCJ,SAAS,CAACp8C,IAAhD,EAAsD;AACpD,WAAKL,KAAL,GAAa68C,QAAQ,CAACryB,SAAtB;AACA,aAAOqyB,QAAQ,CAACx8C,IAAhB;AACD;;AAED,QAAI,CAAC+wB,KAAK,GAAGJ,GAAT,KAAiB,IAAjB,IAAyBI,KAAK,CAACQ,MAAnC,EAA2C,MAAMZ,GAAG,CAAC/jB,KAAV;AAC3C,QAAIzT,KAAK,CAACo4B,MAAV,EAAkB,MAAMp4B,KAAK,CAACyT,KAAZ;AAClB,QAAI,CAACyvC,UAAU,GAAGG,QAAd,KAA2B,IAA3B,IAAmCH,UAAU,CAAC9qB,MAAlD,EAA0D,MAAMirB,QAAQ,CAAC5vC,KAAf;AAC1D,UAAM,CAAC,CAAC0vC,KAAK,GAAG3rB,GAAT,KAAiB,IAAjB,GAAwB,KAAK,CAA7B,GAAiC2rB,KAAK,CAAC1vC,KAAxC,KAAkDzT,KAAK,CAACyT,KAAxD,KAAkE,CAAC2vC,UAAU,GAAGC,QAAd,KAA2B,IAA3B,GAAkC,KAAK,CAAvC,GAA2CD,UAAU,CAAC3vC,KAAxH,CAAN;AACD;;AAED2nC,EAAAA,eAAe,CAACjkC,mBAAD,EAAsB;AACnC,QAAI,CAAC,KAAKxR,SAAL,CAAe,KAAf,CAAD,IAA0B,KAAK0iB,YAAL,CAAkB,GAAlB,CAA9B,EAAsD;AACpD,aAAO,KAAK+0B,oBAAL,EAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMhC,eAAN,CAAsBjkC,mBAAtB,CAAP;AACD;AACF;;AAEDkhB,EAAAA,UAAU,CAACxxB,IAAD,EAAO;AACf,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAMmxB,MAAM,GAAG,KAAKC,QAAL,CAAc8G,KAAK,IAAI;AACpC,cAAMlP,UAAU,GAAG,KAAK0vB,oCAAL,CAA0Ch6C,OAAO,CAACsB,KAAlD,CAAnB;AACA,YAAI,KAAK2vB,kBAAL,MAA6B,CAAC,KAAKlqB,KAAL,CAAW/G,OAAO,CAAC2B,KAAnB,CAAlC,EAA6D63B,KAAK;AAClE,eAAOlP,UAAP;AACD,OAJc,CAAf;AAKA,UAAImI,MAAM,CAACoH,OAAX,EAAoB;;AAEpB,UAAI,CAACpH,MAAM,CAACsH,MAAZ,EAAoB;AAClB,YAAItH,MAAM,CAACrd,KAAX,EAAkB,KAAKjN,KAAL,GAAasqB,MAAM,CAACE,SAApB;AAClBnqB,QAAAA,IAAI,CAAC8hB,UAAL,GAAkBmI,MAAM,CAACjqB,IAAzB;AACD;AACF;;AAED,WAAO,MAAMwxB,UAAN,CAAiBxxB,IAAjB,CAAP;AACD;;AAED6uB,EAAAA,4BAA4B,CAAC9F,KAAD,EAAQ;AAClC,QAAI,KAAKjI,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9B,UAAI8vB,KAAK,CAACnoB,IAAN,KAAe,YAAf,IAA+B,CAAC,KAAKjB,KAAL,CAAWq6C,gBAA3C,IAA+D,CAAC,KAAKr6C,KAAL,CAAW6gB,MAA/E,EAAuF;AACrF,aAAKrU,KAAL,CAAW4c,KAAK,CAAChrB,KAAjB,EAAwB6sC,QAAQ,CAAC+B,iBAAjC;AACD;;AAED5jB,MAAAA,KAAK,CAAC1W,QAAN,GAAiB,IAAjB;AACD;;AAED,UAAMzR,IAAI,GAAG,KAAKoxC,wBAAL,EAAb;AACA,QAAIpxC,IAAJ,EAAUmoB,KAAK,CAAChH,cAAN,GAAuBnhB,IAAvB;AACV,SAAKohB,gBAAL,CAAsB+G,KAAtB;AACA,WAAOA,KAAP;AACD;;AAED/W,EAAAA,YAAY,CAAChS,IAAD,EAAOiS,KAAK,GAAG,KAAf,EAAsB;AAChC,YAAQjS,IAAI,CAACY,IAAb;AACE,WAAK,sBAAL;AACE,eAAO,MAAMoR,YAAN,CAAmB,KAAKmX,mBAAL,CAAyBnpB,IAAzB,CAAnB,EAAmDiS,KAAnD,CAAP;;AAEF,WAAK,qBAAL;AACE,eAAO,MAAMD,YAAN,CAAmBhS,IAAnB,EAAyBiS,KAAzB,CAAP;;AAEF,WAAK,yBAAL;AACE,eAAO,KAAKyqC,mCAAL,CAAyC18C,IAAzC,EAA+CiS,KAA/C,CAAP;;AAEF,WAAK,gBAAL;AACA,WAAK,qBAAL;AACA,WAAK,iBAAL;AACEjS,QAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAKyD,YAAL,CAAkBhS,IAAI,CAACuO,UAAvB,EAAmC0D,KAAnC,CAAlB;AACA,eAAOjS,IAAP;;AAEF;AACE,eAAO,MAAMgS,YAAN,CAAmBhS,IAAnB,EAAyBiS,KAAzB,CAAP;AAjBJ;AAmBD;;AAEDyqC,EAAAA,mCAAmC,CAAC18C,IAAD,EAAOiS,KAAP,EAAc;AAC/C,YAAQjS,IAAI,CAACuO,UAAL,CAAgB3N,IAAxB;AACE,WAAK,gBAAL;AACA,WAAK,qBAAL;AACA,WAAK,iBAAL;AACA,WAAK,yBAAL;AACEZ,QAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAKyD,YAAL,CAAkBhS,IAAI,CAACuO,UAAvB,EAAmC0D,KAAnC,CAAlB;AACA,eAAOjS,IAAP;;AAEF;AACE,eAAO,MAAMgS,YAAN,CAAmBhS,IAAnB,EAAyBiS,KAAzB,CAAP;AATJ;AAWD;;AAED+b,EAAAA,SAAS,CAACrE,IAAD,EAAOwF,kBAAP,EAA2B,GAAG3f,IAA9B,EAAoC;AAC3C,QAAImtC,YAAJ;;AAEA,YAAQhzB,IAAI,CAAC/oB,IAAb;AACE,WAAK,sBAAL;AACE;;AAEF,WAAK,qBAAL;AACE,aAAKotB,SAAL,CAAerE,IAAI,CAACmwB,SAApB,EAA+B,oBAA/B,EAAqD,GAAGtqC,IAAxD;AACA;;AAEF,WAAK,gBAAL;AACA,WAAK,iBAAL;AACE,YAAI,CAACA,IAAI,CAAC,CAAD,CAAL,IAAY2f,kBAAkB,KAAK,0BAAnC,IAAiE,EAAE,CAACwtB,YAAY,GAAGhzB,IAAI,CAACnb,KAArB,KAA+B,IAA/B,IAAuCmuC,YAAY,CAACvtC,aAAtD,CAArE,EAA2I;AACzI,eAAKjD,KAAL,CAAWwd,IAAI,CAAC5rB,KAAhB,EAAuB8D,aAAa,CAACuD,UAArC,EAAiD+pB,kBAAjD;AACA;AACD;;AAED,aAAKnB,SAAL,CAAerE,IAAI,CAACpb,UAApB,EAAgC,0BAAhC,EAA4D,GAAGiB,IAA/D;AACA;;AAEF,WAAK,qBAAL;AACE,aAAKwe,SAAL,CAAerE,IAAI,CAACpb,UAApB,EAAgC4gB,kBAAhC,EAAoD,GAAG3f,IAAvD;AACA;;AAEF;AACE,cAAMwe,SAAN,CAAgBrE,IAAhB,EAAsBwF,kBAAtB,EAA0C,GAAG3f,IAA7C;AACA;AAxBJ;AA0BD;;AAED0gB,EAAAA,gBAAgB,GAAG;AACjB,YAAQ,KAAKvwB,KAAL,CAAWiB,IAAnB;AACE,WAAKpJ,OAAO,CAAC4E,KAAb;AACE,eAAO,KAAKilB,eAAL,CAAqB,IAArB,CAAP;;AAEF;AACE,eAAO,MAAM6O,gBAAN,EAAP;AALJ;AAOD;;AAED0sB,EAAAA,4BAA4B,CAACjzB,IAAD,EAAO;AACjC,QAAI,KAAKnI,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAM4Q,aAAa,GAAG,KAAK2d,oBAAL,EAAtB;;AAEA,UAAI,KAAKxxC,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAAJ,EAAgC;AAC9B,cAAM63B,IAAI,GAAG,MAAMqsB,4BAAN,CAAmCjzB,IAAnC,CAAb;AACA4G,QAAAA,IAAI,CAACngB,cAAL,GAAsBgiB,aAAtB;AACA,eAAO7B,IAAP;AACD;;AAED,WAAK1N,UAAL,CAAgB,KAAKljB,KAAL,CAAW5B,KAA3B,EAAkCvG,OAAO,CAACkB,MAA1C;AACD;;AAED,WAAO,MAAMkkD,4BAAN,CAAmCjzB,IAAnC,CAAP;AACD;;AAEDkzB,EAAAA,mBAAmB,CAACjvB,KAAD,EAAQ;AACzB,QAAI,KAAKjuB,KAAL,CAAWq6C,gBAAX,IAA+B,KAAKz7C,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,CAA/B,IAA4D,KAAK07C,iBAAL,OAA6B1mB,KAA7F,EAAoG;AAClG,WAAK/W,IAAL;AACD,KAFD,MAEO;AACL,YAAMgmC,mBAAN,CAA0BjvB,KAA1B;AACD;AACF;;AAEDK,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKzM,YAAL,CAAkB,GAAlB,KAA0B,MAAMyM,aAAN,EAAjC;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAK3vB,KAAL,CAAW/G,OAAO,CAACsC,IAAnB,KAA4B,KAAKyE,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAA5B,IAAyD,MAAMo1B,eAAN,EAAhE;AACD;;AAEDY,EAAAA,iBAAiB,CAAC,GAAGtf,IAAJ,EAAU;AACzB,UAAMxP,IAAI,GAAG,MAAM8uB,iBAAN,CAAwB,GAAGtf,IAA3B,CAAb;;AAEA,QAAIxP,IAAI,CAACY,IAAL,KAAc,mBAAd,IAAqCZ,IAAI,CAAC+hB,cAA1C,IAA4D/hB,IAAI,CAAC2kB,KAAL,CAAW5mB,KAAX,GAAmBiC,IAAI,CAAC+hB,cAAL,CAAoBhkB,KAAvG,EAA8G;AAC5G,WAAKoO,KAAL,CAAWnM,IAAI,CAAC+hB,cAAL,CAAoBhkB,KAA/B,EAAsC6sC,QAAQ,CAACuC,yBAA/C;AACD;;AAED,WAAOntC,IAAP;AACD;;AAEDgtB,EAAAA,gBAAgB,CAACzvB,IAAD,EAAO;AACrB,QAAI,KAAKoC,KAAL,CAAW6gB,MAAX,KAAsBjjB,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA9C,CAAJ,EAAuD;AACrD,aAAO,KAAK2vB,QAAL,CAAc11B,OAAO,CAACgD,UAAtB,EAAkC,CAAlC,CAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMwyB,gBAAN,CAAuBzvB,IAAvB,CAAP;AACD;AACF;;AAEDs9C,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKt8C,KAAL,CAAW/G,OAAO,CAACgD,UAAnB,CAAJ,EAAoC;AAClC,YAAM+C,IAAI,GAAG,KAAKa,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAW5B,KAAjC,CAAb;;AAEA,UAAIR,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAC9B,aAAKoC,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACA,aAAKkxC,eAAL,CAAqBv/C,IAArB;AACD;AACF;AACF;;AAEDguB,EAAAA,gBAAgB,CAAC+B,QAAD,EAAW;AACzB,SAAK,IAAIltB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGktB,QAAQ,CAAChuB,MAA7B,EAAqCc,CAAC,EAAtC,EAA0C;AACxC,YAAMupB,IAAI,GAAG2D,QAAQ,CAACltB,CAAD,CAArB;AACA,UAAI,CAACupB,IAAL,EAAW;;AAEX,cAAQA,IAAI,CAAC/oB,IAAb;AACE,aAAK,sBAAL;AACE0sB,UAAAA,QAAQ,CAACltB,CAAD,CAAR,GAAc,KAAK+oB,mBAAL,CAAyBQ,IAAzB,CAAd;AACA;;AAEF,aAAK,gBAAL;AACA,aAAK,iBAAL;AACE,cAAI,CAAC,KAAKhqB,KAAL,CAAWouB,sBAAhB,EAAwC;AACtCT,YAAAA,QAAQ,CAACltB,CAAD,CAAR,GAAc,KAAK+oB,mBAAL,CAAyBQ,IAAzB,CAAd;AACD,WAFD,MAEO;AACL,iBAAKxd,KAAL,CAAWwd,IAAI,CAAC5rB,KAAhB,EAAuB6sC,QAAQ,CAAC4C,6BAAhC;AACD;;AAED;AAbJ;AAeD;;AAED,WAAO,MAAMjiB,gBAAN,CAAuB,GAAGnqB,SAA1B,CAAP;AACD;;AAED+nB,EAAAA,mBAAmB,CAACnpB,IAAD,EAAO;AACxBA,IAAAA,IAAI,CAACuO,UAAL,CAAgBwT,cAAhB,GAAiC/hB,IAAI,CAAC+hB,cAAtC;AACA,SAAKC,gBAAL,CAAsBhiB,IAAI,CAACuO,UAA3B,EAAuCvO,IAAI,CAAC+hB,cAAL,CAAoB/jB,GAA3D,EAAgEgC,IAAI,CAAC+hB,cAAL,CAAoBriB,GAApB,CAAwB1B,GAAxF;AACA,WAAOgC,IAAI,CAACuO,UAAZ;AACD;;AAEDkjB,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKlzB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,KAA6B,MAAM24B,gBAAN,EAApC;AACD;;AAEDjB,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAKjyB,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,KAA6B,MAAM03B,qBAAN,EAApC;AACD;;AAEDusB,EAAAA,uBAAuB,GAAG;AACxB,WAAO,MAAMA,uBAAN,MAAmC,KAAK7B,eAAL,EAA1C;AACD;;AAED1S,EAAAA,+BAA+B,CAACxoC,IAAD,EAAO;AACpC,QAAI,KAAKwhB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAM4Q,aAAa,GAAG,KAAKmmB,kBAAL,CAAwB,MAAM,KAAKxI,oBAAL,EAA9B,CAAtB;AACA,UAAI3d,aAAJ,EAAmBpyB,IAAI,CAACoQ,cAAL,GAAsBgiB,aAAtB;AACpB;;AAED,WAAO,MAAMoW,+BAAN,CAAsCxoC,IAAtC,CAAP;AACD;;AAEDg9C,EAAAA,iCAAiC,CAAC/tC,MAAD,EAAS;AACxC,UAAMguC,SAAS,GAAG,MAAMD,iCAAN,CAAwC/tC,MAAxC,CAAlB;AACA,UAAM7C,MAAM,GAAG,KAAK4C,4BAAL,CAAkCC,MAAlC,CAAf;AACA,UAAMiuC,UAAU,GAAG9wC,MAAM,CAAC,CAAD,CAAzB;AACA,UAAM+wC,eAAe,GAAGD,UAAU,IAAI,KAAK9uB,WAAL,CAAiB8uB,UAAjB,CAAtC;AACA,WAAOC,eAAe,GAAGF,SAAS,GAAG,CAAf,GAAmBA,SAAzC;AACD;;AAEDG,EAAAA,qBAAqB,GAAG;AACtB,UAAMr0B,KAAK,GAAG,MAAMq0B,qBAAN,EAAd;AACA,UAAMx8C,IAAI,GAAG,KAAKoxC,wBAAL,EAAb;;AAEA,QAAIpxC,IAAJ,EAAU;AACRmoB,MAAAA,KAAK,CAAChH,cAAN,GAAuBnhB,IAAvB;AACA,WAAKohB,gBAAL,CAAsB+G,KAAtB;AACD;;AAED,WAAOA,KAAP;AACD;;AAED4vB,EAAAA,kBAAkB,CAAC1B,EAAD,EAAK;AACrB,UAAMoG,mBAAmB,GAAG,KAAK19C,KAAL,CAAWq6C,gBAAvC;AACA,SAAKr6C,KAAL,CAAWq6C,gBAAX,GAA8B,IAA9B;;AAEA,QAAI;AACF,aAAO/C,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKt3C,KAAL,CAAWq6C,gBAAX,GAA8BqD,mBAA9B;AACD;AACF;;AAEDxE,EAAAA,UAAU,CAAC74C,IAAD,EAAO,GAAGwP,IAAV,EAAgB;AACxB,UAAM8tC,kBAAkB,GAAG,KAAK39C,KAAL,CAAWi8C,eAAtC;AACA,SAAKj8C,KAAL,CAAWi8C,eAAX,GAA6B,CAAC,CAAC57C,IAAI,CAAC8zC,QAApC;;AAEA,QAAI;AACF,aAAO,MAAM+E,UAAN,CAAiB74C,IAAjB,EAAuB,GAAGwP,IAA1B,CAAP;AACD,KAFD,SAEU;AACR,WAAK7P,KAAL,CAAWi8C,eAAX,GAA6B0B,kBAA7B;AACD;AACF;;AAEDlE,EAAAA,0BAA0B,CAACp5C,IAAD,EAAO;AAC/B,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAAC8E,MAAnB,CAAJ,EAAgC;AAC9B0D,MAAAA,IAAI,CAAC8zC,QAAL,GAAgB,IAAhB;AACA,aAAO,KAAK+E,UAAL,CAAgB74C,IAAhB,EAAsB,IAAtB,EAA4B,KAA5B,CAAP;AACD,KAHD,MAGO,IAAI,KAAKwiB,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AACzC,UAAI,CAAC,KAAK62B,qBAAL,EAAL,EAAmC;AACjCr5C,QAAAA,IAAI,CAAC8zC,QAAL,GAAgB,IAAhB;AACA,aAAK3nC,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB6sC,QAAQ,CAAC4B,wCAAhC;AACA,aAAK31B,IAAL;AACA,eAAO,KAAKigC,2BAAL,CAAiC92C,IAAjC,CAAP;AACD;AACF,KAPM,MAOA;AACL,WAAK6iB,UAAL,CAAgB,IAAhB,EAAsBrrB,OAAO,CAAC8E,MAA9B;AACD;AACF;;AAED6T,EAAAA,WAAW,CAAC,GAAGX,IAAJ,EAAU;AACnB,UAAMP,MAAM,GAAG,MAAMkB,WAAN,CAAkB,GAAGX,IAArB,CAAf;;AAEA,QAAIP,MAAM,CAAC6kC,QAAX,EAAqB;AACnB,YAAMyJ,OAAO,GAAG,KAAKz+C,SAAL,CAAe,QAAf,IAA2B,CAAC,CAACmQ,MAAM,CAAChZ,KAAP,CAAa4K,IAA1C,GAAiD,CAAC,CAACoO,MAAM,CAACpO,IAA1E;;AAEA,UAAI08C,OAAJ,EAAa;AACX,cAAM;AACJprC,UAAAA;AADI,YAEFlD,MAFJ;AAGA,aAAK9C,KAAL,CAAW8C,MAAM,CAAClR,KAAlB,EAAyB6sC,QAAQ,CAACC,+BAAlC,EAAmE14B,GAAG,CAACvR,IAAJ,KAAa,YAAb,GAA4BuR,GAAG,CAAChb,IAAhC,GAAwC,IAAG,KAAKiH,KAAL,CAAWiD,KAAX,CAAiB8Q,GAAG,CAACpU,KAArB,EAA4BoU,GAAG,CAACnU,GAAhC,CAAqC,GAAnJ;AACD;AACF;;AAED,WAAOiR,MAAP;AACD;;AAEDuuC,EAAAA,2BAA2B,GAAG;AAC5B,WAAO,CAAC,CAAC,KAAKv+C,eAAL,CAAqB,YAArB,EAAmC,KAAnC,CAAT;AACD;;AAEDysB,EAAAA,KAAK,GAAG;AACN,QAAI,KAAK8xB,2BAAL,EAAJ,EAAwC;AACtC,WAAK79C,KAAL,CAAWq6C,gBAAX,GAA8B,IAA9B;AACD;;AAED,WAAO,MAAMtuB,KAAN,EAAP;AACD;;AAED+xB,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKD,2BAAL,EAAJ,EAAwC;AACtC,WAAK79C,KAAL,CAAWq6C,gBAAX,GAA8B,IAA9B;AACD;;AAED,WAAO,MAAMyD,aAAN,EAAP;AACD;;AA92EsD,CAAzD;;AAk3EAjmD,OAAO,CAACkmD,WAAR,GAAsB,IAAIlnD,SAAJ,CAAc,IAAd,EAAoB;AACxCL,EAAAA,UAAU,EAAE;AAD4B,CAApB,CAAtB;AAGA,MAAMwnD,iBAAiB,GAAG77C,kBAAkB,CAAC;AAC3C87C,EAAAA,mBAAmB,EAAE;AADsB,CAAD,EAEzCn8C,UAAU,CAACE,WAF8B,CAA5C;;AAGA,IAAIk8C,YAAY,GAAIzwC,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACzD0wC,EAAAA,gBAAgB,CAACC,YAAD,EAAe;AAC7B,QAAI,KAAKx/C,KAAL,CAAW/G,OAAO,CAACkmD,WAAnB,CAAJ,EAAqC;AACnC,YAAM19C,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,WAAK0F,IAAL;AACA,WAAKmnC,aAAL,CAAmB,kCAAnB;AACAh+C,MAAAA,IAAI,CAAC7I,IAAL,GAAY,MAAMkqB,eAAN,CAAsB,IAAtB,CAAZ;AACA,WAAK28B,aAAL,CAAmB,kCAAnB;AACA,WAAKv9B,MAAL,CAAYjpB,OAAO,CAACkmD,WAApB;AACA,aAAO,KAAKO,iBAAL,CAAuBj+C,IAAvB,EAA6B+9C,YAA7B,CAAP;AACD;AACF;;AAEDE,EAAAA,iBAAiB,CAACj+C,IAAD,EAAO+9C,YAAP,EAAqB;AACpC,UAAMG,UAAU,GAAG,CAAC,EAAEl+C,IAAI,CAAC+9C,YAAL,IAAqB/9C,IAAI,CAACY,IAAL,KAAc,aAArC,CAApB;AACAZ,IAAAA,IAAI,CAAC+9C,YAAL,GAAoBA,YAApB;AACA,WAAOG,UAAU,GAAGl+C,IAAH,GAAU,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,aAAtB,CAA3B;AACD;;AAEDgtB,EAAAA,gBAAgB,CAACzvB,IAAD,EAAO;AACrB,QAAIA,IAAI,KAAK,EAAT,IAAe,KAAKa,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAAjE,EAAqE;AACnE,aAAO,KAAKshB,QAAL,CAAc11B,OAAO,CAACkmD,WAAtB,EAAmC,CAAnC,CAAP;AACD;;AAED,WAAO,MAAM1wB,gBAAN,CAAuB,GAAG5rB,SAA1B,CAAP;AACD;;AAEDiP,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKytC,gBAAL,CAAsB,YAAtB,KAAuC,MAAMztC,aAAN,CAAoB,GAAGjP,SAAvB,CAA9C;AACD;;AAEDigB,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKy8B,gBAAL,CAAsB,YAAtB,KAAuC,MAAMz8B,eAAN,CAAsB,GAAGjgB,SAAzB,CAA9C;AACD;;AAED6uB,EAAAA,iBAAiB,CAAC7Z,IAAD,EAAO;AACtB,QAAIA,IAAI,KAAK1V,SAAb,EAAwB,MAAMuvB,iBAAN,CAAwB,GAAG7uB,SAA3B;AACzB;;AAED8uB,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAK4tB,gBAAL,CAAsB,SAAtB,KAAoC,MAAM5tB,gBAAN,CAAuB,GAAG9uB,SAA1B,CAA3C;AACD;;AAED4sB,EAAAA,SAAS,CAACrE,IAAD,EAAO;AACd,QAAIA,IAAI,CAAC/oB,IAAL,KAAc,aAAlB,EAAiC,MAAMotB,SAAN,CAAgB,GAAG5sB,SAAnB;AAClC;;AAED4Q,EAAAA,YAAY,CAAChS,IAAD,EAAO;AACjB,QAAIA,IAAI,IAAIA,IAAI,CAACY,IAAL,KAAc,aAAtB,IAAuCZ,IAAI,CAAC+9C,YAAL,KAAsB,YAAjE,EAA+E;AAC7E/9C,MAAAA,IAAI,CAAC+9C,YAAL,GAAoB,SAApB;AACA,aAAO/9C,IAAP;AACD;;AAED,WAAO,MAAMgS,YAAN,CAAmB,GAAG5Q,SAAtB,CAAP;AACD;;AAED+hB,EAAAA,KAAK,CAAC5O,OAAD,EAAU;AACb,QAAI,MAAM4O,KAAN,CAAY5O,OAAZ,CAAJ,EAA0B;AACxB,aAAO,IAAP;AACD;;AAED,QAAI,CAAC,KAAKiO,YAAL,CAAkB,KAAlB,CAAL,EAA+B;AAC7B,aAAO,KAAP;AACD;;AAED,QAAIjO,OAAJ,EAAa,OAAO,KAAP;AACb,UAAMme,SAAS,GAAG,KAAKvM,SAAL,EAAlB;;AAEA,QAAIuM,SAAS,CAAC9xB,IAAV,KAAmBpJ,OAAO,CAACkmD,WAA/B,EAA4C;AAC1C,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDS,EAAAA,mBAAmB,CAACn+C,IAAD,EAAO;AACxB,QAAIA,IAAI,CAACtJ,KAAL,IAAcsJ,IAAI,CAACtJ,KAAL,CAAWkK,IAAX,KAAoB,aAAtC,EAAqD;AACrD,UAAMu9C,mBAAN,CAA0B,GAAG/8C,SAA7B;AACD;;AAEDsoB,EAAAA,wBAAwB,CAAC1pB,IAAD,EAAO2pB,IAAP,EAAa;AACnC,QAAIA,IAAI,CAAC/oB,IAAL,KAAc,aAAd,IAA+B+oB,IAAI,CAACnb,KAAL,IAAcmb,IAAI,CAACnb,KAAL,CAAWY,aAA5D,EAA2E;AACzE,aAAO,MAAMsa,wBAAN,CAA+B,GAAGtoB,SAAlC,CAAP;AACD;;AAED,QAAI,KAAK7C,KAAL,CAAW/G,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAMuV,IAAI,GAAGrO,IAAb;AACAqO,MAAAA,IAAI,CAAC3X,KAAL,GAAa,KAAKunD,iBAAL,CAAuBt0B,IAAvB,EAA6B,YAA7B,CAAb;AACA,WAAK9S,IAAL;AACAxI,MAAAA,IAAI,CAACxN,IAAL,GAAY,KAAK0oB,cAAL,CAAoB,OAApB,CAAZ;AACA,aAAO,KAAKjY,UAAL,CAAgBjD,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED,SAAK4T,SAAL;AACAjiB,IAAAA,IAAI,CAAC7I,IAAL,GAAYwyB,IAAI,CAACxyB,IAAjB;AACA,WAAO,KAAK8mD,iBAAL,CAAuBj+C,IAAvB,EAA6B,WAA7B,CAAP;AACD;;AAEDo+C,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKN,gBAAL,CAAsB,gBAAtB,KAA2C,MAAMM,UAAN,CAAiB,GAAGh9C,SAApB,CAAlD;AACD;;AAEDi9C,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKP,gBAAL,CAAsB,YAAtB,KAAuC,MAAMO,eAAN,CAAsB,GAAGj9C,SAAzB,CAA9C;AACD;;AAEDy3C,EAAAA,UAAU,CAAC74C,IAAD,EAAOusB,WAAP,EAAoBC,UAApB,EAAgC;AACxC,UAAM5rB,IAAI,GAAG2rB,WAAW,GAAG,kBAAH,GAAwB,iBAAhD;AACA,SAAK1V,IAAL;AACA,SAAKynC,cAAL,CAAoBt+C,IAApB;AACA,UAAMu+C,SAAS,GAAG,KAAK5+C,KAAL,CAAWkW,MAA7B;AACA,UAAM6nC,WAAW,GAAG,KAAKI,gBAAL,CAAsB,YAAtB,CAApB;;AAEA,QAAIJ,WAAJ,EAAiB;AACf,UAAI,KAAKn/C,KAAL,CAAW/G,OAAO,CAAC+E,QAAnB,KAAgC,KAAKgC,KAAL,CAAW/G,OAAO,CAACkmD,WAAnB,CAAhC,IAAmE,KAAKn/C,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAvE,EAAmG;AACjG2H,QAAAA,IAAI,CAAC0Q,EAAL,GAAUgtC,WAAV;AACD,OAFD,MAEO,IAAIlxB,UAAU,IAAI,CAACD,WAAnB,EAAgC;AACrCvsB,QAAAA,IAAI,CAAC0Q,EAAL,GAAU,IAAV;AACA1Q,QAAAA,IAAI,CAACa,IAAL,GAAY,KAAKo9C,iBAAL,CAAuBP,WAAvB,EAAoC,WAApC,CAAZ;AACA,eAAO,KAAKpsC,UAAL,CAAgBtR,IAAhB,EAAsBY,IAAtB,CAAP;AACD,OAJM,MAIA;AACL,aAAKiiB,UAAL,CAAgB,IAAhB,EAAsB86B,iBAAiB,CAACC,mBAAxC;AACD;AACF,KAVD,MAUO;AACL,WAAKtxB,YAAL,CAAkBtsB,IAAlB,EAAwBusB,WAAxB,EAAqCC,UAArC;AACD;;AAED,SAAK8B,eAAL,CAAqBtuB,IAArB;AACAA,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAKi9C,gBAAL,CAAsB,WAAtB,KAAsC,KAAKU,cAAL,CAAoB,CAAC,CAACx+C,IAAI,CAACoN,UAA3B,EAAuCmxC,SAAvC,CAAlD;AACA,WAAO,KAAKjtC,UAAL,CAAgBtR,IAAhB,EAAsBY,IAAtB,CAAP;AACD;;AAED8R,EAAAA,WAAW,CAAC1S,IAAD,EAAO;AAChB,UAAM09C,WAAW,GAAG,KAAKI,gBAAL,CAAsB,YAAtB,CAApB;AACA,QAAI,CAACJ,WAAL,EAAkB,OAAO,MAAMhrC,WAAN,CAAkB,GAAGtR,SAArB,CAAP;;AAElB,QAAI,CAAC,KAAKohB,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKjkB,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,CAAnC,EAA8D;AAC5DoH,MAAAA,IAAI,CAAC4S,UAAL,GAAkB,EAAlB;AACA5S,MAAAA,IAAI,CAAC3C,MAAL,GAAc,IAAd;AACA2C,MAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAKk/B,iBAAL,CAAuBP,WAAvB,EAAoC,aAApC,CAAnB;AACA,aAAO,KAAKpsC,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED,SAAKy+C,YAAL,CAAkB,mBAAlB;AACA,UAAMvvB,SAAS,GAAG,KAAK/d,SAAL,EAAlB;AACA+d,IAAAA,SAAS,CAACvc,QAAV,GAAqB+qC,WAArB;AACA19C,IAAAA,IAAI,CAAC4S,UAAL,GAAkB,CAAC,KAAKtB,UAAL,CAAgB4d,SAAhB,EAA2B,wBAA3B,CAAD,CAAlB;AACA,WAAO,MAAMxc,WAAN,CAAkB1S,IAAlB,CAAP;AACD;;AAED6pB,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAKtrB,KAAL,CAAW/G,OAAO,CAAC4D,QAAnB,CAAJ,EAAkC;AAChC,YAAMyb,IAAI,GAAG,KAAKkf,cAAL,EAAb;;AAEA,UAAI,KAAK2oB,oBAAL,CAA0B7nC,IAA1B,EAAgC,MAAhC,CAAJ,EAA6C;AAC3C,YAAI,KAAKzY,KAAL,CAAWugD,UAAX,CAAsBnnD,OAAO,CAACkmD,WAAR,CAAoBhnD,KAA1C,EAAiD,KAAKkoD,mBAAL,CAAyB/nC,IAAI,GAAG,CAAhC,CAAjD,CAAJ,EAA0F;AACxF,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WAAO,MAAMgT,wBAAN,EAAP;AACD;;AAEDg1B,EAAAA,gCAAgC,CAAC7+C,IAAD,EAAO;AACrC,QAAIA,IAAI,CAAC4S,UAAL,IAAmB5S,IAAI,CAAC4S,UAAL,CAAgBtT,MAAhB,GAAyB,CAAhD,EAAmD;AACjD,aAAO,IAAP;AACD;;AAED,WAAO,MAAMu/C,gCAAN,CAAuC,GAAGz9C,SAA1C,CAAP;AACD;;AAED09C,EAAAA,WAAW,CAAC9+C,IAAD,EAAO;AAChB,UAAM;AACJ4S,MAAAA;AADI,QAEF5S,IAFJ;;AAIA,QAAI4S,UAAU,IAAI,IAAd,IAAsBA,UAAU,CAACtT,MAArC,EAA6C;AAC3CU,MAAAA,IAAI,CAAC4S,UAAL,GAAkBA,UAAU,CAACmsC,MAAX,CAAkB/+C,IAAI,IAAIA,IAAI,CAAC2S,QAAL,CAAc/R,IAAd,KAAuB,aAAjD,CAAlB;AACD;;AAED,UAAMk+C,WAAN,CAAkB9+C,IAAlB;AACAA,IAAAA,IAAI,CAAC4S,UAAL,GAAkBA,UAAlB;AACD;;AAEDoQ,EAAAA,WAAW,CAAChjB,IAAD,EAAO;AAChB,UAAM09C,WAAW,GAAG,KAAKI,gBAAL,CAAsB,YAAtB,CAApB;AACA,QAAI,CAACJ,WAAL,EAAkB,OAAO,MAAM16B,WAAN,CAAkB,GAAG5hB,SAArB,CAAP;AAClBpB,IAAAA,IAAI,CAAC4S,UAAL,GAAkB,EAAlB;;AAEA,QAAI,CAAC,KAAK4P,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKjkB,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,CAAnC,EAA8D;AAC5DoH,MAAAA,IAAI,CAAC3C,MAAL,GAAc,KAAK4gD,iBAAL,CAAuBP,WAAvB,EAAoC,eAApC,CAAd;AACA,WAAKz7B,SAAL;AACA,aAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED,UAAMkvB,SAAS,GAAG,KAAK9b,eAAL,CAAqBsqC,WAArB,CAAlB;AACAxuB,IAAAA,SAAS,CAACE,KAAV,GAAkBsuB,WAAlB;AACA,SAAKpsC,UAAL,CAAgB4d,SAAhB,EAA2B,wBAA3B;AACAlvB,IAAAA,IAAI,CAAC4S,UAAL,CAAgB/S,IAAhB,CAAqBqvB,SAArB;;AAEA,QAAI,KAAKpO,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAAJ,EAA6B;AAC3B,YAAMomD,aAAa,GAAG,KAAKC,6BAAL,CAAmCj/C,IAAnC,CAAtB;AACA,UAAI,CAACg/C,aAAL,EAAoB,KAAKE,0BAAL,CAAgCl/C,IAAhC;AACrB;;AAED,SAAK6gB,gBAAL,CAAsB,MAAtB;AACA7gB,IAAAA,IAAI,CAAC3C,MAAL,GAAc,KAAK8hD,iBAAL,EAAd;AACA,SAAKl9B,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDm/C,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKrB,gBAAL,CAAsB,eAAtB,KAA0C,MAAMqB,iBAAN,CAAwB,GAAG/9C,SAA3B,CAAjD;AACD;;AAtNwD,CAA3D;;AA0NA,IAAIg+C,WAAW,GAAIhyC,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACxDiyC,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAK9gD,KAAL,CAAW/G,OAAO,CAACmD,MAAnB,CAAJ,EAAgC;AAC9B,YAAM2kD,gBAAgB,GAAG,KAAK3/C,KAAL,CAAW5B,KAApC;AACA,YAAMiC,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,WAAK2P,GAAL,CAAStpB,OAAO,CAACmD,MAAjB;;AAEA,UAAI,KAAK4D,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5B,cAAMA,IAAI,GAAG,KAAKy5C,mBAAL,CAAyB,KAAKjxC,KAAL,CAAW5B,KAApC,CAAb;AACA,cAAMwhD,UAAU,GAAG,KAAKj3B,gBAAL,CAAsBtoB,IAAtB,EAA4B7I,IAA5B,CAAnB;AACAooD,QAAAA,UAAU,CAAC3+C,IAAX,GAAkB,uBAAlB;;AAEA,YAAI,KAAKrC,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAAJ,EAAgC;AAC9B,iBAAO6mD,UAAP;AACD;AACF;;AAED,WAAK18B,UAAL,CAAgBy8B,gBAAhB;AACD;AACF;;AAEDjvC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKgvC,gBAAL,MAA2B,MAAMhvC,aAAN,CAAoB,GAAGjP,SAAvB,CAAlC;AACD;;AAvBuD,CAA1D;;AA2BA,SAAStC,SAAT,CAAmBC,OAAnB,EAA4B5H,IAA5B,EAAkC;AAChC,SAAO4H,OAAO,CAACw8C,IAAR,CAAar8C,MAAM,IAAI;AAC5B,QAAIsgD,KAAK,CAACC,OAAN,CAAcvgD,MAAd,CAAJ,EAA2B;AACzB,aAAOA,MAAM,CAAC,CAAD,CAAN,KAAc/H,IAArB;AACD,KAFD,MAEO;AACL,aAAO+H,MAAM,KAAK/H,IAAlB;AACD;AACF,GANM,CAAP;AAOD;;AACD,SAAS8H,eAAT,CAAyBF,OAAzB,EAAkC5H,IAAlC,EAAwCuoD,MAAxC,EAAgD;AAC9C,QAAMxgD,MAAM,GAAGH,OAAO,CAAC81C,IAAR,CAAa31C,MAAM,IAAI;AACpC,QAAIsgD,KAAK,CAACC,OAAN,CAAcvgD,MAAd,CAAJ,EAA2B;AACzB,aAAOA,MAAM,CAAC,CAAD,CAAN,KAAc/H,IAArB;AACD,KAFD,MAEO;AACL,aAAO+H,MAAM,KAAK/H,IAAlB;AACD;AACF,GANc,CAAf;;AAQA,MAAI+H,MAAM,IAAIsgD,KAAK,CAACC,OAAN,CAAcvgD,MAAd,CAAd,EAAqC;AACnC,WAAOA,MAAM,CAAC,CAAD,CAAN,CAAUwgD,MAAV,CAAP;AACD;;AAED,SAAO,IAAP;AACD;;AACD,MAAMC,kBAAkB,GAAG,CAAC,SAAD,EAAY,OAAZ,EAAqB,QAArB,CAA3B;AACA,MAAMC,6BAA6B,GAAG,CAAC,MAAD,EAAS,KAAT,CAAtC;;AACA,SAASC,eAAT,CAAyB9gD,OAAzB,EAAkC;AAChC,MAAID,SAAS,CAACC,OAAD,EAAU,YAAV,CAAb,EAAsC;AACpC,QAAID,SAAS,CAACC,OAAD,EAAU,mBAAV,CAAb,EAA6C;AAC3C,YAAM,IAAIqhB,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED,UAAM0/B,sBAAsB,GAAG7gD,eAAe,CAACF,OAAD,EAAU,YAAV,EAAwB,wBAAxB,CAA9C;;AAEA,QAAI+gD,sBAAsB,IAAI,IAA9B,EAAoC;AAClC,YAAM,IAAI1/B,KAAJ,CAAU,wEAAwE,2DAAxE,GAAsI,kEAAtI,GAA2M,qEAArN,CAAN;AACD,KAFD,MAEO,IAAI,OAAO0/B,sBAAP,KAAkC,SAAtC,EAAiD;AACtD,YAAM,IAAI1/B,KAAJ,CAAU,6CAAV,CAAN;AACD;AACF;;AAED,MAAIthB,SAAS,CAACC,OAAD,EAAU,MAAV,CAAT,IAA8BD,SAAS,CAACC,OAAD,EAAU,YAAV,CAA3C,EAAoE;AAClE,UAAM,IAAIqhB,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,MAAIthB,SAAS,CAACC,OAAD,EAAU,cAAV,CAAT,IAAsCD,SAAS,CAACC,OAAD,EAAU,aAAV,CAAnD,EAA6E;AAC3E,UAAM,IAAIqhB,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,MAAIthB,SAAS,CAACC,OAAD,EAAU,kBAAV,CAAT,IAA0C,CAAC4gD,kBAAkB,CAAChkC,QAAnB,CAA4B1c,eAAe,CAACF,OAAD,EAAU,kBAAV,EAA8B,UAA9B,CAA3C,CAA/C,EAAsI;AACpI,UAAM,IAAIqhB,KAAJ,CAAU,iFAAiFu/B,kBAAkB,CAAChwC,GAAnB,CAAuBwE,CAAC,IAAK,IAAGA,CAAE,GAAlC,EAAsC4rC,IAAtC,CAA2C,IAA3C,CAA3F,CAAN;AACD;;AAED,MAAIjhD,SAAS,CAACC,OAAD,EAAU,kBAAV,CAAb,EAA4C;AAC1C;AACE,UAAID,SAAS,CAACC,OAAD,EAAU,kBAAV,CAAb,EAA4C;AAC1C,cAAM,IAAIqhB,KAAJ,CAAU,+DAAV,CAAN;AACD;;AAED,YAAM4/B,kCAAkC,GAAG/gD,eAAe,CAACF,OAAD,EAAU,kBAAV,EAA8B,SAA9B,CAA1D;;AAEA,UAAIihD,kCAAkC,KAAK,UAA3C,EAAuD;AACrD,cAAM,IAAI5/B,KAAJ,CAAU,+DAA+D,wDAA/D,GAA0H,sCAApI,CAAN;AACD;AACF;AACF;;AAED,MAAIthB,SAAS,CAACC,OAAD,EAAU,gBAAV,CAAT,IAAwC,CAAC6gD,6BAA6B,CAACjkC,QAA9B,CAAuC1c,eAAe,CAACF,OAAD,EAAU,gBAAV,EAA4B,YAA5B,CAAtD,CAA7C,EAA+I;AAC7I,UAAM,IAAIqhB,KAAJ,CAAU,iFAAiFw/B,6BAA6B,CAACjwC,GAA9B,CAAkCwE,CAAC,IAAK,IAAGA,CAAE,GAA7C,EAAiD4rC,IAAjD,CAAsD,IAAtD,CAA3F,CAAN;AACD;;AAED,MAAIjhD,SAAS,CAACC,OAAD,EAAU,oBAAV,CAAT,IAA4C,CAACD,SAAS,CAACC,OAAD,EAAU,eAAV,CAA1D,EAAsF;AACpF,UAAM6N,KAAK,GAAG,IAAIwT,KAAJ,CAAU,8FAAV,CAAd;AACAxT,IAAAA,KAAK,CAACqzC,cAAN,GAAuB,eAAvB;AACA,UAAMrzC,KAAN;AACD;AACF;;AACD,MAAMszC,YAAY,GAAG;AACnB/yC,EAAAA,MADmB;AAEnBwjB,EAAAA,GAFmB;AAGnB/Q,EAAAA,IAHmB;AAInBmuB,EAAAA,UAJmB;AAKnBqR,EAAAA,WALmB;AAMnBvB,EAAAA;AANmB,CAArB;AAQA,MAAMsC,gBAAgB,GAAGrqD,MAAM,CAACyV,IAAP,CAAY20C,YAAZ,CAAzB;AAEA,MAAME,cAAc,GAAG;AACrBC,EAAAA,UAAU,EAAE,QADS;AAErBC,EAAAA,cAAc,EAAE5/C,SAFK;AAGrB6/C,EAAAA,SAAS,EAAE,CAHU;AAIrBC,EAAAA,yBAAyB,EAAE,KAJN;AAKrBC,EAAAA,0BAA0B,EAAE,KALP;AAMrBC,EAAAA,2BAA2B,EAAE,KANR;AAOrBC,EAAAA,uBAAuB,EAAE,KAPJ;AAQrBC,EAAAA,sBAAsB,EAAE,KARH;AASrB7hD,EAAAA,OAAO,EAAE,EATY;AAUrB8hD,EAAAA,UAAU,EAAE,IAVS;AAWrBC,EAAAA,MAAM,EAAE,KAXa;AAYrBC,EAAAA,MAAM,EAAE,KAZa;AAarBC,EAAAA,8BAA8B,EAAE,KAbX;AAcrBt0C,EAAAA,aAAa,EAAE;AAdM,CAAvB;;AAgBA,SAASu0C,UAAT,CAAoBC,IAApB,EAA0B;AACxB,QAAM9pD,OAAO,GAAG,EAAhB;;AAEA,OAAK,MAAM+a,GAAX,IAAkBrc,MAAM,CAACyV,IAAP,CAAY60C,cAAZ,CAAlB,EAA+C;AAC7ChpD,IAAAA,OAAO,CAAC+a,GAAD,CAAP,GAAe+uC,IAAI,IAAIA,IAAI,CAAC/uC,GAAD,CAAJ,IAAa,IAArB,GAA4B+uC,IAAI,CAAC/uC,GAAD,CAAhC,GAAwCiuC,cAAc,CAACjuC,GAAD,CAArE;AACD;;AAED,SAAO/a,OAAP;AACD;;AAED,MAAM+pD,KAAN,CAAY;AACV1qD,EAAAA,WAAW,GAAG;AACZ,SAAKof,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKuxB,OAAL,GAAe,KAAK,CAApB;AACA,SAAKv7B,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKG,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKW,MAAL,GAAc,EAAd;AACA,SAAKy0C,gBAAL,GAAwB,CAAC,CAAzB;AACA,SAAK92B,SAAL,GAAiB,EAAjB;AACA,SAAKS,yBAAL,GAAiC,EAAjC;AACA,SAAKgD,sBAAL,GAA8B,KAA9B;AACA,SAAKszB,UAAL,GAAkB,KAAlB;AACA,SAAK7gC,MAAL,GAAc,KAAd;AACA,SAAKmF,kBAAL,GAA0B,KAA1B;AACA,SAAKwjB,cAAL,GAAsB,KAAtB;AACA,SAAK1W,cAAL,GAAsB,KAAtB;AACA,SAAKunB,gBAAL,GAAwB,KAAxB;AACA,SAAK4B,eAAL,GAAuB,KAAvB;AACA,SAAK0F,YAAL,GAAoB;AAClBC,MAAAA,wBAAwB,EAAE,CADR;AAElBC,MAAAA,aAAa,EAAE;AAFG,KAApB;AAIA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,0BAAL,GAAkC,KAAlC;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,cAAL,GAAsB,CAAC,EAAD,CAAtB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKjiD,gBAAL,GAAwB,EAAxB;AACA,SAAKE,eAAL,GAAuB,EAAvB;AACA,SAAKgB,YAAL,GAAoB,EAApB;AACA,SAAKR,mBAAL,GAA2B,IAA3B;AACA,SAAKsL,GAAL,GAAW,CAAX;AACA,SAAKtN,SAAL,GAAiB,CAAjB;AACA,SAAKsC,IAAL,GAAYpJ,OAAO,CAACO,GAApB;AACA,SAAK9B,KAAL,GAAa,IAAb;AACA,SAAK8H,KAAL,GAAa,CAAb;AACA,SAAKC,GAAL,GAAW,CAAX;AACA,SAAKkO,aAAL,GAAqB,IAArB;AACA,SAAKH,eAAL,GAAuB,IAAvB;AACA,SAAKD,YAAL,GAAoB,CAApB;AACA,SAAKG,UAAL,GAAkB,CAAlB;AACA,SAAKsI,OAAL,GAAe,CAACX,KAAK,CAACC,cAAP,CAAf;AACA,SAAKW,WAAL,GAAmB,IAAnB;AACA,SAAKuhC,WAAL,GAAmB,KAAnB;AACA,SAAK+L,YAAL,GAAoB,IAAI7qD,GAAJ,EAApB;AACA,SAAK8qD,mBAAL,GAA2B,EAA3B;AACA,SAAKC,YAAL,GAAoB,CAApB;AACD;;AAEDxtB,EAAAA,IAAI,CAACp9B,OAAD,EAAU;AACZ,SAAKye,MAAL,GAAcze,OAAO,CAACypD,UAAR,KAAuB,KAAvB,GAA+B,KAA/B,GAAuCzpD,OAAO,CAACipD,UAAR,KAAuB,QAA5E;AACA,SAAKjZ,OAAL,GAAehwC,OAAO,CAACmpD,SAAvB;AACA,SAAK10C,QAAL,GAAgB,KAAKG,MAAL,GAAc,KAAKi2C,WAAL,EAA9B;AACD;;AAEDA,EAAAA,WAAW,GAAG;AACZ,WAAO,IAAIvkD,QAAJ,CAAa,KAAK0pC,OAAlB,EAA2B,KAAKx7B,GAAL,GAAW,KAAKtN,SAA3C,CAAP;AACD;;AAED8rB,EAAAA,KAAK,CAAC83B,UAAD,EAAa;AAChB,UAAMviD,KAAK,GAAG,IAAIwhD,KAAJ,EAAd;AACA,UAAM51C,IAAI,GAAGzV,MAAM,CAACyV,IAAP,CAAY,IAAZ,CAAb;;AAEA,SAAK,IAAInL,CAAC,GAAG,CAAR,EAAWd,MAAM,GAAGiM,IAAI,CAACjM,MAA9B,EAAsCc,CAAC,GAAGd,MAA1C,EAAkDc,CAAC,EAAnD,EAAuD;AACrD,YAAM+R,GAAG,GAAG5G,IAAI,CAACnL,CAAD,CAAhB;AACA,UAAI8f,GAAG,GAAG,KAAK/N,GAAL,CAAV;;AAEA,UAAI,CAAC+vC,UAAD,IAAe1C,KAAK,CAACC,OAAN,CAAcv/B,GAAd,CAAnB,EAAuC;AACrCA,QAAAA,GAAG,GAAGA,GAAG,CAAC7e,KAAJ,EAAN;AACD;;AAED1B,MAAAA,KAAK,CAACwS,GAAD,CAAL,GAAa+N,GAAb;AACD;;AAED,WAAOvgB,KAAP;AACD;;AA3ES;;AA+EZ,IAAIwiD,QAAQ,GAAG,SAASC,OAAT,CAAiB7kD,IAAjB,EAAuB;AACpC,SAAOA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA7B;AACD,CAFD;;AAGA,MAAM8kD,iBAAiB,GAAG,IAAIrsC,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAR,CAA1B;AACA,MAAMssC,iCAAiC,GAAG;AACxCC,EAAAA,SAAS,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,GAAzB,EAA8B,GAA9B,CAD6B;AAExCC,EAAAA,GAAG,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,GAAb;AAFmC,CAA1C;AAIA,MAAMC,+BAA+B,GAAG,EAAxC;AACAA,+BAA+B,CAACC,GAAhC,GAAsC,CAAC,EAAD,EAAK,EAAL,CAAtC;AACAD,+BAA+B,CAACE,GAAhC,GAAsC,CAAC,GAAGF,+BAA+B,CAACC,GAApC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiD,EAAjD,EAAqD,EAArD,EAAyD,EAAzD,EAA6D,EAA7D,CAAtC;AACAD,+BAA+B,CAACG,GAAhC,GAAsC,CAAC,GAAGH,+BAA+B,CAACE,GAApC,EAAyC,EAAzC,EAA6C,EAA7C,CAAtC;AACAF,+BAA+B,CAACD,GAAhC,GAAsC,CAAC,GAAGC,+BAA+B,CAACG,GAApC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiD,EAAjD,EAAqD,EAArD,EAAyD,EAAzD,EAA6D,EAA7D,EAAiE,EAAjE,EAAqE,EAArE,EAAyE,EAAzE,EAA6E,GAA7E,EAAkF,GAAlF,EAAuF,GAAvF,CAAtC;;AACA,MAAMC,KAAN,CAAY;AACVpsD,EAAAA,WAAW,CAACkJ,KAAD,EAAQ;AACjB,SAAKiB,IAAL,GAAYjB,KAAK,CAACiB,IAAlB;AACA,SAAK3K,KAAL,GAAa0J,KAAK,CAAC1J,KAAnB;AACA,SAAK8H,KAAL,GAAa4B,KAAK,CAAC5B,KAAnB;AACA,SAAKC,GAAL,GAAW2B,KAAK,CAAC3B,GAAjB;AACA,SAAK0B,GAAL,GAAW,IAAI5B,cAAJ,CAAmB6B,KAAK,CAACkM,QAAzB,EAAmClM,KAAK,CAACqM,MAAzC,CAAX;AACD;;AAPS;;AAUZ,MAAM82C,SAAN,SAAwBp3C,WAAxB,CAAoC;AAClCjV,EAAAA,WAAW,CAACW,OAAD,EAAUgH,KAAV,EAAiB;AAC1B;AACA,SAAK8O,WAAL,GAAmB,KAAK,CAAxB;AACA,SAAK6zC,MAAL,GAAc,EAAd;AACA,SAAKphD,KAAL,GAAa,IAAIwhD,KAAJ,EAAb;AACA,SAAKxhD,KAAL,CAAW60B,IAAX,CAAgBp9B,OAAhB;AACA,SAAKgH,KAAL,GAAaA,KAAb;AACA,SAAKkB,MAAL,GAAclB,KAAK,CAACkB,MAApB;AACA,SAAK4N,WAAL,GAAmB,KAAnB;AACD;;AAED61C,EAAAA,SAAS,CAAC1rD,KAAD,EAAQ;AACf,SAAK0pD,MAAL,CAAYzhD,MAAZ,GAAqB,KAAKK,KAAL,CAAWqiD,YAAhC;AACA,SAAKjB,MAAL,CAAYlhD,IAAZ,CAAiBxI,KAAjB;AACA,MAAE,KAAKsI,KAAL,CAAWqiD,YAAb;AACD;;AAEDnrC,EAAAA,IAAI,GAAG;AACL,QAAI,CAAC,KAAK3J,WAAV,EAAuB;AACrB,WAAK81C,mBAAL;;AAEA,UAAI,KAAK5rD,OAAL,CAAa2pD,MAAjB,EAAyB;AACvB,aAAKgC,SAAL,CAAe,IAAIF,KAAJ,CAAU,KAAKljD,KAAf,CAAf;AACD;AACF;;AAED,SAAKA,KAAL,CAAWsM,UAAX,GAAwB,KAAKtM,KAAL,CAAW3B,GAAnC;AACA,SAAK2B,KAAL,CAAWmM,YAAX,GAA0B,KAAKnM,KAAL,CAAW5B,KAArC;AACA,SAAK4B,KAAL,CAAWuM,aAAX,GAA2B,KAAKvM,KAAL,CAAWqM,MAAtC;AACA,SAAKrM,KAAL,CAAWoM,eAAX,GAA6B,KAAKpM,KAAL,CAAWkM,QAAxC;AACA,SAAK6mB,SAAL;AACD;;AAED5R,EAAAA,GAAG,CAAClgB,IAAD,EAAO;AACR,QAAI,KAAKrC,KAAL,CAAWqC,IAAX,CAAJ,EAAsB;AACpB,WAAKiW,IAAL;AACA,aAAO,IAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAP;AACD;AACF;;AAEDtY,EAAAA,KAAK,CAACqC,IAAD,EAAO;AACV,WAAO,KAAKjB,KAAL,CAAWiB,IAAX,KAAoBA,IAA3B;AACD;;AAEDulB,EAAAA,SAAS,GAAG;AACV,UAAM88B,GAAG,GAAG,KAAKtjD,KAAjB;AACA,SAAKA,KAAL,GAAasjD,GAAG,CAAC74B,KAAJ,CAAU,IAAV,CAAb;AACA,SAAKld,WAAL,GAAmB,IAAnB;AACA,SAAK2J,IAAL;AACA,SAAK3J,WAAL,GAAmB,KAAnB;AACA,UAAMg2C,IAAI,GAAG,KAAKvjD,KAAlB;AACA,SAAKA,KAAL,GAAasjD,GAAb;AACA,WAAOC,IAAP;AACD;;AAEDntB,EAAAA,cAAc,GAAG;AACf,WAAO,KAAK6oB,mBAAL,CAAyB,KAAKj/C,KAAL,CAAWiM,GAApC,CAAP;AACD;;AAEDgzC,EAAAA,mBAAmB,CAAChzC,GAAD,EAAM;AACvBpO,IAAAA,cAAc,CAACgB,SAAf,GAA2BoN,GAA3B;AACA,UAAMu3C,IAAI,GAAG3lD,cAAc,CAACiB,IAAf,CAAoB,KAAKL,KAAzB,CAAb;AACA,WAAOwN,GAAG,GAAGu3C,IAAI,CAAC,CAAD,CAAJ,CAAQ7jD,MAArB;AACD;;AAEDg1C,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKl2C,KAAL,CAAW6uB,UAAX,CAAsB,KAAK8I,cAAL,EAAtB,CAAP;AACD;;AAEDqtB,EAAAA,cAAc,CAACx3C,GAAD,EAAM;AAClB,QAAIy3C,EAAE,GAAG,KAAKjlD,KAAL,CAAW6uB,UAAX,CAAsBrhB,GAAtB,CAAT;;AAEA,QAAI,CAACy3C,EAAE,GAAG,MAAN,MAAkB,MAAlB,IAA4B,EAAEz3C,GAAF,GAAQ,KAAKxN,KAAL,CAAWkB,MAAnD,EAA2D;AACzD,YAAMgkD,KAAK,GAAG,KAAKllD,KAAL,CAAW6uB,UAAX,CAAsBrhB,GAAtB,CAAd;;AAEA,UAAI,CAAC03C,KAAK,GAAG,MAAT,MAAqB,MAAzB,EAAiC;AAC/BD,QAAAA,EAAE,GAAG,WAAW,CAACA,EAAE,GAAG,KAAN,KAAgB,EAA3B,KAAkCC,KAAK,GAAG,KAA1C,CAAL;AACD;AACF;;AAED,WAAOD,EAAP;AACD;;AAEDE,EAAAA,SAAS,CAAC1tC,MAAD,EAAS;AAChB,SAAKlW,KAAL,CAAWkW,MAAX,GAAoBA,MAApB;;AAEA,QAAIA,MAAJ,EAAY;AACV,WAAKlW,KAAL,CAAWmiD,YAAX,CAAwBt2C,OAAxB,CAAgC,CAACe,OAAD,EAAUX,GAAV,KAAkB,KAAKO,KAAL,CAAWP,GAAX,EAAgBW,OAAhB,CAAlD;AACA,WAAK5M,KAAL,CAAWmiD,YAAX,CAAwB0B,KAAxB;AACD;AACF;;AAED9uC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAK/U,KAAL,CAAW4U,OAAX,CAAmB,KAAK5U,KAAL,CAAW4U,OAAX,CAAmBjV,MAAnB,GAA4B,CAA/C,CAAP;AACD;;AAEDozB,EAAAA,SAAS,GAAG;AACV,UAAMhe,UAAU,GAAG,KAAKA,UAAL,EAAnB;AACA,QAAI,EAAEA,UAAU,IAAI,IAAd,IAAsBA,UAAU,CAAChB,aAAnC,CAAJ,EAAuD,KAAK+vC,SAAL;AACvD,SAAK9jD,KAAL,CAAW5B,KAAX,GAAmB,KAAK4B,KAAL,CAAWiM,GAA9B;AACA,SAAKjM,KAAL,CAAWkM,QAAX,GAAsB,KAAKlM,KAAL,CAAWsiD,WAAX,EAAtB;;AAEA,QAAI,KAAKtiD,KAAL,CAAWiM,GAAX,IAAkB,KAAKtM,MAA3B,EAAmC;AACjC,WAAK2gB,WAAL,CAAiBzoB,OAAO,CAACO,GAAzB;AACA;AACD;;AAED,UAAM4b,QAAQ,GAAGe,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACf,QAA1D;;AAEA,QAAIA,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAFD,MAEO;AACL,WAAKqZ,gBAAL,CAAsB,KAAKo2B,cAAL,CAAoB,KAAKzjD,KAAL,CAAWiM,GAA/B,CAAtB;AACD;AACF;;AAED83C,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAc7lD,KAAd,EAAqBC,GAArB,EAA0B6N,QAA1B,EAAoCG,MAApC,EAA4C;AACrD,UAAMvM,OAAO,GAAG;AACdmB,MAAAA,IAAI,EAAE+iD,KAAK,GAAG,cAAH,GAAoB,aADjB;AAEd1tD,MAAAA,KAAK,EAAE2tD,IAFO;AAGd7lD,MAAAA,KAAK,EAAEA,KAHO;AAIdC,MAAAA,GAAG,EAAEA,GAJS;AAKd0B,MAAAA,GAAG,EAAE,IAAI5B,cAAJ,CAAmB+N,QAAnB,EAA6BG,MAA7B;AALS,KAAhB;AAOA,QAAI,KAAK5U,OAAL,CAAa2pD,MAAjB,EAAyB,KAAKgC,SAAL,CAAetjD,OAAf;AACzB,SAAKE,KAAL,CAAWkiD,QAAX,CAAoBhiD,IAApB,CAAyBJ,OAAzB;AACA,SAAKD,UAAL,CAAgBC,OAAhB;AACD;;AAEDuzB,EAAAA,gBAAgB,GAAG;AACjB,UAAMnnB,QAAQ,GAAG,KAAKlM,KAAL,CAAWsiD,WAAX,EAAjB;AACA,UAAMlkD,KAAK,GAAG,KAAK4B,KAAL,CAAWiM,GAAzB;AACA,UAAM5N,GAAG,GAAG,KAAKI,KAAL,CAAWkd,OAAX,CAAmB,IAAnB,EAAyB,KAAK3b,KAAL,CAAWiM,GAAX,GAAiB,CAA1C,CAAZ;AACA,QAAI5N,GAAG,KAAK,CAAC,CAAb,EAAgB,MAAM,KAAKmO,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAAC6I,mBAAhC,CAAN;AAChB,SAAK/K,KAAL,CAAWiM,GAAX,GAAiB5N,GAAG,GAAG,CAAvB;AACAb,IAAAA,UAAU,CAACqB,SAAX,GAAuBT,KAAvB;AACA,QAAIQ,KAAJ;;AAEA,WAAO,CAACA,KAAK,GAAGpB,UAAU,CAACsB,IAAX,CAAgB,KAAKL,KAArB,CAAT,KAAyCG,KAAK,CAACG,KAAN,GAAc,KAAKiB,KAAL,CAAWiM,GAAzE,EAA8E;AAC5E,QAAE,KAAKjM,KAAL,CAAWynC,OAAb;AACA,WAAKznC,KAAL,CAAWrB,SAAX,GAAuBC,KAAK,CAACG,KAAN,GAAcH,KAAK,CAAC,CAAD,CAAL,CAASe,MAA9C;AACD;;AAED,QAAI,KAAK4N,WAAT,EAAsB;AACtB,SAAKw2C,WAAL,CAAiB,IAAjB,EAAuB,KAAKtlD,KAAL,CAAWiD,KAAX,CAAiBtD,KAAK,GAAG,CAAzB,EAA4BC,GAA5B,CAAvB,EAAyDD,KAAzD,EAAgE,KAAK4B,KAAL,CAAWiM,GAA3E,EAAgFC,QAAhF,EAA0F,KAAKlM,KAAL,CAAWsiD,WAAX,EAA1F;AACD;;AAED4B,EAAAA,eAAe,CAACC,SAAD,EAAY;AACzB,UAAM/lD,KAAK,GAAG,KAAK4B,KAAL,CAAWiM,GAAzB;AACA,UAAMC,QAAQ,GAAG,KAAKlM,KAAL,CAAWsiD,WAAX,EAAjB;AACA,QAAIjb,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,IAAkBk4C,SAAxC,CAAT;;AAEA,QAAI,KAAKnkD,KAAL,CAAWiM,GAAX,GAAiB,KAAKtM,MAA1B,EAAkC;AAChC,aAAO,CAAChC,SAAS,CAAC0pC,EAAD,CAAV,IAAkB,EAAE,KAAKrnC,KAAL,CAAWiM,GAAb,GAAmB,KAAKtM,MAAjD,EAAyD;AACvD0nC,QAAAA,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAL;AACD;AACF;;AAED,QAAI,KAAKsB,WAAT,EAAsB;AACtB,SAAKw2C,WAAL,CAAiB,KAAjB,EAAwB,KAAKtlD,KAAL,CAAWiD,KAAX,CAAiBtD,KAAK,GAAG+lD,SAAzB,EAAoC,KAAKnkD,KAAL,CAAWiM,GAA/C,CAAxB,EAA6E7N,KAA7E,EAAoF,KAAK4B,KAAL,CAAWiM,GAA/F,EAAoGC,QAApG,EAA8G,KAAKlM,KAAL,CAAWsiD,WAAX,EAA9G;AACD;;AAEDwB,EAAAA,SAAS,GAAG;AACVM,IAAAA,IAAI,EAAE,OAAO,KAAKpkD,KAAL,CAAWiM,GAAX,GAAiB,KAAKtM,MAA7B,EAAqC;AACzC,YAAM0nC,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAX;;AAEA,cAAQo7B,EAAR;AACE,aAAK,EAAL;AACA,aAAK,GAAL;AACA,aAAK,CAAL;AACE,YAAE,KAAKrnC,KAAL,CAAWiM,GAAb;AACA;;AAEF,aAAK,EAAL;AACE,cAAI,KAAKxN,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAAlD,EAAsD;AACpD,cAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACD;;AAEH,aAAK,EAAL;AACA,aAAK,IAAL;AACA,aAAK,IAAL;AACE,YAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACA,YAAE,KAAKjM,KAAL,CAAWynC,OAAb;AACA,eAAKznC,KAAL,CAAWrB,SAAX,GAAuB,KAAKqB,KAAL,CAAWiM,GAAlC;AACA;;AAEF,aAAK,EAAL;AACE,kBAAQ,KAAKxN,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAR;AACE,iBAAK,EAAL;AACE,mBAAKonB,gBAAL;AACA;;AAEF,iBAAK,EAAL;AACE,mBAAK6wB,eAAL,CAAqB,CAArB;AACA;;AAEF;AACE,oBAAME,IAAN;AAVJ;;AAaA;;AAEF;AACE,cAAItmD,YAAY,CAACupC,EAAD,CAAhB,EAAsB;AACpB,cAAE,KAAKrnC,KAAL,CAAWiM,GAAb;AACD,WAFD,MAEO;AACL,kBAAMm4C,IAAN;AACD;;AAzCL;AA4CD;AACF;;AAED9jC,EAAAA,WAAW,CAACrf,IAAD,EAAOsf,GAAP,EAAY;AACrB,SAAKvgB,KAAL,CAAW3B,GAAX,GAAiB,KAAK2B,KAAL,CAAWiM,GAA5B;AACA,SAAKjM,KAAL,CAAWqM,MAAX,GAAoB,KAAKrM,KAAL,CAAWsiD,WAAX,EAApB;AACA,UAAMttC,QAAQ,GAAG,KAAKhV,KAAL,CAAWiB,IAA5B;AACA,SAAKjB,KAAL,CAAWiB,IAAX,GAAkBA,IAAlB;AACA,SAAKjB,KAAL,CAAW1J,KAAX,GAAmBiqB,GAAnB;AACA,QAAI,CAAC,KAAKhT,WAAV,EAAuB,KAAKnW,aAAL,CAAmB4d,QAAnB;AACxB;;AAEDqvC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKrkD,KAAL,CAAWiM,GAAX,KAAmB,CAAnB,IAAwB,KAAKq4C,qBAAL,EAA5B,EAA0D;AACxD;AACD;;AAED,UAAMC,OAAO,GAAG,KAAKvkD,KAAL,CAAWiM,GAAX,GAAiB,CAAjC;AACA,UAAMiL,IAAI,GAAG,KAAKusC,cAAL,CAAoBc,OAApB,CAAb;;AAEA,QAAIrtC,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8B;AAC5B,YAAM,KAAK1K,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACyH,wBAAzC,CAAN;AACD;;AAED,QAAIuN,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAAT,IAAe,KAAK/X,SAAL,CAAe,gBAAf,CAAnC,EAAqE;AACnE,WAAK2/C,YAAL,CAAkB,gBAAlB;;AAEA,UAAI,KAAKx/C,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,MAA7D,EAAqE;AACnE,cAAM,KAAKkN,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2BiL,IAAI,KAAK,GAAT,GAAehV,aAAa,CAACqG,4CAA7B,GAA4ErG,aAAa,CAACsH,2CAArH,CAAN;AACD;;AAED,UAAI0N,IAAI,KAAK,GAAb,EAAkB;AAChB,aAAKoJ,WAAL,CAAiBzoB,OAAO,CAACe,UAAzB;AACD,OAFD,MAEO;AACL,aAAK0nB,WAAL,CAAiBzoB,OAAO,CAACS,YAAzB;AACD;;AAED,WAAK0H,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACD,KAdD,MAcO,IAAI4J,iBAAiB,CAACqB,IAAD,CAArB,EAA6B;AAClC,QAAE,KAAKlX,KAAL,CAAWiM,GAAb;AACA,WAAKqU,WAAL,CAAiBzoB,OAAO,CAACM,WAAzB,EAAsC,KAAKg1B,SAAL,CAAejW,IAAf,CAAtC;AACD,KAHM,MAGA,IAAIA,IAAI,KAAK,EAAb,EAAiB;AACtB,QAAE,KAAKlX,KAAL,CAAWiM,GAAb;AACA,WAAKqU,WAAL,CAAiBzoB,OAAO,CAACM,WAAzB,EAAsC,KAAKg1B,SAAL,EAAtC;AACD,KAHM,MAGA;AACL,WAAKI,QAAL,CAAc11B,OAAO,CAACiC,IAAtB,EAA4B,CAA5B;AACD;AACF;;AAED0qD,EAAAA,aAAa,GAAG;AACd,UAAMttC,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIiL,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8B;AAC5B,WAAKutC,UAAL,CAAgB,IAAhB;AACA;AACD;;AAED,QAAIvtC,IAAI,KAAK,EAAT,IAAe,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAAjE,EAAqE;AACnE,WAAKjM,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACA,WAAKqU,WAAL,CAAiBzoB,OAAO,CAAC6B,QAAzB;AACD,KAHD,MAGO;AACL,QAAE,KAAKsG,KAAL,CAAWiM,GAAb;AACA,WAAKqU,WAAL,CAAiBzoB,OAAO,CAACwB,GAAzB;AACD;AACF;;AAEDqrD,EAAAA,eAAe,GAAG;AAChB,QAAI,KAAK1kD,KAAL,CAAW6U,WAAX,IAA0B,CAAC,KAAK7U,KAAL,CAAW6gB,MAA1C,EAAkD;AAChD,QAAE,KAAK7gB,KAAL,CAAWiM,GAAb;AACA,WAAK04C,UAAL;AACA;AACD;;AAED,UAAMztC,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIiL,IAAI,KAAK,EAAb,EAAiB;AACf,WAAKqW,QAAL,CAAc11B,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACD,KAFD,MAEO;AACL,WAAKszB,QAAL,CAAc11B,OAAO,CAACqD,KAAtB,EAA6B,CAA7B;AACD;AACF;;AAEDopD,EAAAA,qBAAqB,GAAG;AACtB,QAAI,KAAKtkD,KAAL,CAAWiM,GAAX,KAAmB,CAAnB,IAAwB,KAAKtM,MAAL,GAAc,CAA1C,EAA6C,OAAO,KAAP;AAC7C,QAAI0nC,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAT;AACA,QAAIo7B,EAAE,KAAK,EAAX,EAAe,OAAO,KAAP;AACf,UAAMjpC,KAAK,GAAG,KAAK4B,KAAL,CAAWiM,GAAzB;AACA,SAAKjM,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;;AAEA,WAAO,CAACtO,SAAS,CAAC0pC,EAAD,CAAV,IAAkB,EAAE,KAAKrnC,KAAL,CAAWiM,GAAb,GAAmB,KAAKtM,MAAjD,EAAyD;AACvD0nC,MAAAA,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAL;AACD;;AAED,UAAM3V,KAAK,GAAG,KAAKmI,KAAL,CAAWiD,KAAX,CAAiBtD,KAAK,GAAG,CAAzB,EAA4B,KAAK4B,KAAL,CAAWiM,GAAvC,CAAd;AACA,SAAKqU,WAAL,CAAiBzoB,OAAO,CAACkC,oBAAzB,EAA+CzD,KAA/C;AACA,WAAO,IAAP;AACD;;AAEDu8B,EAAAA,qBAAqB,CAACj1B,IAAD,EAAO;AAC1B,QAAIqD,IAAI,GAAGrD,IAAI,KAAK,EAAT,GAAc/F,OAAO,CAACoD,IAAtB,GAA6BpD,OAAO,CAACmD,MAAhD;AACA,QAAI4pD,KAAK,GAAG,CAAZ;AACA,QAAI1tC,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAX;AACA,UAAM4I,WAAW,GAAG,KAAK7U,KAAL,CAAW6U,WAA/B;;AAEA,QAAIjX,IAAI,KAAK,EAAT,IAAesZ,IAAI,KAAK,EAA5B,EAAgC;AAC9B0tC,MAAAA,KAAK;AACL1tC,MAAAA,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAP;AACAhL,MAAAA,IAAI,GAAGpJ,OAAO,CAACsD,QAAf;AACD;;AAED,QAAI+b,IAAI,KAAK,EAAT,IAAe,CAACrC,WAApB,EAAiC;AAC/B+vC,MAAAA,KAAK;AACL3jD,MAAAA,IAAI,GAAGpJ,OAAO,CAACoC,MAAf;AACD;;AAED,SAAKszB,QAAL,CAActsB,IAAd,EAAoB2jD,KAApB;AACD;;AAED5xB,EAAAA,kBAAkB,CAACp1B,IAAD,EAAO;AACvB,UAAMsZ,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIiL,IAAI,KAAKtZ,IAAb,EAAmB;AACjB,UAAI,KAAKa,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAAlD,EAAsD;AACpD,aAAKshB,QAAL,CAAc11B,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACD,OAFD,MAEO;AACL,aAAKszB,QAAL,CAAc3vB,IAAI,KAAK,GAAT,GAAe/F,OAAO,CAAC0C,SAAvB,GAAmC1C,OAAO,CAAC2C,UAAzD,EAAqE,CAArE;AACD;;AAED;AACD;;AAED,QAAIoD,IAAI,KAAK,GAAb,EAAkB;AAChB,UAAIsZ,IAAI,KAAK,EAAb,EAAiB;AACf,aAAKqW,QAAL,CAAc11B,OAAO,CAACwC,QAAtB,EAAgC,CAAhC;AACA;AACD;;AAED,UAAI,KAAK8E,SAAL,CAAe,gBAAf,KAAoC+X,IAAI,KAAK,GAAjD,EAAsD;AACpD,YAAI,KAAK5X,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,gBAAM,KAAKkN,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACmG,yCAAzC,CAAN;AACD;;AAED,aAAKklB,QAAL,CAAc11B,OAAO,CAACiB,SAAtB,EAAiC,CAAjC;AACA;AACD;;AAED,UAAI,KAAKqG,SAAL,CAAe,gBAAf,KAAoC+X,IAAI,KAAK,EAAjD,EAAqD;AACnD,YAAI,KAAK5X,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,gBAAM,KAAKkN,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACoH,wCAAzC,CAAN;AACD;;AAED,aAAKikB,QAAL,CAAc11B,OAAO,CAACY,WAAtB,EAAmC,CAAnC;AACA;AACD;AACF;;AAED,QAAIye,IAAI,KAAK,EAAb,EAAiB;AACf,WAAKqW,QAAL,CAAc11B,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACA;AACD;;AAED,SAAKszB,QAAL,CAAc3vB,IAAI,KAAK,GAAT,GAAe/F,OAAO,CAAC4C,SAAvB,GAAmC5C,OAAO,CAAC8C,UAAzD,EAAqE,CAArE;AACD;;AAEDkqD,EAAAA,eAAe,GAAG;AAChB,UAAM3tC,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIiL,IAAI,KAAK,EAAb,EAAiB;AACf,WAAKqW,QAAL,CAAc11B,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACD,KAFD,MAEO;AACL,WAAKszB,QAAL,CAAc11B,OAAO,CAAC6C,UAAtB,EAAkC,CAAlC;AACD;AACF;;AAEDoqD,EAAAA,kBAAkB,CAAClnD,IAAD,EAAO;AACvB,UAAMsZ,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIiL,IAAI,KAAKtZ,IAAb,EAAmB;AACjB,UAAIsZ,IAAI,KAAK,EAAT,IAAe,CAAC,KAAKR,QAArB,IAAiC,KAAKjY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAA/E,KAAsF,KAAKjM,KAAL,CAAWsM,UAAX,KAA0B,CAA1B,IAA+B,KAAK8I,qBAAL,EAArH,CAAJ,EAAwJ;AACtJ,aAAK8uC,eAAL,CAAqB,CAArB;AACA,aAAKJ,SAAL;AACA,aAAK/wB,SAAL;AACA;AACD;;AAED,WAAKxF,QAAL,CAAc11B,OAAO,CAACqC,MAAtB,EAA8B,CAA9B;AACA;AACD;;AAED,QAAIgd,IAAI,KAAK,EAAb,EAAiB;AACf,WAAKqW,QAAL,CAAc11B,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACD,KAFD,MAEO;AACL,WAAKszB,QAAL,CAAc11B,OAAO,CAACkD,OAAtB,EAA+B,CAA/B;AACD;AACF;;AAEDoiD,EAAAA,eAAe,CAACv/C,IAAD,EAAO;AACpB,UAAMsZ,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;AACA,QAAI84C,IAAI,GAAG,CAAX;;AAEA,QAAI7tC,IAAI,KAAKtZ,IAAb,EAAmB;AACjBmnD,MAAAA,IAAI,GAAGnnD,IAAI,KAAK,EAAT,IAAe,KAAKa,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAA7D,GAAkE,CAAlE,GAAsE,CAA7E;;AAEA,UAAI,KAAKxN,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB84C,IAAvC,MAAiD,EAArD,EAAyD;AACvD,aAAKx3B,QAAL,CAAc11B,OAAO,CAACoC,MAAtB,EAA8B8qD,IAAI,GAAG,CAArC;AACA;AACD;;AAED,WAAKx3B,QAAL,CAAc11B,OAAO,CAACiD,QAAtB,EAAgCiqD,IAAhC;AACA;AACD;;AAED,QAAI7tC,IAAI,KAAK,EAAT,IAAetZ,IAAI,KAAK,EAAxB,IAA8B,CAAC,KAAK8Y,QAApC,IAAgD,KAAKjY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAA9F,IAAoG,KAAKxN,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAAtJ,EAA0J;AACxJ,WAAKi4C,eAAL,CAAqB,CAArB;AACA,WAAKJ,SAAL;AACA,WAAK/wB,SAAL;AACA;AACD;;AAED,QAAI7b,IAAI,KAAK,EAAb,EAAiB;AACf6tC,MAAAA,IAAI,GAAG,CAAP;AACD;;AAED,SAAKx3B,QAAL,CAAc11B,OAAO,CAACgD,UAAtB,EAAkCkqD,IAAlC;AACD;;AAEDC,EAAAA,iBAAiB,CAACpnD,IAAD,EAAO;AACtB,UAAMsZ,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIiL,IAAI,KAAK,EAAb,EAAiB;AACf,WAAKqW,QAAL,CAAc11B,OAAO,CAAC+C,QAAtB,EAAgC,KAAK6D,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAA9C,GAAmD,CAAnD,GAAuD,CAAvF;AACA;AACD;;AAED,QAAIrO,IAAI,KAAK,EAAT,IAAesZ,IAAI,KAAK,EAA5B,EAAgC;AAC9B,WAAKlX,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACA,WAAKqU,WAAL,CAAiBzoB,OAAO,CAAC2B,KAAzB;AACA;AACD;;AAED,SAAK+zB,QAAL,CAAc3vB,IAAI,KAAK,EAAT,GAAc/F,OAAO,CAACmC,EAAtB,GAA2BnC,OAAO,CAACsC,IAAjD,EAAuD,CAAvD;AACD;;AAED8qD,EAAAA,kBAAkB,GAAG;AACnB,UAAM/tC,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;AACA,UAAMi5C,KAAK,GAAG,KAAKzmD,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAd;;AAEA,QAAIiL,IAAI,KAAK,EAAb,EAAiB;AACf,UAAIguC,KAAK,KAAK,EAAd,EAAkB;AAChB,aAAK33B,QAAL,CAAc11B,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACD,OAFD,MAEO;AACL,aAAKszB,QAAL,CAAc11B,OAAO,CAACyC,iBAAtB,EAAyC,CAAzC;AACD;AACF,KAND,MAMO,IAAI4c,IAAI,KAAK,EAAT,IAAe,EAAEguC,KAAK,IAAI,EAAT,IAAeA,KAAK,IAAI,EAA1B,CAAnB,EAAkD;AACvD,WAAKllD,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACA,WAAKqU,WAAL,CAAiBzoB,OAAO,CAAC0B,WAAzB;AACD,KAHM,MAGA;AACL,QAAE,KAAKyG,KAAL,CAAWiM,GAAb;AACA,WAAKqU,WAAL,CAAiBzoB,OAAO,CAACyB,QAAzB;AACD;AACF;;AAED+zB,EAAAA,gBAAgB,CAACzvB,IAAD,EAAO;AACrB,YAAQA,IAAR;AACE,WAAK,EAAL;AACE,aAAK4mD,aAAL;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKxkD,KAAL,CAAWiM,GAAb;AACA,aAAKqU,WAAL,CAAiBzoB,OAAO,CAACkB,MAAzB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKiH,KAAL,CAAWiM,GAAb;AACA,aAAKqU,WAAL,CAAiBzoB,OAAO,CAACmB,MAAzB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKgH,KAAL,CAAWiM,GAAb;AACA,aAAKqU,WAAL,CAAiBzoB,OAAO,CAACqB,IAAzB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAK8G,KAAL,CAAWiM,GAAb;AACA,aAAKqU,WAAL,CAAiBzoB,OAAO,CAACoB,KAAzB;AACA;;AAEF,WAAK,EAAL;AACE,YAAI,KAAKkG,SAAL,CAAe,gBAAf,KAAoC,KAAKV,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,GAAtF,EAA2F;AACzF,cAAI,KAAK3M,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,kBAAM,KAAKkN,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACqH,0CAAzC,CAAN;AACD;;AAED,eAAK+W,WAAL,CAAiBzoB,OAAO,CAACU,WAAzB;AACA,eAAKyH,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACD,SAPD,MAOO;AACL,YAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACA,eAAKqU,WAAL,CAAiBzoB,OAAO,CAACQ,QAAzB;AACD;;AAED;;AAEF,WAAK,EAAL;AACE,UAAE,KAAK2H,KAAL,CAAWiM,GAAb;AACA,aAAKqU,WAAL,CAAiBzoB,OAAO,CAACW,QAAzB;AACA;;AAEF,WAAK,GAAL;AACE,YAAI,KAAK2G,SAAL,CAAe,gBAAf,KAAoC,KAAKV,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,GAAtF,EAA2F;AACzF,cAAI,KAAK3M,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,kBAAM,KAAKkN,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACoG,2CAAzC,CAAN;AACD;;AAED,eAAKgY,WAAL,CAAiBzoB,OAAO,CAACc,SAAzB;AACA,eAAKqH,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACD,SAPD,MAOO;AACL,YAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACA,eAAKqU,WAAL,CAAiBzoB,OAAO,CAACa,MAAzB;AACD;;AAED;;AAEF,WAAK,GAAL;AACE,UAAE,KAAKsH,KAAL,CAAWiM,GAAb;AACA,aAAKqU,WAAL,CAAiBzoB,OAAO,CAACgB,MAAzB;AACA;;AAEF,WAAK,EAAL;AACE,YAAI,KAAKsG,SAAL,CAAe,cAAf,KAAkC,KAAKV,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,EAApF,EAAwF;AACtF,eAAKshB,QAAL,CAAc11B,OAAO,CAACuB,WAAtB,EAAmC,CAAnC;AACD,SAFD,MAEO;AACL,YAAE,KAAK4G,KAAL,CAAWiM,GAAb;AACA,eAAKqU,WAAL,CAAiBzoB,OAAO,CAACsB,KAAzB;AACD;;AAED;;AAEF,WAAK,EAAL;AACE,aAAK8rD,kBAAL;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKjlD,KAAL,CAAWiM,GAAb;AACA,aAAKqU,WAAL,CAAiBzoB,OAAO,CAAC8B,SAAzB;AACA;;AAEF,WAAK,EAAL;AACE;AACE,gBAAMud,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,cAAIiL,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAA7B,EAAiC;AAC/B,iBAAKiuC,eAAL,CAAqB,EAArB;AACA;AACD;;AAED,cAAIjuC,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAA7B,EAAiC;AAC/B,iBAAKiuC,eAAL,CAAqB,CAArB;AACA;AACD;;AAED,cAAIjuC,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAC9B,iBAAKiuC,eAAL,CAAqB,CAArB;AACA;AACD;AACF;;AAEH,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKV,UAAL,CAAgB,KAAhB;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKW,UAAL,CAAgBxnD,IAAhB;AACA;;AAEF,WAAK,EAAL;AACE,aAAK8mD,eAAL;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAK7xB,qBAAL,CAA2Bj1B,IAA3B;AACA;;AAEF,WAAK,GAAL;AACA,WAAK,EAAL;AACE,aAAKo1B,kBAAL,CAAwBp1B,IAAxB;AACA;;AAEF,WAAK,EAAL;AACE,aAAKinD,eAAL;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKC,kBAAL,CAAwBlnD,IAAxB;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKu/C,eAAL,CAAqBv/C,IAArB;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKonD,iBAAL,CAAuBpnD,IAAvB;AACA;;AAEF,WAAK,GAAL;AACE,aAAK2vB,QAAL,CAAc11B,OAAO,CAACuC,KAAtB,EAA6B,CAA7B;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAK4F,KAAL,CAAWiM,GAAb;AACA,aAAKqU,WAAL,CAAiBzoB,OAAO,CAACgC,EAAzB;AACA;;AAEF,WAAK,EAAL;AACE,aAAKwqD,oBAAL;AACA;;AAEF,WAAK,EAAL;AACE,aAAKgB,QAAL;AACA;;AAEF;AACE,YAAIxvC,iBAAiB,CAACjY,IAAD,CAArB,EAA6B;AAC3B,eAAKynD,QAAL,CAAcznD,IAAd;AACA;AACD;;AA/KL;;AAmLA,UAAM,KAAK4O,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAAC2D,wBAAzC,EAAmEuI,MAAM,CAAC45B,aAAP,CAAqBpqC,IAArB,CAAnE,CAAN;AACD;;AAED2vB,EAAAA,QAAQ,CAACtsB,IAAD,EAAO8jD,IAAP,EAAa;AACnB,UAAMnd,GAAG,GAAG,KAAKnpC,KAAL,CAAWiD,KAAX,CAAiB,KAAK1B,KAAL,CAAWiM,GAA5B,EAAiC,KAAKjM,KAAL,CAAWiM,GAAX,GAAiB84C,IAAlD,CAAZ;AACA,SAAK/kD,KAAL,CAAWiM,GAAX,IAAkB84C,IAAlB;AACA,SAAKzkC,WAAL,CAAiBrf,IAAjB,EAAuB2mC,GAAvB;AACD;;AAED+c,EAAAA,UAAU,GAAG;AACX,UAAMvmD,KAAK,GAAG,KAAK4B,KAAL,CAAWiM,GAAzB;AACA,QAAIq5C,OAAJ,EAAa3qC,OAAb;;AAEA,aAAS;AACP,UAAI,KAAK3a,KAAL,CAAWiM,GAAX,IAAkB,KAAKtM,MAA3B,EAAmC;AACjC,cAAM,KAAK6M,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAAC8I,kBAAhC,CAAN;AACD;;AAED,YAAMq8B,EAAE,GAAG,KAAK5oC,KAAL,CAAW8mD,MAAX,CAAkB,KAAKvlD,KAAL,CAAWiM,GAA7B,CAAX;;AAEA,UAAI1O,SAAS,CAACuY,IAAV,CAAeuxB,EAAf,CAAJ,EAAwB;AACtB,cAAM,KAAK76B,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAAC8I,kBAAhC,CAAN;AACD;;AAED,UAAIs6C,OAAJ,EAAa;AACXA,QAAAA,OAAO,GAAG,KAAV;AACD,OAFD,MAEO;AACL,YAAIje,EAAE,KAAK,GAAX,EAAgB;AACd1sB,UAAAA,OAAO,GAAG,IAAV;AACD,SAFD,MAEO,IAAI0sB,EAAE,KAAK,GAAP,IAAc1sB,OAAlB,EAA2B;AAChCA,UAAAA,OAAO,GAAG,KAAV;AACD,SAFM,MAEA,IAAI0sB,EAAE,KAAK,GAAP,IAAc,CAAC1sB,OAAnB,EAA4B;AACjC;AACD;;AAED2qC,QAAAA,OAAO,GAAGje,EAAE,KAAK,IAAjB;AACD;;AAED,QAAE,KAAKrnC,KAAL,CAAWiM,GAAb;AACD;;AAED,UAAMu5C,OAAO,GAAG,KAAK/mD,KAAL,CAAWiD,KAAX,CAAiBtD,KAAjB,EAAwB,KAAK4B,KAAL,CAAWiM,GAAnC,CAAhB;AACA,MAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACA,QAAIw5C,IAAI,GAAG,EAAX;;AAEA,WAAO,KAAKzlD,KAAL,CAAWiM,GAAX,GAAiB,KAAKtM,MAA7B,EAAqC;AACnC,YAAM+lD,IAAI,GAAG,KAAKjnD,KAAL,CAAW,KAAKuB,KAAL,CAAWiM,GAAtB,CAAb;AACA,YAAM05C,QAAQ,GAAG,KAAKlC,cAAL,CAAoB,KAAKzjD,KAAL,CAAWiM,GAA/B,CAAjB;;AAEA,UAAIy2C,iBAAiB,CAACrjD,GAAlB,CAAsBqmD,IAAtB,CAAJ,EAAiC;AAC/B,YAAID,IAAI,CAAC9pC,OAAL,CAAa+pC,IAAb,IAAqB,CAAC,CAA1B,EAA6B;AAC3B,eAAKl5C,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAX,GAAiB,CAA5B,EAA+B/J,aAAa,CAAC8B,oBAA7C;AACD;AACF,OAJD,MAIO,IAAIgS,gBAAgB,CAAC2vC,QAAD,CAAhB,IAA8BA,QAAQ,KAAK,EAA/C,EAAmD;AACxD,aAAKn5C,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAX,GAAiB,CAA5B,EAA+B/J,aAAa,CAACoE,oBAA7C;AACD,OAFM,MAEA;AACL;AACD;;AAED,QAAE,KAAKtG,KAAL,CAAWiM,GAAb;AACAw5C,MAAAA,IAAI,IAAIC,IAAR;AACD;;AAED,SAAKplC,WAAL,CAAiBzoB,OAAO,CAACI,MAAzB,EAAiC;AAC/B0V,MAAAA,OAAO,EAAE63C,OADsB;AAE/B53C,MAAAA,KAAK,EAAE63C;AAFwB,KAAjC;AAID;;AAEDG,EAAAA,OAAO,CAACC,KAAD,EAAQC,GAAR,EAAaC,QAAb,EAAuBC,iBAAiB,GAAG,IAA3C,EAAiD;AACtD,UAAM5nD,KAAK,GAAG,KAAK4B,KAAL,CAAWiM,GAAzB;AACA,UAAMg6C,iBAAiB,GAAGJ,KAAK,KAAK,EAAV,GAAelD,iCAAiC,CAACE,GAAjD,GAAuDF,iCAAiC,CAACC,SAAnH;AACA,UAAMsD,eAAe,GAAGL,KAAK,KAAK,EAAV,GAAe/C,+BAA+B,CAACD,GAA/C,GAAqDgD,KAAK,KAAK,EAAV,GAAe/C,+BAA+B,CAACG,GAA/C,GAAqD4C,KAAK,KAAK,CAAV,GAAc/C,+BAA+B,CAACE,GAA9C,GAAoDF,+BAA+B,CAACC,GAAtN;AACA,QAAI/3B,OAAO,GAAG,KAAd;AACA,QAAIm7B,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAI1lD,CAAC,GAAG,CAAR,EAAWqN,CAAC,GAAGg4C,GAAG,IAAI,IAAP,GAAcM,QAAd,GAAyBN,GAA7C,EAAkDrlD,CAAC,GAAGqN,CAAtD,EAAyD,EAAErN,CAA3D,EAA8D;AAC5D,YAAM7C,IAAI,GAAG,KAAKa,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAb;AACA,UAAIsU,GAAJ;;AAEA,UAAI3iB,IAAI,KAAK,EAAb,EAAiB;AACf,cAAMyoD,IAAI,GAAG,KAAK5nD,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;AACA,cAAMiL,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,CAAb;;AAEA,YAAIi6C,eAAe,CAACvqC,OAAhB,CAAwBzE,IAAxB,MAAkC,CAAC,CAAvC,EAA0C;AACxC,eAAK1K,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAAC+H,0BAAzC;AACD,SAFD,MAEO,IAAIg8C,iBAAiB,CAACtqC,OAAlB,CAA0B0qC,IAA1B,IAAkC,CAAC,CAAnC,IAAwCJ,iBAAiB,CAACtqC,OAAlB,CAA0BzE,IAA1B,IAAkC,CAAC,CAA3E,IAAgFovC,MAAM,CAACC,KAAP,CAAarvC,IAAb,CAApF,EAAwG;AAC7G,eAAK1K,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAAC+H,0BAAzC;AACD;;AAED,YAAI,CAAC+7C,iBAAL,EAAwB;AACtB,eAAKx5C,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACmF,gCAAzC;AACD;;AAED,UAAE,KAAKrH,KAAL,CAAWiM,GAAb;AACA;AACD;;AAED,UAAIrO,IAAI,IAAI,EAAZ,EAAgB;AACd2iB,QAAAA,GAAG,GAAG3iB,IAAI,GAAG,EAAP,GAAY,EAAlB;AACD,OAFD,MAEO,IAAIA,IAAI,IAAI,EAAZ,EAAgB;AACrB2iB,QAAAA,GAAG,GAAG3iB,IAAI,GAAG,EAAP,GAAY,EAAlB;AACD,OAFM,MAEA,IAAI4kD,QAAQ,CAAC5kD,IAAD,CAAZ,EAAoB;AACzB2iB,QAAAA,GAAG,GAAG3iB,IAAI,GAAG,EAAb;AACD,OAFM,MAEA;AACL2iB,QAAAA,GAAG,GAAG6lC,QAAN;AACD;;AAED,UAAI7lC,GAAG,IAAIslC,KAAX,EAAkB;AAChB,YAAI,KAAKpuD,OAAL,CAAasV,aAAb,IAA8BwT,GAAG,IAAI,CAAzC,EAA4C;AAC1CA,UAAAA,GAAG,GAAG,CAAN;AACA,eAAK/T,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAX,GAAmBqC,CAAnB,GAAuB,CAAlC,EAAqCyB,aAAa,CAACkD,YAAnD,EAAiEygD,KAAjE;AACD,SAHD,MAGO,IAAIE,QAAJ,EAAc;AACnBxlC,UAAAA,GAAG,GAAG,CAAN;AACAyK,UAAAA,OAAO,GAAG,IAAV;AACD,SAHM,MAGA;AACL;AACD;AACF;;AAED,QAAE,KAAKhrB,KAAL,CAAWiM,GAAb;AACAk6C,MAAAA,KAAK,GAAGA,KAAK,GAAGN,KAAR,GAAgBtlC,GAAxB;AACD;;AAED,QAAI,KAAKvgB,KAAL,CAAWiM,GAAX,KAAmB7N,KAAnB,IAA4B0nD,GAAG,IAAI,IAAP,IAAe,KAAK9lD,KAAL,CAAWiM,GAAX,GAAiB7N,KAAjB,KAA2B0nD,GAAtE,IAA6E96B,OAAjF,EAA0F;AACxF,aAAO,IAAP;AACD;;AAED,WAAOm7B,KAAP;AACD;;AAEDhB,EAAAA,eAAe,CAACU,KAAD,EAAQ;AACrB,UAAMznD,KAAK,GAAG,KAAK4B,KAAL,CAAWiM,GAAzB;AACA,QAAIu6C,QAAQ,GAAG,KAAf;AACA,SAAKxmD,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACA,UAAMsU,GAAG,GAAG,KAAKqlC,OAAL,CAAaC,KAAb,CAAZ;;AAEA,QAAItlC,GAAG,IAAI,IAAX,EAAiB;AACf,WAAK/T,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAX,GAAmB,CAA9B,EAAiC8D,aAAa,CAACkD,YAA/C,EAA6DygD,KAA7D;AACD;;AAED,UAAM3uC,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAb;;AAEA,QAAIiL,IAAI,KAAK,GAAb,EAAkB;AAChB,QAAE,KAAKlX,KAAL,CAAWiM,GAAb;AACAu6C,MAAAA,QAAQ,GAAG,IAAX;AACD,KAHD,MAGO,IAAItvC,IAAI,KAAK,GAAb,EAAkB;AACvB,YAAM,KAAK1K,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACiD,cAAhC,CAAN;AACD;;AAED,QAAI0Q,iBAAiB,CAAC,KAAK4tC,cAAL,CAAoB,KAAKzjD,KAAL,CAAWiM,GAA/B,CAAD,CAArB,EAA4D;AAC1D,YAAM,KAAKO,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACkF,gBAAzC,CAAN;AACD;;AAED,QAAIo/C,QAAJ,EAAc;AACZ,YAAM5e,GAAG,GAAG,KAAKnpC,KAAL,CAAWiD,KAAX,CAAiBtD,KAAjB,EAAwB,KAAK4B,KAAL,CAAWiM,GAAnC,EAAwCY,OAAxC,CAAgD,OAAhD,EAAyD,EAAzD,CAAZ;AACA,WAAKyT,WAAL,CAAiBzoB,OAAO,CAACE,MAAzB,EAAiC6vC,GAAjC;AACA;AACD;;AAED,SAAKtnB,WAAL,CAAiBzoB,OAAO,CAACC,GAAzB,EAA8ByoB,GAA9B;AACD;;AAEDkkC,EAAAA,UAAU,CAACgC,aAAD,EAAgB;AACxB,UAAMroD,KAAK,GAAG,KAAK4B,KAAL,CAAWiM,GAAzB;AACA,QAAIy6C,OAAO,GAAG,KAAd;AACA,QAAIF,QAAQ,GAAG,KAAf;AACA,QAAIG,SAAS,GAAG,KAAhB;AACA,QAAIC,WAAW,GAAG,KAAlB;AACA,QAAIC,OAAO,GAAG,KAAd;;AAEA,QAAI,CAACJ,aAAD,IAAkB,KAAKb,OAAL,CAAa,EAAb,MAAqB,IAA3C,EAAiD;AAC/C,WAAKp5C,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACyD,aAAhC;AACD;;AAED,UAAMmhD,cAAc,GAAG,KAAK9mD,KAAL,CAAWiM,GAAX,GAAiB7N,KAAjB,IAA0B,CAA1B,IAA+B,KAAKK,KAAL,CAAW6uB,UAAX,CAAsBlvB,KAAtB,MAAiC,EAAvF;;AAEA,QAAI0oD,cAAJ,EAAoB;AAClB,YAAMC,OAAO,GAAG,KAAKtoD,KAAL,CAAWiD,KAAX,CAAiBtD,KAAjB,EAAwB,KAAK4B,KAAL,CAAWiM,GAAnC,CAAhB;AACA,WAAK+6C,sBAAL,CAA4B5oD,KAA5B,EAAmC8D,aAAa,CAAC+G,kBAAjD;;AAEA,UAAI,CAAC,KAAKjJ,KAAL,CAAWkW,MAAhB,EAAwB;AACtB,cAAM+wC,aAAa,GAAGF,OAAO,CAACprC,OAAR,CAAgB,GAAhB,CAAtB;;AAEA,YAAIsrC,aAAa,GAAG,CAApB,EAAuB;AACrB,eAAKz6C,KAAL,CAAWy6C,aAAa,GAAG7oD,KAA3B,EAAkC8D,aAAa,CAACoJ,yBAAhD;AACD;AACF;;AAEDu7C,MAAAA,OAAO,GAAGC,cAAc,IAAI,CAAC,OAAOhxC,IAAP,CAAYixC,OAAZ,CAA7B;AACD;;AAED,QAAI7vC,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAX;;AAEA,QAAIiL,IAAI,KAAK,EAAT,IAAe,CAAC2vC,OAApB,EAA6B;AAC3B,QAAE,KAAK7mD,KAAL,CAAWiM,GAAb;AACA,WAAK25C,OAAL,CAAa,EAAb;AACAc,MAAAA,OAAO,GAAG,IAAV;AACAxvC,MAAAA,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAP;AACD;;AAED,QAAI,CAACiL,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAAzB,KAAiC,CAAC2vC,OAAtC,EAA+C;AAC7C3vC,MAAAA,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,EAAE,KAAKttB,KAAL,CAAWiM,GAAnC,CAAP;;AAEA,UAAIiL,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAC9B,UAAE,KAAKlX,KAAL,CAAWiM,GAAb;AACD;;AAED,UAAI,KAAK25C,OAAL,CAAa,EAAb,MAAqB,IAAzB,EAA+B;AAC7B,aAAKp5C,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAAC0D,wBAAhC;AACD;;AAED8gD,MAAAA,OAAO,GAAG,IAAV;AACAE,MAAAA,WAAW,GAAG,IAAd;AACA1vC,MAAAA,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAP;AACD;;AAED,QAAIiL,IAAI,KAAK,GAAb,EAAkB;AAChB,UAAIwvC,OAAO,IAAII,cAAf,EAA+B;AAC7B,aAAKt6C,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAAC+C,oBAAhC;AACD;;AAED,QAAE,KAAKjF,KAAL,CAAWiM,GAAb;AACAu6C,MAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,QAAItvC,IAAI,KAAK,GAAb,EAAkB;AAChB,WAAK4nC,YAAL,CAAkB,SAAlB,EAA6B,KAAK9+C,KAAL,CAAWiM,GAAxC;;AAEA,UAAI26C,WAAW,IAAIE,cAAnB,EAAmC;AACjC,aAAKt6C,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACiD,cAAhC;AACD;;AAED,QAAE,KAAKnF,KAAL,CAAWiM,GAAb;AACA06C,MAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,QAAI9wC,iBAAiB,CAAC,KAAK4tC,cAAL,CAAoB,KAAKzjD,KAAL,CAAWiM,GAA/B,CAAD,CAArB,EAA4D;AAC1D,YAAM,KAAKO,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACkF,gBAAzC,CAAN;AACD;;AAED,UAAMwgC,GAAG,GAAG,KAAKnpC,KAAL,CAAWiD,KAAX,CAAiBtD,KAAjB,EAAwB,KAAK4B,KAAL,CAAWiM,GAAnC,EAAwCY,OAAxC,CAAgD,QAAhD,EAA0D,EAA1D,CAAZ;;AAEA,QAAI25C,QAAJ,EAAc;AACZ,WAAKlmC,WAAL,CAAiBzoB,OAAO,CAACE,MAAzB,EAAiC6vC,GAAjC;AACA;AACD;;AAED,QAAI+e,SAAJ,EAAe;AACb,WAAKrmC,WAAL,CAAiBzoB,OAAO,CAACG,OAAzB,EAAkC4vC,GAAlC;AACA;AACD;;AAED,UAAMrnB,GAAG,GAAGsmC,OAAO,GAAG5e,QAAQ,CAACL,GAAD,EAAM,CAAN,CAAX,GAAsBsf,UAAU,CAACtf,GAAD,CAAnD;AACA,SAAKtnB,WAAL,CAAiBzoB,OAAO,CAACC,GAAzB,EAA8ByoB,GAA9B;AACD;;AAED4mC,EAAAA,aAAa,CAACC,cAAD,EAAiB;AAC5B,UAAM/f,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAX;AACA,QAAIrO,IAAJ;;AAEA,QAAIypC,EAAE,KAAK,GAAX,EAAgB;AACd,YAAMggB,OAAO,GAAG,EAAE,KAAKrnD,KAAL,CAAWiM,GAA7B;AACArO,MAAAA,IAAI,GAAG,KAAK0pD,WAAL,CAAiB,KAAK7oD,KAAL,CAAWkd,OAAX,CAAmB,GAAnB,EAAwB,KAAK3b,KAAL,CAAWiM,GAAnC,IAA0C,KAAKjM,KAAL,CAAWiM,GAAtE,EAA2E,IAA3E,EAAiFm7C,cAAjF,CAAP;AACA,QAAE,KAAKpnD,KAAL,CAAWiM,GAAb;;AAEA,UAAIrO,IAAI,KAAK,IAAT,IAAiBA,IAAI,GAAG,QAA5B,EAAsC;AACpC,YAAIwpD,cAAJ,EAAoB;AAClB,eAAK56C,KAAL,CAAW66C,OAAX,EAAoBnlD,aAAa,CAACgD,gBAAlC;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AACF,KAZD,MAYO;AACLtH,MAAAA,IAAI,GAAG,KAAK0pD,WAAL,CAAiB,CAAjB,EAAoB,KAApB,EAA2BF,cAA3B,CAAP;AACD;;AAED,WAAOxpD,IAAP;AACD;;AAEDwnD,EAAAA,UAAU,CAACzd,KAAD,EAAQ;AAChB,QAAI7yB,GAAG,GAAG,EAAV;AAAA,QACIsyB,UAAU,GAAG,EAAE,KAAKpnC,KAAL,CAAWiM,GAD9B;;AAGA,aAAS;AACP,UAAI,KAAKjM,KAAL,CAAWiM,GAAX,IAAkB,KAAKtM,MAA3B,EAAmC;AACjC,cAAM,KAAK6M,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAAC+I,kBAA3C,CAAN;AACD;;AAED,YAAMo8B,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAX;AACA,UAAIo7B,EAAE,KAAKM,KAAX,EAAkB;;AAElB,UAAIN,EAAE,KAAK,EAAX,EAAe;AACbvyB,QAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAP;AACA6I,QAAAA,GAAG,IAAI,KAAKyyC,eAAL,CAAqB,KAArB,CAAP;AACAngB,QAAAA,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAAxB;AACD,OAJD,MAIO,IAAIo7B,EAAE,KAAK,IAAP,IAAeA,EAAE,KAAK,IAA1B,EAAgC;AACrC,UAAE,KAAKrnC,KAAL,CAAWiM,GAAb;AACA,UAAE,KAAKjM,KAAL,CAAWynC,OAAb;AACA,aAAKznC,KAAL,CAAWrB,SAAX,GAAuB,KAAKqB,KAAL,CAAWiM,GAAlC;AACD,OAJM,MAIA,IAAItO,SAAS,CAAC0pC,EAAD,CAAb,EAAmB;AACxB,cAAM,KAAK76B,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAAC+I,kBAA3C,CAAN;AACD,OAFM,MAEA;AACL,UAAE,KAAKjL,KAAL,CAAWiM,GAAb;AACD;AACF;;AAED6I,IAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAX,EAA7B,CAAP;AACA,SAAKqU,WAAL,CAAiBzoB,OAAO,CAACK,MAAzB,EAAiC4c,GAAjC;AACD;;AAEDL,EAAAA,aAAa,GAAG;AACd,QAAIK,GAAG,GAAG,EAAV;AAAA,QACIsyB,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAD5B;AAAA,QAEIu7C,eAAe,GAAG,KAFtB;;AAIA,aAAS;AACP,UAAI,KAAKxnD,KAAL,CAAWiM,GAAX,IAAkB,KAAKtM,MAA3B,EAAmC;AACjC,cAAM,KAAK6M,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACgJ,oBAA3C,CAAN;AACD;;AAED,YAAMm8B,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAX;;AAEA,UAAIo7B,EAAE,KAAK,EAAP,IAAaA,EAAE,KAAK,EAAP,IAAa,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAX,GAAiB,CAAvC,MAA8C,GAA5E,EAAiF;AAC/E,YAAI,KAAKjM,KAAL,CAAWiM,GAAX,KAAmB,KAAKjM,KAAL,CAAW5B,KAA9B,IAAuC,KAAKQ,KAAL,CAAW/G,OAAO,CAAC4B,QAAnB,CAA3C,EAAyE;AACvE,cAAI4tC,EAAE,KAAK,EAAX,EAAe;AACb,iBAAKrnC,KAAL,CAAWiM,GAAX,IAAkB,CAAlB;AACA,iBAAKqU,WAAL,CAAiBzoB,OAAO,CAAC+B,YAAzB;AACA;AACD,WAJD,MAIO;AACL,cAAE,KAAKoG,KAAL,CAAWiM,GAAb;AACA,iBAAKqU,WAAL,CAAiBzoB,OAAO,CAAC8B,SAAzB;AACA;AACD;AACF;;AAEDmb,QAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAP;AACA,aAAKqU,WAAL,CAAiBzoB,OAAO,CAAC4B,QAAzB,EAAmC+tD,eAAe,GAAG,IAAH,GAAU1yC,GAA5D;AACA;AACD;;AAED,UAAIuyB,EAAE,KAAK,EAAX,EAAe;AACbvyB,QAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAP;AACA,cAAMq5C,OAAO,GAAG,KAAKiC,eAAL,CAAqB,IAArB,CAAhB;;AAEA,YAAIjC,OAAO,KAAK,IAAhB,EAAsB;AACpBkC,UAAAA,eAAe,GAAG,IAAlB;AACD,SAFD,MAEO;AACL1yC,UAAAA,GAAG,IAAIwwC,OAAP;AACD;;AAEDle,QAAAA,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAAxB;AACD,OAXD,MAWO,IAAItO,SAAS,CAAC0pC,EAAD,CAAb,EAAmB;AACxBvyB,QAAAA,GAAG,IAAI,KAAKrW,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAP;AACA,UAAE,KAAKjM,KAAL,CAAWiM,GAAb;;AAEA,gBAAQo7B,EAAR;AACE,eAAK,EAAL;AACE,gBAAI,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,MAA0C,EAA9C,EAAkD;AAChD,gBAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACD;;AAEH,eAAK,EAAL;AACE6I,YAAAA,GAAG,IAAI,IAAP;AACA;;AAEF;AACEA,YAAAA,GAAG,IAAI1G,MAAM,CAAC2H,YAAP,CAAoBsxB,EAApB,CAAP;AACA;AAZJ;;AAeA,UAAE,KAAKrnC,KAAL,CAAWynC,OAAb;AACA,aAAKznC,KAAL,CAAWrB,SAAX,GAAuB,KAAKqB,KAAL,CAAWiM,GAAlC;AACAm7B,QAAAA,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAAxB;AACD,OAtBM,MAsBA;AACL,UAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACD;AACF;AACF;;AAED+6C,EAAAA,sBAAsB,CAAC/6C,GAAD,EAAMW,OAAN,EAAe;AACnC,QAAI,KAAK5M,KAAL,CAAWkW,MAAX,IAAqB,CAAC,KAAKlW,KAAL,CAAWmiD,YAAX,CAAwB9iD,GAAxB,CAA4B4M,GAA5B,CAA1B,EAA4D;AAC1D,WAAKO,KAAL,CAAWP,GAAX,EAAgBW,OAAhB;AACD,KAFD,MAEO;AACL,WAAK5M,KAAL,CAAWmiD,YAAX,CAAwBxqD,GAAxB,CAA4BsU,GAA5B,EAAiCW,OAAjC;AACD;AACF;;AAED26C,EAAAA,eAAe,CAACE,UAAD,EAAa;AAC1B,UAAML,cAAc,GAAG,CAACK,UAAxB;AACA,UAAMpgB,EAAE,GAAG,KAAK5oC,KAAL,CAAW6uB,UAAX,CAAsB,EAAE,KAAKttB,KAAL,CAAWiM,GAAnC,CAAX;AACA,MAAE,KAAKjM,KAAL,CAAWiM,GAAb;;AAEA,YAAQo7B,EAAR;AACE,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,GAAL;AACE;AACE,gBAAMzpC,IAAI,GAAG,KAAK0pD,WAAL,CAAiB,CAAjB,EAAoB,KAApB,EAA2BF,cAA3B,CAAb;AACA,iBAAOxpD,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuBwQ,MAAM,CAAC2H,YAAP,CAAoBnY,IAApB,CAA9B;AACD;;AAEH,WAAK,GAAL;AACE;AACE,gBAAMA,IAAI,GAAG,KAAKupD,aAAL,CAAmBC,cAAnB,CAAb;AACA,iBAAOxpD,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuBwQ,MAAM,CAAC45B,aAAP,CAAqBpqC,IAArB,CAA9B;AACD;;AAEH,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,EAAL;AACE,eAAO,IAAP;;AAEF,WAAK,GAAL;AACE,eAAO,QAAP;;AAEF,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,EAAL;AACE,YAAI,KAAKa,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,MAA0C,EAA9C,EAAkD;AAChD,YAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACD;;AAEH,WAAK,EAAL;AACE,aAAKjM,KAAL,CAAWrB,SAAX,GAAuB,KAAKqB,KAAL,CAAWiM,GAAlC;AACA,UAAE,KAAKjM,KAAL,CAAWynC,OAAb;;AAEF,WAAK,IAAL;AACA,WAAK,IAAL;AACE,eAAO,EAAP;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,YAAIggB,UAAJ,EAAgB;AACd,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,eAAKT,sBAAL,CAA4B,KAAKhnD,KAAL,CAAWiM,GAAX,GAAiB,CAA7C,EAAgD/J,aAAa,CAAC8G,mBAA9D;AACD;;AAEH;AACE,YAAIq+B,EAAE,IAAI,EAAN,IAAYA,EAAE,IAAI,EAAtB,EAA0B;AACxB,gBAAMggB,OAAO,GAAG,KAAKrnD,KAAL,CAAWiM,GAAX,GAAiB,CAAjC;AACA,gBAAMrN,KAAK,GAAG,KAAKH,KAAL,CAAWspC,MAAX,CAAkB,KAAK/nC,KAAL,CAAWiM,GAAX,GAAiB,CAAnC,EAAsC,CAAtC,EAAyCrN,KAAzC,CAA+C,SAA/C,CAAd;AACA,cAAI8oD,QAAQ,GAAG9oD,KAAK,CAAC,CAAD,CAApB;AACA,cAAI+oD,KAAK,GAAG1f,QAAQ,CAACyf,QAAD,EAAW,CAAX,CAApB;;AAEA,cAAIC,KAAK,GAAG,GAAZ,EAAiB;AACfD,YAAAA,QAAQ,GAAGA,QAAQ,CAAChmD,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACAimD,YAAAA,KAAK,GAAG1f,QAAQ,CAACyf,QAAD,EAAW,CAAX,CAAhB;AACD;;AAED,eAAK1nD,KAAL,CAAWiM,GAAX,IAAkBy7C,QAAQ,CAAC/nD,MAAT,GAAkB,CAApC;AACA,gBAAMuX,IAAI,GAAG,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsB,KAAKttB,KAAL,CAAWiM,GAAjC,CAAb;;AAEA,cAAIy7C,QAAQ,KAAK,GAAb,IAAoBxwC,IAAI,KAAK,EAA7B,IAAmCA,IAAI,KAAK,EAAhD,EAAoD;AAClD,gBAAIuwC,UAAJ,EAAgB;AACd,qBAAO,IAAP;AACD,aAFD,MAEO;AACL,mBAAKT,sBAAL,CAA4BK,OAA5B,EAAqCnlD,aAAa,CAAC8G,mBAAnD;AACD;AACF;;AAED,iBAAOoF,MAAM,CAAC2H,YAAP,CAAoB4xC,KAApB,CAAP;AACD;;AAED,eAAOv5C,MAAM,CAAC2H,YAAP,CAAoBsxB,EAApB,CAAP;AA9EJ;AAgFD;;AAEDigB,EAAAA,WAAW,CAACxB,GAAD,EAAMC,QAAN,EAAgBqB,cAAhB,EAAgC;AACzC,UAAMC,OAAO,GAAG,KAAKrnD,KAAL,CAAWiM,GAA3B;AACA,UAAM27C,CAAC,GAAG,KAAKhC,OAAL,CAAa,EAAb,EAAiBE,GAAjB,EAAsBC,QAAtB,EAAgC,KAAhC,CAAV;;AAEA,QAAI6B,CAAC,KAAK,IAAV,EAAgB;AACd,UAAIR,cAAJ,EAAoB;AAClB,aAAK56C,KAAL,CAAW66C,OAAX,EAAoBnlD,aAAa,CAACmD,qBAAlC;AACD,OAFD,MAEO;AACL,aAAKrF,KAAL,CAAWiM,GAAX,GAAiBo7C,OAAO,GAAG,CAA3B;AACD;AACF;;AAED,WAAOO,CAAP;AACD;;AAEDz6B,EAAAA,SAAS,CAAC06B,SAAD,EAAY;AACnB,SAAK7nD,KAAL,CAAWo2C,WAAX,GAAyB,KAAzB;AACA,QAAI3/B,IAAI,GAAG,EAAX;AACA,UAAMrY,KAAK,GAAG,KAAK4B,KAAL,CAAWiM,GAAzB;AACA,QAAIm7B,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAA5B;;AAEA,QAAI47C,SAAS,KAAK9mD,SAAlB,EAA6B;AAC3B,WAAKf,KAAL,CAAWiM,GAAX,IAAkB47C,SAAS,IAAI,MAAb,GAAsB,CAAtB,GAA0B,CAA5C;AACD;;AAED,WAAO,KAAK7nD,KAAL,CAAWiM,GAAX,GAAiB,KAAKtM,MAA7B,EAAqC;AACnC,YAAM0nC,EAAE,GAAG,KAAKoc,cAAL,CAAoB,KAAKzjD,KAAL,CAAWiM,GAA/B,CAAX;;AAEA,UAAI+J,gBAAgB,CAACqxB,EAAD,CAApB,EAA0B;AACxB,aAAKrnC,KAAL,CAAWiM,GAAX,IAAkBo7B,EAAE,IAAI,MAAN,GAAe,CAAf,GAAmB,CAArC;AACD,OAFD,MAEO,IAAIA,EAAE,KAAK,EAAX,EAAe;AACpB,aAAKrnC,KAAL,CAAWo2C,WAAX,GAAyB,IAAzB;AACA3/B,QAAAA,IAAI,IAAI,KAAKhY,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAR;AACA,cAAM67C,QAAQ,GAAG,KAAK9nD,KAAL,CAAWiM,GAA5B;AACA,cAAM87C,eAAe,GAAG,KAAK/nD,KAAL,CAAWiM,GAAX,KAAmB7N,KAAnB,GAA2ByX,iBAA3B,GAA+CG,gBAAvE;;AAEA,YAAI,KAAKvX,KAAL,CAAW6uB,UAAX,CAAsB,EAAE,KAAKttB,KAAL,CAAWiM,GAAnC,MAA4C,GAAhD,EAAqD;AACnD,eAAKO,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACwE,oBAAzC;AACA0gC,UAAAA,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAAX,GAAiB,CAA9B;AACA;AACD;;AAED,UAAE,KAAKjM,KAAL,CAAWiM,GAAb;AACA,cAAM+7C,GAAG,GAAG,KAAKb,aAAL,CAAmB,IAAnB,CAAZ;;AAEA,YAAIa,GAAG,KAAK,IAAZ,EAAkB;AAChB,cAAI,CAACD,eAAe,CAACC,GAAD,CAApB,EAA2B;AACzB,iBAAKx7C,KAAL,CAAWs7C,QAAX,EAAqB5lD,aAAa,CAACgC,0BAAnC;AACD;;AAEDuS,UAAAA,IAAI,IAAIrI,MAAM,CAAC45B,aAAP,CAAqBggB,GAArB,CAAR;AACD;;AAED5gB,QAAAA,UAAU,GAAG,KAAKpnC,KAAL,CAAWiM,GAAxB;AACD,OAxBM,MAwBA;AACL;AACD;AACF;;AAED,WAAOwK,IAAI,GAAG,KAAKhY,KAAL,CAAWiD,KAAX,CAAiB0lC,UAAjB,EAA6B,KAAKpnC,KAAL,CAAWiM,GAAxC,CAAd;AACD;;AAEDo5C,EAAAA,QAAQ,CAACwC,SAAD,EAAY;AAClB,UAAMpxC,IAAI,GAAG,KAAK0W,SAAL,CAAe06B,SAAf,CAAb;AACA,UAAM5mD,IAAI,GAAG5J,UAAU,CAACmI,GAAX,CAAeiX,IAAf,KAAwB5e,OAAO,CAACL,IAA7C;AACA,SAAK8oB,WAAL,CAAiBrf,IAAjB,EAAuBwV,IAAvB;AACD;;AAED4sC,EAAAA,mBAAmB,GAAG;AACpB,UAAMlO,EAAE,GAAG,KAAKn1C,KAAL,CAAWiB,IAAX,CAAgBhK,OAA3B;;AAEA,QAAIk+C,EAAE,IAAI,KAAKn1C,KAAL,CAAWo2C,WAArB,EAAkC;AAChC,WAAK5pC,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACqD,0BAA3C,EAAuE4vC,EAAvE;AACD;AACF;;AAEDjgC,EAAAA,YAAY,CAACF,QAAD,EAAW;AACrB,UAAMizC,MAAM,GAAG,KAAKlzC,UAAL,EAAf;;AAEA,QAAIkzC,MAAM,KAAKh0C,KAAK,CAACS,kBAAjB,IAAuCuzC,MAAM,KAAKh0C,KAAK,CAACU,iBAA5D,EAA+E;AAC7E,aAAO,IAAP;AACD;;AAED,QAAIK,QAAQ,KAAKnd,OAAO,CAACsB,KAArB,KAA+B8uD,MAAM,KAAKh0C,KAAK,CAACC,cAAjB,IAAmC+zC,MAAM,KAAKh0C,KAAK,CAACE,eAAnF,CAAJ,EAAyG;AACvG,aAAO,CAAC8zC,MAAM,CAACn0C,MAAf;AACD;;AAED,QAAIkB,QAAQ,KAAKnd,OAAO,CAACmE,OAArB,IAAgCgZ,QAAQ,KAAKnd,OAAO,CAACL,IAArB,IAA6B,KAAKwI,KAAL,CAAW6U,WAA5E,EAAyF;AACvF,aAAO,KAAKO,qBAAL,EAAP;AACD;;AAED,QAAIJ,QAAQ,KAAKnd,OAAO,CAAC8D,KAArB,IAA8BqZ,QAAQ,KAAKnd,OAAO,CAACqB,IAAnD,IAA2D8b,QAAQ,KAAKnd,OAAO,CAACO,GAAhF,IAAuF4c,QAAQ,KAAKnd,OAAO,CAACmB,MAA5G,IAAsHgc,QAAQ,KAAKnd,OAAO,CAAC2B,KAA/I,EAAsJ;AACpJ,aAAO,IAAP;AACD;;AAED,QAAIwb,QAAQ,KAAKnd,OAAO,CAACa,MAAzB,EAAiC;AAC/B,aAAOuvD,MAAM,KAAKh0C,KAAK,CAACC,cAAxB;AACD;;AAED,QAAIc,QAAQ,KAAKnd,OAAO,CAACuE,IAArB,IAA6B4Y,QAAQ,KAAKnd,OAAO,CAACwE,MAAlD,IAA4D2Y,QAAQ,KAAKnd,OAAO,CAACL,IAArF,EAA2F;AACzF,aAAO,KAAP;AACD;;AAED,QAAIwd,QAAQ,KAAKnd,OAAO,CAACgD,UAAzB,EAAqC;AACnC,aAAO,IAAP;AACD;;AAED,WAAO,CAAC,KAAKmF,KAAL,CAAW6U,WAAnB;AACD;;AAEDzd,EAAAA,aAAa,CAAC4d,QAAD,EAAW;AACtB,UAAM/T,IAAI,GAAG,KAAKjB,KAAL,CAAWiB,IAAxB;AACA,QAAIinD,MAAJ;;AAEA,QAAIjnD,IAAI,CAAChK,OAAL,KAAiB+d,QAAQ,KAAKnd,OAAO,CAACwB,GAArB,IAA4B2b,QAAQ,KAAKnd,OAAO,CAAC0B,WAAlE,CAAJ,EAAoF;AAClF,WAAKyG,KAAL,CAAW6U,WAAX,GAAyB,KAAzB;AACD,KAFD,MAEO,IAAIqzC,MAAM,GAAGjnD,IAAI,CAAC7J,aAAlB,EAAiC;AACtC8wD,MAAAA,MAAM,CAACt3B,IAAP,CAAY,IAAZ,EAAkB5b,QAAlB;AACD,KAFM,MAEA;AACL,WAAKhV,KAAL,CAAW6U,WAAX,GAAyB5T,IAAI,CAAC1K,UAA9B;AACD;AACF;;AAnuCiC;;AAuuCpC,MAAM4xD,UAAN,CAAiB;AACfrxD,EAAAA,WAAW,GAAG;AACZ,SAAKsxD,YAAL,GAAoB,IAAI/xC,GAAJ,EAApB;AACA,SAAKgyC,aAAL,GAAqB,IAAI/wD,GAAJ,EAArB;AACA,SAAKgjB,qBAAL,GAA6B,IAAIhjB,GAAJ,EAA7B;AACD;;AALc;;AAQjB,MAAMgxD,iBAAN,CAAwB;AACtBxxD,EAAAA,WAAW,CAAC0V,KAAD,EAAQ;AACjB,SAAK9M,KAAL,GAAa,EAAb;AACA,SAAK4a,qBAAL,GAA6B,IAAIhjB,GAAJ,EAA7B;AACA,SAAKkV,KAAL,GAAaA,KAAb;AACD;;AAEDyK,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKvX,KAAL,CAAW,KAAKA,KAAL,CAAWC,MAAX,GAAoB,CAA/B,CAAP;AACD;;AAEDub,EAAAA,KAAK,GAAG;AACN,SAAKxb,KAAL,CAAWQ,IAAX,CAAgB,IAAIioD,UAAJ,EAAhB;AACD;;AAEDhtC,EAAAA,IAAI,GAAG;AACL,UAAMotC,aAAa,GAAG,KAAK7oD,KAAL,CAAW6B,GAAX,EAAtB;AACA,UAAM0V,OAAO,GAAG,KAAKA,OAAL,EAAhB;;AAEA,SAAK,MAAM,CAACzf,IAAD,EAAOyU,GAAP,CAAX,IAA0B4zC,KAAK,CAAC2I,IAAN,CAAWD,aAAa,CAACjuC,qBAAzB,CAA1B,EAA2E;AACzE,UAAIrD,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAACqD,qBAAR,CAA8Bjb,GAA9B,CAAkC7H,IAAlC,CAAL,EAA8C;AAC5Cyf,UAAAA,OAAO,CAACqD,qBAAR,CAA8B3iB,GAA9B,CAAkCH,IAAlC,EAAwCyU,GAAxC;AACD;AACF,OAJD,MAIO;AACL,aAAKO,KAAL,CAAWP,GAAX,EAAgB/J,aAAa,CAAC6D,6BAA9B,EAA6DvO,IAA7D;AACD;AACF;AACF;;AAEDixD,EAAAA,kBAAkB,CAACjxD,IAAD,EAAOuxB,WAAP,EAAoB9c,GAApB,EAAyB;AACzC,UAAMy8C,UAAU,GAAG,KAAKzxC,OAAL,EAAnB;AACA,QAAI0xC,SAAS,GAAGD,UAAU,CAACN,YAAX,CAAwB/oD,GAAxB,CAA4B7H,IAA5B,CAAhB;;AAEA,QAAIuxB,WAAW,GAAGtP,2BAAlB,EAA+C;AAC7C,YAAMmvC,QAAQ,GAAGD,SAAS,IAAID,UAAU,CAACL,aAAX,CAAyB7oD,GAAzB,CAA6BhI,IAA7B,CAA9B;;AAEA,UAAIoxD,QAAJ,EAAc;AACZ,cAAMC,SAAS,GAAGD,QAAQ,GAAGtvC,yBAA7B;AACA,cAAMwvC,SAAS,GAAG//B,WAAW,GAAGzP,yBAAhC;AACA,cAAMyvC,OAAO,GAAGH,QAAQ,GAAGnvC,2BAA3B;AACA,cAAMuvC,OAAO,GAAGjgC,WAAW,GAAGtP,2BAA9B;AACAkvC,QAAAA,SAAS,GAAGI,OAAO,KAAKC,OAAZ,IAAuBH,SAAS,KAAKC,SAAjD;AACA,YAAI,CAACH,SAAL,EAAgBD,UAAU,CAACL,aAAX,CAAyB5sC,MAAzB,CAAgCjkB,IAAhC;AACjB,OAPD,MAOO,IAAI,CAACmxD,SAAL,EAAgB;AACrBD,QAAAA,UAAU,CAACL,aAAX,CAAyB1wD,GAAzB,CAA6BH,IAA7B,EAAmCuxB,WAAnC;AACD;AACF;;AAED,QAAI4/B,SAAJ,EAAe;AACb,WAAKn8C,KAAL,CAAWP,GAAX,EAAgB/J,aAAa,CAACkG,wBAA9B,EAAwD5Q,IAAxD;AACD;;AAEDkxD,IAAAA,UAAU,CAACN,YAAX,CAAwB3yB,GAAxB,CAA4Bj+B,IAA5B;AACAkxD,IAAAA,UAAU,CAACpuC,qBAAX,CAAiCmB,MAAjC,CAAwCjkB,IAAxC;AACD;;AAEDyxD,EAAAA,cAAc,CAACzxD,IAAD,EAAOyU,GAAP,EAAY;AACxB,QAAIy8C,UAAJ;;AAEA,SAAKA,UAAL,IAAmB,KAAKhpD,KAAxB,EAA+B;AAC7B,UAAIgpD,UAAU,CAACN,YAAX,CAAwB/oD,GAAxB,CAA4B7H,IAA5B,CAAJ,EAAuC;AACxC;;AAED,QAAIkxD,UAAJ,EAAgB;AACdA,MAAAA,UAAU,CAACpuC,qBAAX,CAAiC3iB,GAAjC,CAAqCH,IAArC,EAA2CyU,GAA3C;AACD,KAFD,MAEO;AACL,WAAKO,KAAL,CAAWP,GAAX,EAAgB/J,aAAa,CAAC6D,6BAA9B,EAA6DvO,IAA7D;AACD;AACF;;AArEqB;;AAyExB,MAAM0xD,WAAW,GAAG,CAApB;AAAA,MACMC,+BAA+B,GAAG,CADxC;AAAA,MAEMC,oCAAoC,GAAG,CAF7C;AAAA,MAGMC,qBAAqB,GAAG,CAH9B;;AAKA,MAAMC,eAAN,CAAsB;AACpBxyD,EAAAA,WAAW,CAACmK,IAAI,GAAGioD,WAAR,EAAqB;AAC9B,SAAKjoD,IAAL,GAAY,KAAK,CAAjB;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAEDsoD,EAAAA,8BAA8B,GAAG;AAC/B,WAAO,KAAKtoD,IAAL,KAAcmoD,oCAAd,IAAsD,KAAKnoD,IAAL,KAAckoD,+BAA3E;AACD;;AAEDK,EAAAA,+BAA+B,GAAG;AAChC,WAAO,KAAKvoD,IAAL,KAAcooD,qBAArB;AACD;;AAZmB;;AAgBtB,MAAMI,qBAAN,SAAoCH,eAApC,CAAoD;AAClDxyD,EAAAA,WAAW,CAACmK,IAAD,EAAO;AAChB,UAAMA,IAAN;AACA,SAAK+L,MAAL,GAAc,IAAI1V,GAAJ,EAAd;AACD;;AAEDoyD,EAAAA,sBAAsB,CAACz9C,GAAD,EAAMxS,QAAN,EAAgB;AACpC,SAAKuT,MAAL,CAAYrV,GAAZ,CAAgBsU,GAAhB,EAAqBxS,QAArB;AACD;;AAEDkwD,EAAAA,qBAAqB,CAAC19C,GAAD,EAAM;AACzB,SAAKe,MAAL,CAAYyO,MAAZ,CAAmBxP,GAAnB;AACD;;AAED29C,EAAAA,aAAa,CAACC,QAAD,EAAW;AACtB,SAAK78C,MAAL,CAAYnB,OAAZ,CAAoBg+C,QAApB;AACD;;AAhBiD;;AAoBpD,MAAMC,sBAAN,CAA6B;AAC3BhzD,EAAAA,WAAW,CAAC0V,KAAD,EAAQ;AACjB,SAAK9M,KAAL,GAAa,CAAC,IAAI4pD,eAAJ,EAAD,CAAb;AACA,SAAK98C,KAAL,GAAaA,KAAb;AACD;;AAED0O,EAAAA,KAAK,CAACE,KAAD,EAAQ;AACX,SAAK1b,KAAL,CAAWQ,IAAX,CAAgBkb,KAAhB;AACD;;AAEDD,EAAAA,IAAI,GAAG;AACL,SAAKzb,KAAL,CAAW6B,GAAX;AACD;;AAEDwoD,EAAAA,+BAA+B,CAAC99C,GAAD,EAAMxS,QAAN,EAAgB;AAC7C,UAAM;AACJiG,MAAAA;AADI,QAEF,IAFJ;AAGA,QAAIe,CAAC,GAAGf,KAAK,CAACC,MAAN,GAAe,CAAvB;AACA,QAAIyb,KAAK,GAAG1b,KAAK,CAACe,CAAD,CAAjB;;AAEA,WAAO,CAAC2a,KAAK,CAACouC,+BAAN,EAAR,EAAiD;AAC/C,UAAIpuC,KAAK,CAACmuC,8BAAN,EAAJ,EAA4C;AAC1CnuC,QAAAA,KAAK,CAACsuC,sBAAN,CAA6Bz9C,GAA7B,EAAkCxS,QAAlC;AACD,OAFD,MAEO;AACL;AACD;;AAED2hB,MAAAA,KAAK,GAAG1b,KAAK,CAAC,EAAEe,CAAH,CAAb;AACD;;AAED,SAAK+L,KAAL,CAAWP,GAAX,EAAgBxS,QAAhB;AACD;;AAEDuwD,EAAAA,kCAAkC,CAAC/9C,GAAD,EAAMxS,QAAN,EAAgB;AAChD,UAAM;AACJiG,MAAAA;AADI,QAEF,IAFJ;AAGA,UAAM0b,KAAK,GAAG1b,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAnB;;AAEA,QAAIyb,KAAK,CAACouC,+BAAN,EAAJ,EAA6C;AAC3C,WAAKh9C,KAAL,CAAWP,GAAX,EAAgBxS,QAAhB;AACD,KAFD,MAEO,IAAI2hB,KAAK,CAACmuC,8BAAN,EAAJ,EAA4C;AACjDnuC,MAAAA,KAAK,CAACsuC,sBAAN,CAA6Bz9C,GAA7B,EAAkCxS,QAAlC;AACD,KAFM,MAEA;AACL;AACD;AACF;;AAEDwwD,EAAAA,+BAA+B,CAACh+C,GAAD,EAAMxS,QAAN,EAAgB;AAC7C,UAAM;AACJiG,MAAAA;AADI,QAEF,IAFJ;AAGA,QAAIe,CAAC,GAAGf,KAAK,CAACC,MAAN,GAAe,CAAvB;AACA,QAAIyb,KAAK,GAAG1b,KAAK,CAACe,CAAD,CAAjB;;AAEA,WAAO2a,KAAK,CAACmuC,8BAAN,EAAP,EAA+C;AAC7C,UAAInuC,KAAK,CAACna,IAAN,KAAemoD,oCAAnB,EAAyD;AACvDhuC,QAAAA,KAAK,CAACsuC,sBAAN,CAA6Bz9C,GAA7B,EAAkCxS,QAAlC;AACD;;AAED2hB,MAAAA,KAAK,GAAG1b,KAAK,CAAC,EAAEe,CAAH,CAAb;AACD;AACF;;AAEDypD,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AACJxqD,MAAAA;AADI,QAEF,IAFJ;AAGA,UAAMsb,YAAY,GAAGtb,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAA1B;AACA,QAAI,CAACqb,YAAY,CAACuuC,8BAAb,EAAL,EAAoD;AACpDvuC,IAAAA,YAAY,CAAC4uC,aAAb,CAA2B,CAACnwD,QAAD,EAAWwS,GAAX,KAAmB;AAC5C,WAAKO,KAAL,CAAWP,GAAX,EAAgBxS,QAAhB;AACA,UAAIgH,CAAC,GAAGf,KAAK,CAACC,MAAN,GAAe,CAAvB;AACA,UAAIyb,KAAK,GAAG1b,KAAK,CAACe,CAAD,CAAjB;;AAEA,aAAO2a,KAAK,CAACmuC,8BAAN,EAAP,EAA+C;AAC7CnuC,QAAAA,KAAK,CAACuuC,qBAAN,CAA4B19C,GAA5B;AACAmP,QAAAA,KAAK,GAAG1b,KAAK,CAAC,EAAEe,CAAH,CAAb;AACD;AACF,KATD;AAUD;;AAjF0B;;AAoF7B,SAAS0pD,4BAAT,GAAwC;AACtC,SAAO,IAAIb,eAAJ,CAAoBD,qBAApB,CAAP;AACD;;AACD,SAASe,iBAAT,GAA6B;AAC3B,SAAO,IAAIX,qBAAJ,CAA0BN,+BAA1B,CAAP;AACD;;AACD,SAASkB,kBAAT,GAA8B;AAC5B,SAAO,IAAIZ,qBAAJ,CAA0BL,oCAA1B,CAAP;AACD;;AACD,SAASkB,kBAAT,GAA8B;AAC5B,SAAO,IAAIhB,eAAJ,EAAP;AACD;;AAED,MAAMiB,UAAN,SAAyBpH,SAAzB,CAAmC;AACjCxzC,EAAAA,QAAQ,CAACtP,IAAD,EAAOmS,GAAP,EAAY+N,GAAZ,EAAiB;AACvB,QAAI,CAAClgB,IAAL,EAAW;AACX,UAAMwO,KAAK,GAAGxO,IAAI,CAACwO,KAAL,GAAaxO,IAAI,CAACwO,KAAL,IAAc,EAAzC;AACAA,IAAAA,KAAK,CAAC2D,GAAD,CAAL,GAAa+N,GAAb;AACD;;AAEDsB,EAAAA,YAAY,CAAC2oC,EAAD,EAAK;AACf,WAAO,KAAK5rD,KAAL,CAAW/G,OAAO,CAACgD,UAAnB,KAAkC,KAAKmF,KAAL,CAAW1J,KAAX,KAAqBk0D,EAA9D;AACD;;AAED1kC,EAAAA,gBAAgB,CAAC0kC,EAAD,EAAK;AACnB,QAAI,KAAK3oC,YAAL,CAAkB2oC,EAAlB,CAAJ,EAA2B;AACzB,WAAKtzC,IAAL;AACD,KAFD,MAEO;AACL,WAAKgM,UAAL,CAAgB,IAAhB,EAAsBrrB,OAAO,CAACgD,UAA9B;AACD;AACF;;AAEDgoB,EAAAA,YAAY,CAACrrB,IAAD,EAAO;AACjB,WAAO,KAAKoH,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4B,KAAKwI,KAAL,CAAW1J,KAAX,KAAqBkB,IAAjD,IAAyD,CAAC,KAAKwI,KAAL,CAAWo2C,WAA5E;AACD;;AAED2I,EAAAA,oBAAoB,CAAC0L,SAAD,EAAYjzD,IAAZ,EAAkB;AACpC,UAAMkzD,OAAO,GAAGD,SAAS,GAAGjzD,IAAI,CAACmI,MAAjC;AACA,WAAO,KAAKlB,KAAL,CAAWiD,KAAX,CAAiB+oD,SAAjB,EAA4BC,OAA5B,MAAyClzD,IAAzC,KAAkDkzD,OAAO,KAAK,KAAKjsD,KAAL,CAAWkB,MAAvB,IAAiC,CAACqW,gBAAgB,CAAC,KAAKvX,KAAL,CAAW6uB,UAAX,CAAsBo9B,OAAtB,CAAD,CAApG,CAAP;AACD;;AAED16B,EAAAA,qBAAqB,CAACx4B,IAAD,EAAO;AAC1B,UAAM0f,IAAI,GAAG,KAAKkf,cAAL,EAAb;AACA,WAAO,KAAK2oB,oBAAL,CAA0B7nC,IAA1B,EAAgC1f,IAAhC,CAAP;AACD;;AAEDkrB,EAAAA,aAAa,CAAClrB,IAAD,EAAO;AAClB,WAAO,KAAKqrB,YAAL,CAAkBrrB,IAAlB,KAA2B,KAAK2pB,GAAL,CAAStpB,OAAO,CAACL,IAAjB,CAAlC;AACD;;AAED0pB,EAAAA,gBAAgB,CAAC1pB,IAAD,EAAOiC,QAAP,EAAiB;AAC/B,QAAI,CAAC,KAAKipB,aAAL,CAAmBlrB,IAAnB,CAAL,EAA+B,KAAK0rB,UAAL,CAAgB,IAAhB,EAAsBzpB,QAAtB;AAChC;;AAEDqvB,EAAAA,kBAAkB,GAAG;AACnB,WAAO,KAAKlqB,KAAL,CAAW/G,OAAO,CAACO,GAAnB,KAA2B,KAAKwG,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAA3B,IAAyD,KAAKuc,qBAAL,EAAhE;AACD;;AAEDA,EAAAA,qBAAqB,GAAG;AACtB,WAAO7X,SAAS,CAACuY,IAAV,CAAe,KAAKrX,KAAL,CAAWiD,KAAX,CAAiB,KAAK1B,KAAL,CAAWsM,UAA5B,EAAwC,KAAKtM,KAAL,CAAW5B,KAAnD,CAAf,CAAP;AACD;;AAEDs7C,EAAAA,qBAAqB,GAAG;AACtB,WAAOn8C,SAAS,CAACuY,IAAV,CAAe,KAAKrX,KAAL,CAAWiD,KAAX,CAAiB,KAAK1B,KAAL,CAAW3B,GAA5B,EAAiC,KAAK+3B,cAAL,EAAjC,CAAf,CAAP;AACD;;AAED4b,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAK7wB,GAAL,CAAStpB,OAAO,CAACqB,IAAjB,KAA0B,KAAK4vB,kBAAL,EAAjC;AACD;;AAEDxG,EAAAA,SAAS,CAACqoC,QAAQ,GAAG,IAAZ,EAAkB;AACzB,QAAIA,QAAQ,GAAG,KAAK3Y,gBAAL,EAAH,GAA6B,KAAK7wB,GAAL,CAAStpB,OAAO,CAACqB,IAAjB,CAAzC,EAAiE;AACjE,SAAKsT,KAAL,CAAW,KAAKxM,KAAL,CAAWsM,UAAtB,EAAkCpK,aAAa,CAACuE,gBAAhD;AACD;;AAEDqa,EAAAA,MAAM,CAAC7f,IAAD,EAAOgL,GAAP,EAAY;AAChB,SAAKkV,GAAL,CAASlgB,IAAT,KAAkB,KAAKiiB,UAAL,CAAgBjX,GAAhB,EAAqBhL,IAArB,CAAlB;AACD;;AAEDo9C,EAAAA,aAAa,CAACzxC,OAAO,GAAG,mBAAX,EAAgC;AAC3C,QAAI,KAAK5M,KAAL,CAAW5B,KAAX,GAAmB,KAAK4B,KAAL,CAAWsM,UAAlC,EAA8C;AAC5C,WAAKE,KAAL,CAAW,KAAKxM,KAAL,CAAWsM,UAAtB,EAAkC;AAChC1O,QAAAA,IAAI,EAAEkE,UAAU,CAACE,WADe;AAEhC8J,QAAAA,UAAU,EAAE,iBAFoB;AAGhCrS,QAAAA,QAAQ,EAAEmT;AAHsB,OAAlC;AAKD;AACF;;AAEDsW,EAAAA,UAAU,CAACjX,GAAD,EAAM2+C,aAAa,GAAG;AAC9BhtD,IAAAA,IAAI,EAAEkE,UAAU,CAACE,WADa;AAE9B8J,IAAAA,UAAU,EAAE,iBAFkB;AAG9BrS,IAAAA,QAAQ,EAAE;AAHoB,GAAtB,EAIP;AACD,QAAImxD,aAAa,YAAY/zD,SAA7B,EAAwC;AACtC+zD,MAAAA,aAAa,GAAG;AACdhtD,QAAAA,IAAI,EAAEkE,UAAU,CAACE,WADH;AAEd8J,QAAAA,UAAU,EAAE,iBAFE;AAGdrS,QAAAA,QAAQ,EAAG,+BAA8BmxD,aAAa,CAAC7zD,KAAM;AAH/C,OAAhB;AAKD;;AAED,UAAM,KAAKyV,KAAL,CAAWP,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAKjM,KAAL,CAAW5B,KAA1C,EAAiDwsD,aAAjD,CAAN;AACD;;AAED9L,EAAAA,YAAY,CAACtnD,IAAD,EAAOyU,GAAP,EAAY;AACtB,QAAI,CAAC,KAAK9M,SAAL,CAAe3H,IAAf,CAAL,EAA2B;AACzB,YAAM,KAAKkV,aAAL,CAAmBT,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAKjM,KAAL,CAAW5B,KAAlD,EAAyD;AAC7DysD,QAAAA,aAAa,EAAE,CAACrzD,IAAD;AAD8C,OAAzD,EAEF,kEAAiEA,IAAK,GAFpE,CAAN;AAGD;;AAED,WAAO,IAAP;AACD;;AAEDszD,EAAAA,eAAe,CAACC,KAAD,EAAQ9+C,GAAR,EAAa;AAC1B,QAAI,CAAC8+C,KAAK,CAACnP,IAAN,CAAWgM,CAAC,IAAI,KAAKzoD,SAAL,CAAeyoD,CAAf,CAAhB,CAAL,EAAyC;AACvC,YAAM,KAAKl7C,aAAL,CAAmBT,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAKjM,KAAL,CAAW5B,KAAlD,EAAyD;AAC7DysD,QAAAA,aAAa,EAAEE;AAD8C,OAAzD,EAEF,sFAAqFA,KAAK,CAAC3K,IAAN,CAAW,IAAX,CAAiB,GAFpG,CAAN;AAGD;AACF;;AAED71B,EAAAA,QAAQ,CAACygC,EAAD,EAAKC,QAAQ,GAAG,KAAKjrD,KAAL,CAAWyqB,KAAX,EAAhB,EAAoC;AAC1C,UAAMygC,WAAW,GAAG;AAClB7qD,MAAAA,IAAI,EAAE;AADY,KAApB;;AAIA,QAAI;AACF,YAAMA,IAAI,GAAG2qD,EAAE,CAAC,CAAC3qD,IAAI,GAAG,IAAR,KAAiB;AAC/B6qD,QAAAA,WAAW,CAAC7qD,IAAZ,GAAmBA,IAAnB;AACA,cAAM6qD,WAAN;AACD,OAHc,CAAf;;AAKA,UAAI,KAAKlrD,KAAL,CAAWgN,MAAX,CAAkBrN,MAAlB,GAA2BsrD,QAAQ,CAACj+C,MAAT,CAAgBrN,MAA/C,EAAuD;AACrD,cAAM6qB,SAAS,GAAG,KAAKxqB,KAAvB;AACA,aAAKA,KAAL,GAAairD,QAAb;AACA,aAAKjrD,KAAL,CAAWqiD,YAAX,GAA0B73B,SAAS,CAAC63B,YAApC;AACA,eAAO;AACLhiD,UAAAA,IADK;AAEL4M,UAAAA,KAAK,EAAEud,SAAS,CAACxd,MAAV,CAAiBi+C,QAAQ,CAACj+C,MAAT,CAAgBrN,MAAjC,CAFF;AAGLiyB,UAAAA,MAAM,EAAE,KAHH;AAILF,UAAAA,OAAO,EAAE,KAJJ;AAKLlH,UAAAA;AALK,SAAP;AAOD;;AAED,aAAO;AACLnqB,QAAAA,IADK;AAEL4M,QAAAA,KAAK,EAAE,IAFF;AAGL2kB,QAAAA,MAAM,EAAE,KAHH;AAILF,QAAAA,OAAO,EAAE,KAJJ;AAKLlH,QAAAA,SAAS,EAAE;AALN,OAAP;AAOD,KA1BD,CA0BE,OAAOvd,KAAP,EAAc;AACd,YAAMud,SAAS,GAAG,KAAKxqB,KAAvB;AACA,WAAKA,KAAL,GAAairD,QAAb;;AAEA,UAAIh+C,KAAK,YAAYjL,WAArB,EAAkC;AAChC,eAAO;AACL3B,UAAAA,IAAI,EAAE,IADD;AAEL4M,UAAAA,KAFK;AAGL2kB,UAAAA,MAAM,EAAE,IAHH;AAILF,UAAAA,OAAO,EAAE,KAJJ;AAKLlH,UAAAA;AALK,SAAP;AAOD;;AAED,UAAIvd,KAAK,KAAKi+C,WAAd,EAA2B;AACzB,eAAO;AACL7qD,UAAAA,IAAI,EAAE6qD,WAAW,CAAC7qD,IADb;AAEL4M,UAAAA,KAAK,EAAE,IAFF;AAGL2kB,UAAAA,MAAM,EAAE,KAHH;AAILF,UAAAA,OAAO,EAAE,IAJJ;AAKLlH,UAAAA;AALK,SAAP;AAOD;;AAED,YAAMvd,KAAN;AACD;AACF;;AAEDk+C,EAAAA,qBAAqB,CAACx6C,mBAAD,EAAsBy6C,QAAtB,EAAgC;AACnD,QAAI,CAACz6C,mBAAL,EAA0B,OAAO,KAAP;AAC1B,UAAM;AACJ06C,MAAAA,eADI;AAEJC,MAAAA;AAFI,QAGF36C,mBAHJ;AAIA,QAAI,CAACy6C,QAAL,EAAe,OAAOC,eAAe,IAAI,CAAnB,IAAwBC,WAAW,IAAI,CAA9C;;AAEf,QAAID,eAAe,IAAI,CAAvB,EAA0B;AACxB,WAAKnoC,UAAL,CAAgBmoC,eAAhB;AACD;;AAED,QAAIC,WAAW,IAAI,CAAnB,EAAsB;AACpB,WAAK9+C,KAAL,CAAW8+C,WAAX,EAAwBppD,aAAa,CAAC6B,cAAtC;AACD;AACF;;AAEDwqC,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAK3vC,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4B,CAAC,CAAC,KAAKwI,KAAL,CAAWiB,IAAX,CAAgBhK,OAA9C,IAAyD,KAAK2H,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAzD,IAAuF,KAAK0G,KAAL,CAAW/G,OAAO,CAACC,GAAnB,CAAvF,IAAkH,KAAK8G,KAAL,CAAW/G,OAAO,CAACE,MAAnB,CAAlH,IAAgJ,KAAK6G,KAAL,CAAW/G,OAAO,CAACG,OAAnB,CAAvJ;AACD;;AAEDgZ,EAAAA,aAAa,CAAC3Q,IAAD,EAAO;AAClB,WAAOA,IAAI,CAACY,IAAL,KAAc,aAArB;AACD;;AAED6P,EAAAA,gBAAgB,CAACzQ,IAAD,EAAO;AACrB,WAAOA,IAAI,CAAC0Q,EAAL,CAAQvZ,IAAf;AACD;;AAEDkc,EAAAA,wBAAwB,CAACrT,IAAD,EAAO;AAC7B,WAAO,CAACA,IAAI,CAACY,IAAL,KAAc,kBAAd,IAAoCZ,IAAI,CAACY,IAAL,KAAc,0BAAnD,KAAkF,KAAK+P,aAAL,CAAmB3Q,IAAI,CAACwnB,QAAxB,CAAzF;AACD;;AAEDlU,EAAAA,eAAe,CAACtT,IAAD,EAAO;AACpB,WAAOA,IAAI,CAACY,IAAL,KAAc,0BAAd,IAA4CZ,IAAI,CAACY,IAAL,KAAc,wBAAjE;AACD;;AAEDmO,EAAAA,gBAAgB,CAAC/O,IAAD,EAAO;AACrB,WAAOA,IAAI,CAACY,IAAL,KAAc,gBAArB;AACD;;AAED2S,EAAAA,cAAc,CAACvT,IAAD,EAAO;AACnB,WAAOA,IAAI,CAACY,IAAL,KAAc,cAArB;AACD;;AAEDsqD,EAAAA,gBAAgB,CAAC70C,QAAQ,GAAG,KAAKjf,OAAL,CAAaipD,UAAb,KAA4B,QAAxC,EAAkD;AAChE,UAAM8K,SAAS,GAAG,KAAKxrD,KAAL,CAAWgiD,MAA7B;AACA,SAAKhiD,KAAL,CAAWgiD,MAAX,GAAoB,EAApB;AACA,UAAMyJ,sBAAsB,GAAG,KAAKzrD,KAAL,CAAWoiD,mBAA1C;AACA,SAAKpiD,KAAL,CAAWoiD,mBAAX,GAAiC,EAAjC;AACA,UAAMsJ,WAAW,GAAG,KAAKh1C,QAAzB;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACA,UAAMi1C,QAAQ,GAAG,KAAKvwC,KAAtB;AACA,UAAMjB,YAAY,GAAG,KAAKgG,eAAL,EAArB;AACA,SAAK/E,KAAL,GAAa,IAAIjB,YAAJ,CAAiB,KAAK3N,KAAL,CAAWoiC,IAAX,CAAgB,IAAhB,CAAjB,EAAwC,KAAKl4B,QAA7C,CAAb;AACA,UAAMk1C,YAAY,GAAG,KAAK3T,SAA1B;AACA,SAAKA,SAAL,GAAiB,IAAI3N,0BAAJ,EAAjB;AACA,UAAMie,aAAa,GAAG,KAAKG,UAA3B;AACA,SAAKA,UAAL,GAAkB,IAAIJ,iBAAJ,CAAsB,KAAK97C,KAAL,CAAWoiC,IAAX,CAAgB,IAAhB,CAAtB,CAAlB;AACA,UAAMid,kBAAkB,GAAG,KAAKC,eAAhC;AACA,SAAKA,eAAL,GAAuB,IAAIhC,sBAAJ,CAA2B,KAAKt9C,KAAL,CAAWoiC,IAAX,CAAgB,IAAhB,CAA3B,CAAvB;AACA,WAAO,MAAM;AACX,WAAK5uC,KAAL,CAAWgiD,MAAX,GAAoBwJ,SAApB;AACA,WAAKxrD,KAAL,CAAWoiD,mBAAX,GAAiCqJ,sBAAjC;AACA,WAAK/0C,QAAL,GAAgBg1C,WAAhB;AACA,WAAKtwC,KAAL,GAAauwC,QAAb;AACA,WAAK1T,SAAL,GAAiB2T,YAAjB;AACA,WAAKlD,UAAL,GAAkBH,aAAlB;AACA,WAAKuD,eAAL,GAAuBD,kBAAvB;AACD,KARD;AASD;;AAEDE,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,UAAU,GAAG/hB,KAAjB;;AAEA,QAAI,KAAK9qC,SAAL,CAAe,eAAf,KAAmC,KAAKuX,QAA5C,EAAsD;AACpDs1C,MAAAA,UAAU,IAAI7hB,WAAd;AACD;;AAED,SAAK/uB,KAAL,CAAWF,KAAX,CAAiB9D,aAAjB;AACA,SAAK6gC,SAAL,CAAe/8B,KAAf,CAAqB8wC,UAArB;AACD;;AA1PgC;;AA6PnC,MAAMC,gBAAN,CAAuB;AACrBn1D,EAAAA,WAAW,GAAG;AACZ,SAAKu0D,eAAL,GAAuB,CAAC,CAAxB;AACA,SAAKC,WAAL,GAAmB,CAAC,CAApB;AACD;;AAJoB;;AAQvB,MAAMY,IAAN,CAAW;AACTp1D,EAAAA,WAAW,CAACq1D,MAAD,EAASlgD,GAAT,EAAclM,GAAd,EAAmB;AAC5B,SAAKkB,IAAL,GAAY,KAAK,CAAjB;AACA,SAAK7C,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKC,GAAL,GAAW,KAAK,CAAhB;AACA,SAAK0B,GAAL,GAAW,KAAK,CAAhB;AACA,SAAKqsD,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKjsD,eAAL,GAAuB,KAAK,CAA5B;AACA,SAAKF,gBAAL,GAAwB,KAAK,CAA7B;AACA,SAAK0B,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKkN,KAAL,GAAa,KAAK,CAAlB;AACA,SAAK5N,IAAL,GAAY,EAAZ;AACA,SAAK7C,KAAL,GAAa6N,GAAb;AACA,SAAK5N,GAAL,GAAW,CAAX;AACA,SAAK0B,GAAL,GAAW,IAAI5B,cAAJ,CAAmB4B,GAAnB,CAAX;AACA,QAAIosD,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAAC10D,OAAP,CAAe0pD,MAArC,EAA6C,KAAKiL,KAAL,GAAa,CAACngD,GAAD,EAAM,CAAN,CAAb;AAC7C,QAAIkgD,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAAC7tD,QAA7B,EAAuC,KAAKyB,GAAL,CAASzB,QAAT,GAAoB6tD,MAAM,CAAC7tD,QAA3B;AACxC;;AAED6xB,EAAAA,OAAO,GAAG;AACR,UAAMmY,OAAO,GAAG,IAAI4jB,IAAJ,EAAhB;AACA,UAAMtgD,IAAI,GAAGzV,MAAM,CAACyV,IAAP,CAAY,IAAZ,CAAb;;AAEA,SAAK,IAAInL,CAAC,GAAG,CAAR,EAAWd,MAAM,GAAGiM,IAAI,CAACjM,MAA9B,EAAsCc,CAAC,GAAGd,MAA1C,EAAkDc,CAAC,EAAnD,EAAuD;AACrD,YAAM+R,GAAG,GAAG5G,IAAI,CAACnL,CAAD,CAAhB;;AAEA,UAAI+R,GAAG,KAAK,iBAAR,IAA6BA,GAAG,KAAK,kBAArC,IAA2DA,GAAG,KAAK,eAAvE,EAAwF;AACtF81B,QAAAA,OAAO,CAAC91B,GAAD,CAAP,GAAe,KAAKA,GAAL,CAAf;AACD;AACF;;AAED,WAAO81B,OAAP;AACD;;AAhCQ;;AAoCX,MAAM+jB,SAAN,SAAwB9B,UAAxB,CAAmC;AACjC/4C,EAAAA,SAAS,GAAG;AACV,WAAO,IAAI06C,IAAJ,CAAS,IAAT,EAAe,KAAKlsD,KAAL,CAAW5B,KAA1B,EAAiC,KAAK4B,KAAL,CAAWkM,QAA5C,CAAP;AACD;;AAEDyC,EAAAA,WAAW,CAAC1C,GAAD,EAAMlM,GAAN,EAAW;AACpB,WAAO,IAAImsD,IAAJ,CAAS,IAAT,EAAejgD,GAAf,EAAoBlM,GAApB,CAAP;AACD;;AAED0T,EAAAA,eAAe,CAACxS,IAAD,EAAO;AACpB,WAAO,KAAK0N,WAAL,CAAiB1N,IAAI,CAAC7C,KAAtB,EAA6B6C,IAAI,CAAClB,GAAL,CAAS3B,KAAtC,CAAP;AACD;;AAEDuT,EAAAA,UAAU,CAACtR,IAAD,EAAOY,IAAP,EAAa;AACrB,WAAO,KAAK+N,YAAL,CAAkB3O,IAAlB,EAAwBY,IAAxB,EAA8B,KAAKjB,KAAL,CAAWsM,UAAzC,EAAqD,KAAKtM,KAAL,CAAWuM,aAAhE,CAAP;AACD;;AAEDyC,EAAAA,YAAY,CAAC3O,IAAD,EAAOY,IAAP,EAAagL,GAAb,EAAkBlM,GAAlB,EAAuB;AAEjCM,IAAAA,IAAI,CAACY,IAAL,GAAYA,IAAZ;AACAZ,IAAAA,IAAI,CAAChC,GAAL,GAAW4N,GAAX;AACA5L,IAAAA,IAAI,CAACN,GAAL,CAAS1B,GAAT,GAAe0B,GAAf;AACA,QAAI,KAAKtI,OAAL,CAAa0pD,MAAjB,EAAyB9gD,IAAI,CAAC+rD,KAAL,CAAW,CAAX,IAAgBngD,GAAhB;AACzB,SAAKjL,cAAL,CAAoBX,IAApB;AACA,WAAOA,IAAP;AACD;;AAEDi8C,EAAAA,kBAAkB,CAACj8C,IAAD,EAAOjC,KAAP,EAAc8N,QAAd,EAAwB;AACxC7L,IAAAA,IAAI,CAACjC,KAAL,GAAaA,KAAb;AACAiC,IAAAA,IAAI,CAACN,GAAL,CAAS3B,KAAT,GAAiB8N,QAAjB;AACA,QAAI,KAAKzU,OAAL,CAAa0pD,MAAjB,EAAyB9gD,IAAI,CAAC+rD,KAAL,CAAW,CAAX,IAAgBhuD,KAAhB;AAC1B;;AAEDikB,EAAAA,gBAAgB,CAAChiB,IAAD,EAAOhC,GAAG,GAAG,KAAK2B,KAAL,CAAWsM,UAAxB,EAAoCD,MAAM,GAAG,KAAKrM,KAAL,CAAWuM,aAAxD,EAAuE;AACrFlM,IAAAA,IAAI,CAAChC,GAAL,GAAWA,GAAX;AACAgC,IAAAA,IAAI,CAACN,GAAL,CAAS1B,GAAT,GAAegO,MAAf;AACA,QAAI,KAAK5U,OAAL,CAAa0pD,MAAjB,EAAyB9gD,IAAI,CAAC+rD,KAAL,CAAW,CAAX,IAAgB/tD,GAAhB;AAC1B;;AAEDmzB,EAAAA,0BAA0B,CAACnxB,IAAD,EAAOisD,YAAP,EAAqB;AAC7C,SAAKhQ,kBAAL,CAAwBj8C,IAAxB,EAA8BisD,YAAY,CAACluD,KAA3C,EAAkDkuD,YAAY,CAACvsD,GAAb,CAAiB3B,KAAnE;AACD;;AAzCgC;;AA6CnC,MAAMmuD,6BAA6B,GAAGlsD,IAAI,IAAI;AAC5C,SAAOA,IAAI,CAACY,IAAL,KAAc,yBAAd,GAA0CsrD,6BAA6B,CAAClsD,IAAI,CAACuO,UAAN,CAAvE,GAA2FvO,IAAlG;AACD,CAFD;;AAIA,MAAMmsD,UAAN,SAAyBH,SAAzB,CAAmC;AACjCh6C,EAAAA,YAAY,CAAChS,IAAD,EAAOiS,KAAK,GAAG,KAAf,EAAsB;AAChC,QAAIqZ,WAAJ,EAAiB8gC,YAAjB;;AAEA,QAAIh9C,aAAa,GAAG1O,SAApB;;AAEA,QAAIV,IAAI,CAACY,IAAL,KAAc,yBAAd,IAA2C,CAAC0qB,WAAW,GAAGtrB,IAAI,CAACwO,KAApB,KAA8B,IAA9B,IAAsC8c,WAAW,CAAClc,aAAjG,EAAgH;AAC9GA,MAAAA,aAAa,GAAG88C,6BAA6B,CAAClsD,IAAD,CAA7C;;AAEA,UAAIiS,KAAJ,EAAW;AACT,YAAI7C,aAAa,CAACxO,IAAd,KAAuB,YAA3B,EAAyC;AACvC,eAAK6qD,eAAL,CAAqB9B,kCAArB,CAAwD3pD,IAAI,CAACjC,KAA7D,EAAoE8D,aAAa,CAAC4D,8BAAlF;AACD,SAFD,MAEO,IAAI2J,aAAa,CAACxO,IAAd,KAAuB,kBAA3B,EAA+C;AACpD,eAAKuL,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAAC4D,8BAArC;AACD;AACF,OAND,MAMO;AACL,aAAK0G,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAAC4D,8BAArC;AACD;AACF;;AAED,YAAQzF,IAAI,CAACY,IAAb;AACE,WAAK,YAAL;AACA,WAAK,eAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACE;;AAEF,WAAK,kBAAL;AACEZ,QAAAA,IAAI,CAACY,IAAL,GAAY,eAAZ;;AAEA,aAAK,IAAIR,CAAC,GAAG,CAAR,EAAWd,MAAM,GAAGU,IAAI,CAACmB,UAAL,CAAgB7B,MAApC,EAA4CF,IAAI,GAAGE,MAAM,GAAG,CAAjE,EAAoEc,CAAC,GAAGd,MAAxE,EAAgFc,CAAC,EAAjF,EAAqF;AACnF,cAAIisD,YAAJ;;AAEA,gBAAM16C,IAAI,GAAG3R,IAAI,CAACmB,UAAL,CAAgBf,CAAhB,CAAb;AACA,gBAAMksD,MAAM,GAAGlsD,CAAC,KAAKhB,IAArB;AACA,eAAK8S,gCAAL,CAAsCP,IAAtC,EAA4C26C,MAA5C,EAAoDr6C,KAApD;;AAEA,cAAIq6C,MAAM,IAAI36C,IAAI,CAAC/Q,IAAL,KAAc,aAAxB,IAAyC,CAACyrD,YAAY,GAAGrsD,IAAI,CAACwO,KAArB,KAA+B,IAAxE,IAAgF69C,YAAY,CAAC7gC,aAAjG,EAAgH;AAC9G,iBAAK+gC,gBAAL,CAAsBvsD,IAAI,CAACwO,KAAL,CAAWgd,aAAjC;AACD;AACF;;AAED;;AAEF,WAAK,gBAAL;AACE,aAAKxZ,YAAL,CAAkBhS,IAAI,CAAC/J,KAAvB,EAA8Bgc,KAA9B;AACA;;AAEF,WAAK,eAAL;AACE;AACE,eAAKu6C,qBAAL,CAA2BxsD,IAA3B;AACAA,UAAAA,IAAI,CAACY,IAAL,GAAY,aAAZ;AACA,gBAAM6rD,GAAG,GAAGzsD,IAAI,CAACqnB,QAAjB;AACA,eAAKrV,YAAL,CAAkBy6C,GAAlB,EAAuBx6C,KAAvB;AACA;AACD;;AAEH,WAAK,iBAAL;AACEjS,QAAAA,IAAI,CAACY,IAAL,GAAY,cAAZ;AACA,aAAK2qB,gBAAL,CAAsBvrB,IAAI,CAACC,QAA3B,EAAqC,CAACmsD,YAAY,GAAGpsD,IAAI,CAACwO,KAArB,KAA+B,IAA/B,GAAsC,KAAK,CAA3C,GAA+C49C,YAAY,CAAC5gC,aAAjG,EAAgHvZ,KAAhH;AACA;;AAEF,WAAK,sBAAL;AACE,YAAIjS,IAAI,CAACqtB,QAAL,KAAkB,GAAtB,EAA2B;AACzB,eAAKlhB,KAAL,CAAWnM,IAAI,CAAC+uB,IAAL,CAAU/wB,GAArB,EAA0B6D,aAAa,CAACsE,qBAAxC;AACD;;AAEDnG,QAAAA,IAAI,CAACY,IAAL,GAAY,mBAAZ;AACA,eAAOZ,IAAI,CAACqtB,QAAZ;AACA,aAAKrb,YAAL,CAAkBhS,IAAI,CAAC+uB,IAAvB,EAA6B9c,KAA7B;AACA;;AAEF,WAAK,yBAAL;AACE,aAAKD,YAAL,CAAkB5C,aAAlB,EAAiC6C,KAAjC;AACA;AAtDJ;;AAyDA,WAAOjS,IAAP;AACD;;AAEDkS,EAAAA,gCAAgC,CAACP,IAAD,EAAO26C,MAAP,EAAer6C,KAAf,EAAsB;AACpD,QAAIN,IAAI,CAAC/Q,IAAL,KAAc,cAAlB,EAAkC;AAChC,YAAMgM,KAAK,GAAG+E,IAAI,CAACP,IAAL,KAAc,KAAd,IAAuBO,IAAI,CAACP,IAAL,KAAc,KAArC,GAA6CvP,aAAa,CAACyF,kBAA3D,GAAgFzF,aAAa,CAAC0F,gBAA5G;AACA,WAAK4E,KAAL,CAAWwF,IAAI,CAACQ,GAAL,CAASpU,KAApB,EAA2B6O,KAA3B;AACD,KAHD,MAGO,IAAI+E,IAAI,CAAC/Q,IAAL,KAAc,eAAd,IAAiC,CAAC0rD,MAAtC,EAA8C;AACnD,WAAKC,gBAAL,CAAsB56C,IAAI,CAAC5T,KAA3B;AACD,KAFM,MAEA;AACL,WAAKiU,YAAL,CAAkBL,IAAlB,EAAwBM,KAAxB;AACD;AACF;;AAEDsZ,EAAAA,gBAAgB,CAAC+B,QAAD,EAAWC,gBAAX,EAA6Btb,KAA7B,EAAoC;AAClD,QAAIjU,GAAG,GAAGsvB,QAAQ,CAAChuB,MAAnB;;AAEA,QAAItB,GAAJ,EAAS;AACP,YAAMoB,IAAI,GAAGkuB,QAAQ,CAACtvB,GAAG,GAAG,CAAP,CAArB;;AAEA,UAAI,CAACoB,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACwB,IAA9B,MAAwC,aAA5C,EAA2D;AACzD,UAAE5C,GAAF;AACD,OAFD,MAEO,IAAI,CAACoB,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACwB,IAA9B,MAAwC,eAA5C,EAA6D;AAClExB,QAAAA,IAAI,CAACwB,IAAL,GAAY,aAAZ;AACA,YAAI6rD,GAAG,GAAGrtD,IAAI,CAACioB,QAAf;AACA,aAAKrV,YAAL,CAAkBy6C,GAAlB,EAAuBx6C,KAAvB;AACAw6C,QAAAA,GAAG,GAAGP,6BAA6B,CAACO,GAAD,CAAnC;;AAEA,YAAIA,GAAG,CAAC7rD,IAAJ,KAAa,YAAb,IAA6B6rD,GAAG,CAAC7rD,IAAJ,KAAa,kBAA1C,IAAgE6rD,GAAG,CAAC7rD,IAAJ,KAAa,cAA7E,IAA+F6rD,GAAG,CAAC7rD,IAAJ,KAAa,eAAhH,EAAiI;AAC/H,eAAKiiB,UAAL,CAAgB4pC,GAAG,CAAC1uD,KAApB;AACD;;AAED,YAAIwvB,gBAAJ,EAAsB;AACpB,eAAKm/B,2BAAL,CAAiCn/B,gBAAjC;AACD;;AAED,UAAEvvB,GAAF;AACD;AACF;;AAED,SAAK,IAAIoC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,GAApB,EAAyBoC,CAAC,EAA1B,EAA8B;AAC5B,YAAMw5C,GAAG,GAAGtsB,QAAQ,CAACltB,CAAD,CAApB;;AAEA,UAAIw5C,GAAJ,EAAS;AACP,aAAK5nC,YAAL,CAAkB4nC,GAAlB,EAAuB3nC,KAAvB;;AAEA,YAAI2nC,GAAG,CAACh5C,IAAJ,KAAa,aAAjB,EAAgC;AAC9B,eAAK2rD,gBAAL,CAAsB3S,GAAG,CAAC77C,KAA1B;AACD;AACF;AACF;;AAED,WAAOuvB,QAAP;AACD;;AAEDE,EAAAA,gBAAgB,CAACF,QAAD,EAAWG,mBAAX,EAAgC;AAC9C,WAAOH,QAAP;AACD;;AAEDq/B,EAAAA,oBAAoB,CAACr/B,QAAD,EAAWG,mBAAX,EAAgC;AAClD,SAAKD,gBAAL,CAAsBF,QAAtB,EAAgCG,mBAAhC;;AAEA,SAAK,MAAM9D,IAAX,IAAmB2D,QAAnB,EAA6B;AAC3B,UAAI,CAAC3D,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAAC/oB,IAA9B,MAAwC,iBAA5C,EAA+D;AAC7D,aAAK+rD,oBAAL,CAA0BhjC,IAAI,CAAC1pB,QAA/B;AACD;AACF;AACF;;AAED2sD,EAAAA,WAAW,CAACt8C,mBAAD,EAAsB0Z,gBAAtB,EAAwC;AACjD,UAAMhqB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0F,IAAL;AACA7W,IAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAK2D,uBAAL,CAA6B1a,mBAA7B,EAAkD5P,SAAlD,EAA6DspB,gBAA7D,CAAhB;AACA,WAAO,KAAK1Y,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED6sD,EAAAA,gBAAgB,GAAG;AACjB,UAAM7sD,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0F,IAAL;AACA7W,IAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAK6I,gBAAL,EAAhB;AACA,WAAO,KAAK5e,UAAL,CAAgBtR,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDkwB,EAAAA,gBAAgB,GAAG;AACjB,YAAQ,KAAKvwB,KAAL,CAAWiB,IAAnB;AACE,WAAKpJ,OAAO,CAACQ,QAAb;AACE;AACE,gBAAMgI,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,eAAK0F,IAAL;AACA7W,UAAAA,IAAI,CAACC,QAAL,GAAgB,KAAKwxC,gBAAL,CAAsBj6C,OAAO,CAACW,QAA9B,EAAwC,EAAxC,EAA4C,IAA5C,CAAhB;AACA,iBAAO,KAAKmZ,UAAL,CAAgBtR,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEH,WAAKxI,OAAO,CAACa,MAAb;AACE,eAAO,KAAKy0D,eAAL,CAAqBt1D,OAAO,CAACgB,MAA7B,EAAqC,IAArC,CAAP;AAVJ;;AAaA,WAAO,KAAK6oB,eAAL,EAAP;AACD;;AAEDowB,EAAAA,gBAAgB,CAAC7jB,KAAD,EAAQm/B,aAAR,EAAuBC,UAAvB,EAAmC58B,cAAnC,EAAmD;AACjE,UAAM68B,IAAI,GAAG,EAAb;AACA,QAAIjlC,KAAK,GAAG,IAAZ;;AAEA,WAAO,CAAC,KAAKlH,GAAL,CAAS8M,KAAT,CAAR,EAAyB;AACvB,UAAI5F,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKvH,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACD;;AAED,UAAIo0D,UAAU,IAAI,KAAKzuD,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,CAAlB,EAA6C;AAC3Cq0D,QAAAA,IAAI,CAACptD,IAAL,CAAU,IAAV;AACD,OAFD,MAEO,IAAI,KAAKihB,GAAL,CAAS8M,KAAT,CAAJ,EAAqB;AAC1B;AACD,OAFM,MAEA,IAAI,KAAKrvB,KAAL,CAAW/G,OAAO,CAAC6B,QAAnB,CAAJ,EAAkC;AACvC4zD,QAAAA,IAAI,CAACptD,IAAL,CAAU,KAAKgvB,4BAAL,CAAkC,KAAKg+B,gBAAL,EAAlC,CAAV;AACA,aAAKhQ,mBAAL,CAAyBkQ,aAAzB;AACA,aAAKtsC,MAAL,CAAYmN,KAAZ;AACA;AACD,OALM,MAKA;AACL,cAAM8rB,UAAU,GAAG,EAAnB;;AAEA,YAAI,KAAKn7C,KAAL,CAAW/G,OAAO,CAACgC,EAAnB,KAA0B,KAAKsF,SAAL,CAAe,YAAf,CAA9B,EAA4D;AAC1D,eAAKqN,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAAC0I,6BAA3C;AACD;;AAED,eAAO,KAAKhM,KAAL,CAAW/G,OAAO,CAACgC,EAAnB,CAAP,EAA+B;AAC7BkgD,UAAAA,UAAU,CAAC75C,IAAX,CAAgB,KAAKqtD,cAAL,EAAhB;AACD;;AAEDD,QAAAA,IAAI,CAACptD,IAAL,CAAU,KAAK45C,uBAAL,CAA6BrpB,cAA7B,EAA6CspB,UAA7C,CAAV;AACD;AACF;;AAED,WAAOuT,IAAP;AACD;;AAEDxT,EAAAA,uBAAuB,CAACrpB,cAAD,EAAiBspB,UAAjB,EAA6B;AAClD,UAAM3qB,IAAI,GAAG,KAAKD,iBAAL,EAAb;AACA,SAAKD,4BAAL,CAAkCE,IAAlC;AACA,UAAM6qB,GAAG,GAAG,KAAK9qB,iBAAL,CAAuBC,IAAI,CAAChxB,KAA5B,EAAmCgxB,IAAI,CAACrvB,GAAL,CAAS3B,KAA5C,EAAmDgxB,IAAnD,CAAZ;;AAEA,QAAI2qB,UAAU,CAACp6C,MAAf,EAAuB;AACrByvB,MAAAA,IAAI,CAAC2qB,UAAL,GAAkBA,UAAlB;AACD;;AAED,WAAOE,GAAP;AACD;;AAED/qB,EAAAA,4BAA4B,CAAC9F,KAAD,EAAQ;AAClC,WAAOA,KAAP;AACD;;AAED+F,EAAAA,iBAAiB,CAACle,QAAD,EAAW/E,QAAX,EAAqBkjB,IAArB,EAA2B;AAC1C,QAAIo+B,SAAJ,EAAeC,SAAf,EAA0BC,KAA1B;;AAEAxhD,IAAAA,QAAQ,GAAG,CAACshD,SAAS,GAAGthD,QAAb,KAA0B,IAA1B,GAAiCshD,SAAjC,GAA6C,KAAKxtD,KAAL,CAAWkM,QAAnE;AACA+E,IAAAA,QAAQ,GAAG,CAACw8C,SAAS,GAAGx8C,QAAb,KAA0B,IAA1B,GAAiCw8C,SAAjC,GAA6C,KAAKztD,KAAL,CAAW5B,KAAnE;AACAgxB,IAAAA,IAAI,GAAG,CAACs+B,KAAK,GAAGt+B,IAAT,KAAkB,IAAlB,GAAyBs+B,KAAzB,GAAiC,KAAKn9B,gBAAL,EAAxC;AACA,QAAI,CAAC,KAAKpP,GAAL,CAAStpB,OAAO,CAACmC,EAAjB,CAAL,EAA2B,OAAOo1B,IAAP;AAC3B,UAAM/uB,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,IAAAA,IAAI,CAAC+uB,IAAL,GAAYA,IAAZ;AACA/uB,IAAAA,IAAI,CAAC2kB,KAAL,GAAa,KAAKqG,uBAAL,EAAb;AACA,WAAO,KAAK1Z,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDguB,EAAAA,SAAS,CAACrE,IAAD,EAAOwF,kBAAP,EAA2BlU,WAAW,GAAGrC,SAAzC,EAAoD00C,YAApD,EAAkEC,kBAAlE,EAAsFC,iBAAiB,GAAG,KAA1G,EAAiH;AACxH,YAAQ7jC,IAAI,CAAC/oB,IAAb;AACE,WAAK,YAAL;AACE;AACE,gBAAM;AACJzJ,YAAAA;AADI,cAEFwyB,IAFJ;;AAIA,cAAI,KAAKhqB,KAAL,CAAWkW,MAAX,KAAsB23C,iBAAiB,GAAGh3C,wBAAwB,CAACrf,IAAD,EAAO,KAAKkf,QAAZ,CAA3B,GAAmDE,4BAA4B,CAACpf,IAAD,CAAtH,CAAJ,EAAmI;AACjI,iBAAKgV,KAAL,CAAWwd,IAAI,CAAC5rB,KAAhB,EAAuBkd,WAAW,KAAKrC,SAAhB,GAA4B/W,aAAa,CAAC2G,mBAA1C,GAAgE3G,aAAa,CAAC4G,0BAArG,EAAiItR,IAAjI;AACD;;AAED,cAAIm2D,YAAJ,EAAkB;AAChB,gBAAIA,YAAY,CAACtuD,GAAb,CAAiB7H,IAAjB,CAAJ,EAA4B;AAC1B,mBAAKgV,KAAL,CAAWwd,IAAI,CAAC5rB,KAAhB,EAAuB8D,aAAa,CAACwF,SAArC;AACD,aAFD,MAEO;AACLimD,cAAAA,YAAY,CAACl4B,GAAb,CAAiBj+B,IAAjB;AACD;AACF;;AAED,cAAIo2D,kBAAkB,IAAIp2D,IAAI,KAAK,KAAnC,EAA0C;AACxC,iBAAKgV,KAAL,CAAWwd,IAAI,CAAC5rB,KAAhB,EAAuB8D,aAAa,CAACkE,mBAArC;AACD;;AAED,cAAI,EAAEkV,WAAW,GAAGrC,SAAhB,CAAJ,EAAgC;AAC9B,iBAAKmC,KAAL,CAAWC,WAAX,CAAuB7jB,IAAvB,EAA6B8jB,WAA7B,EAA0C0O,IAAI,CAAC5rB,KAA/C;AACD;;AAED;AACD;;AAEH,WAAK,kBAAL;AACE,YAAIkd,WAAW,KAAKrC,SAApB,EAA+B;AAC7B,eAAKzM,KAAL,CAAWwd,IAAI,CAAC5rB,KAAhB,EAAuB8D,aAAa,CAAC8D,6BAArC;AACD;;AAED;;AAEF,WAAK,eAAL;AACE,aAAK,IAAIgM,IAAT,IAAiBgY,IAAI,CAACxoB,UAAtB,EAAkC;AAChC,cAAI,KAAK4N,gBAAL,CAAsB4C,IAAtB,CAAJ,EAAiCA,IAAI,GAAGA,IAAI,CAAC1b,KAAZ,CAAjC,KAAwD,IAAI,KAAKsd,cAAL,CAAoB5B,IAApB,CAAJ,EAA+B;AACvF,eAAKqc,SAAL,CAAerc,IAAf,EAAqB,8BAArB,EAAqDsJ,WAArD,EAAkEqyC,YAAlE,EAAgFC,kBAAhF;AACD;;AAED;;AAEF,WAAK,cAAL;AACE,aAAK,MAAME,IAAX,IAAmB9jC,IAAI,CAAC1pB,QAAxB,EAAkC;AAChC,cAAIwtD,IAAJ,EAAU;AACR,iBAAKz/B,SAAL,CAAey/B,IAAf,EAAqB,6BAArB,EAAoDxyC,WAApD,EAAiEqyC,YAAjE,EAA+EC,kBAA/E;AACD;AACF;;AAED;;AAEF,WAAK,mBAAL;AACE,aAAKv/B,SAAL,CAAerE,IAAI,CAACoF,IAApB,EAA0B,oBAA1B,EAAgD9T,WAAhD,EAA6DqyC,YAA7D;AACA;;AAEF,WAAK,aAAL;AACE,aAAKt/B,SAAL,CAAerE,IAAI,CAACtC,QAApB,EAA8B,cAA9B,EAA8CpM,WAA9C,EAA2DqyC,YAA3D;AACA;;AAEF,WAAK,yBAAL;AACE,aAAKt/B,SAAL,CAAerE,IAAI,CAACpb,UAApB,EAAgC,0BAAhC,EAA4D0M,WAA5D,EAAyEqyC,YAAzE;AACA;;AAEF;AACE;AACE,eAAKnhD,KAAL,CAAWwd,IAAI,CAAC5rB,KAAhB,EAAuBkd,WAAW,KAAKrC,SAAhB,GAA4B/W,aAAa,CAACuD,UAA1C,GAAuDvD,aAAa,CAACwD,iBAA5F,EAA+G8pB,kBAA/G;AACD;AArEL;AAuED;;AAEDq9B,EAAAA,qBAAqB,CAACxsD,IAAD,EAAO;AAC1B,QAAIA,IAAI,CAACqnB,QAAL,CAAczmB,IAAd,KAAuB,YAAvB,IAAuCZ,IAAI,CAACqnB,QAAL,CAAczmB,IAAd,KAAuB,kBAAlE,EAAsF;AACpF,WAAKuL,KAAL,CAAWnM,IAAI,CAACqnB,QAAL,CAActpB,KAAzB,EAAgC8D,aAAa,CAACgE,4BAA9C;AACD;AACF;;AAEDg3C,EAAAA,mBAAmB,CAACjvB,KAAD,EAAQ;AACzB,QAAI,KAAKrvB,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,CAAJ,EAA+B;AAC7B,UAAI,KAAK07C,iBAAL,OAA6B1mB,KAAjC,EAAwC;AACtC,aAAK8+B,2BAAL,CAAiC,KAAK/sD,KAAL,CAAW5B,KAA5C;AACD,OAFD,MAEO;AACL,aAAKwuD,gBAAL,CAAsB,KAAK5sD,KAAL,CAAW5B,KAAjC;AACD;AACF;AACF;;AAEDwuD,EAAAA,gBAAgB,CAAC3gD,GAAD,EAAM;AACpB,UAAM,KAAKO,KAAL,CAAWP,GAAX,EAAgB/J,aAAa,CAAC+B,gBAA9B,CAAN;AACD;;AAED8oD,EAAAA,2BAA2B,CAAC9gD,GAAD,EAAM;AAC/B,SAAKO,KAAL,CAAWP,GAAX,EAAgB/J,aAAa,CAACuG,iBAA9B;AACD;;AApVgC;;AAwVnC,MAAMslD,gBAAN,SAA+BvB,UAA/B,CAA0C;AACxCwB,EAAAA,UAAU,CAACh8C,IAAD,EAAOi8C,QAAP,EAAiBC,QAAjB,EAA2Bv9C,mBAA3B,EAAgD;AACxD,QAAIqB,IAAI,CAAC/Q,IAAL,KAAc,eAAd,IAAiC,KAAK2S,cAAL,CAAoB5B,IAApB,CAAjC,IAA8DA,IAAI,CAACN,QAAnE,IAA+EM,IAAI,CAACG,SAAxF,EAAmG;AACjG;AACD;;AAED,UAAMK,GAAG,GAAGR,IAAI,CAACQ,GAAjB;AACA,UAAMhb,IAAI,GAAGgb,GAAG,CAACvR,IAAJ,KAAa,YAAb,GAA4BuR,GAAG,CAAChb,IAAhC,GAAuCgb,GAAG,CAAClc,KAAxD;;AAEA,QAAIkB,IAAI,KAAK,WAAb,EAA0B;AACxB,UAAIy2D,QAAJ,EAAc;AACZ,aAAKzhD,KAAL,CAAWgG,GAAG,CAACpU,KAAf,EAAsB8D,aAAa,CAACsG,aAApC;AACA;AACD;;AAED,UAAI0lD,QAAQ,CAACC,IAAb,EAAmB;AACjB,YAAIx9C,mBAAJ,EAAyB;AACvB,cAAIA,mBAAmB,CAAC26C,WAApB,KAAoC,CAAC,CAAzC,EAA4C;AAC1C36C,YAAAA,mBAAmB,CAAC26C,WAApB,GAAkC94C,GAAG,CAACpU,KAAtC;AACD;AACF,SAJD,MAIO;AACL,eAAKoO,KAAL,CAAWgG,GAAG,CAACpU,KAAf,EAAsB8D,aAAa,CAAC6B,cAApC;AACD;AACF;;AAEDmqD,MAAAA,QAAQ,CAACC,IAAT,GAAgB,IAAhB;AACD;AACF;;AAEDC,EAAAA,oBAAoB,CAACpkC,IAAD,EAAOy3B,gBAAP,EAAyB;AAC3C,WAAOz3B,IAAI,CAAC/oB,IAAL,KAAc,yBAAd,IAA2C+oB,IAAI,CAAC5rB,KAAL,KAAeqjD,gBAAjE;AACD;;AAED3D,EAAAA,aAAa,GAAG;AACd,QAAIkO,UAAU,GAAG/hB,KAAjB;;AAEA,QAAI,KAAK9qC,SAAL,CAAe,eAAf,KAAmC,KAAKuX,QAA5C,EAAsD;AACpDs1C,MAAAA,UAAU,IAAI7hB,WAAd;AACD;;AAED,SAAK/uB,KAAL,CAAWF,KAAX,CAAiB9D,aAAjB;AACA,SAAK6gC,SAAL,CAAe/8B,KAAf,CAAqB8wC,UAArB;AACA,SAAKj5B,SAAL;AACA,UAAM/I,IAAI,GAAG,KAAK5I,eAAL,EAAb;;AAEA,QAAI,CAAC,KAAKxiB,KAAL,CAAW/G,OAAO,CAACO,GAAnB,CAAL,EAA8B;AAC5B,WAAK8qB,UAAL;AACD;;AAED8G,IAAAA,IAAI,CAACk4B,QAAL,GAAgB,KAAKliD,KAAL,CAAWkiD,QAA3B;AACAl4B,IAAAA,IAAI,CAAChd,MAAL,GAAc,KAAKhN,KAAL,CAAWgN,MAAzB;;AAEA,QAAI,KAAKvV,OAAL,CAAa2pD,MAAjB,EAAyB;AACvBp3B,MAAAA,IAAI,CAACo3B,MAAL,GAAc,KAAKA,MAAnB;AACD;;AAED,WAAOp3B,IAAP;AACD;;AAED5I,EAAAA,eAAe,CAACitC,UAAD,EAAa19C,mBAAb,EAAkC;AAC/C,QAAI09C,UAAJ,EAAgB;AACd,aAAO,KAAKC,aAAL,CAAmB,MAAM,KAAKC,mBAAL,CAAyB59C,mBAAzB,CAAzB,CAAP;AACD;;AAED,WAAO,KAAK69C,UAAL,CAAgB,MAAM,KAAKD,mBAAL,CAAyB59C,mBAAzB,CAAtB,CAAP;AACD;;AAED49C,EAAAA,mBAAmB,CAAC59C,mBAAD,EAAsB;AACvC,UAAMM,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,UAAM8d,IAAI,GAAG,KAAKmB,gBAAL,CAAsBxa,mBAAtB,CAAb;;AAEA,QAAI,KAAK/R,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,CAAJ,EAA+B;AAC7B,YAAMoH,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,MAAAA,IAAI,CAACouD,WAAL,GAAmB,CAACzkC,IAAD,CAAnB;;AAEA,aAAO,KAAK7I,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAAP,EAAgC;AAC9BoH,QAAAA,IAAI,CAACouD,WAAL,CAAiBvuD,IAAjB,CAAsB,KAAKirB,gBAAL,CAAsBxa,mBAAtB,CAAtB;AACD;;AAED,WAAKkd,gBAAL,CAAsBxtB,IAAI,CAACouD,WAA3B;AACA,aAAO,KAAK98C,UAAL,CAAgBtR,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAED,WAAO2pB,IAAP;AACD;;AAED0kC,EAAAA,0BAA0B,CAAC/9C,mBAAD,EAAsBmgB,cAAtB,EAAsCzG,gBAAtC,EAAwD;AAChF,WAAO,KAAKikC,aAAL,CAAmB,MAAM,KAAKnjC,gBAAL,CAAsBxa,mBAAtB,EAA2CmgB,cAA3C,EAA2DzG,gBAA3D,CAAzB,CAAP;AACD;;AAEDgB,EAAAA,uBAAuB,CAAC1a,mBAAD,EAAsBmgB,cAAtB,EAAsCzG,gBAAtC,EAAwD;AAC7E,WAAO,KAAKmkC,UAAL,CAAgB,MAAM,KAAKrjC,gBAAL,CAAsBxa,mBAAtB,EAA2CmgB,cAA3C,EAA2DzG,gBAA3D,CAAtB,CAAP;AACD;;AAEDc,EAAAA,gBAAgB,CAACxa,mBAAD,EAAsBmgB,cAAtB,EAAsCzG,gBAAtC,EAAwD;AACtE,UAAMpZ,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;;AAEA,QAAI,KAAK2W,YAAL,CAAkB,OAAlB,CAAJ,EAAgC;AAC9B,UAAI,KAAKo1B,SAAL,CAAevN,QAAnB,EAA6B;AAC3B,aAAK1qC,KAAL,CAAW6U,WAAX,GAAyB,IAAzB;AACA,YAAIua,IAAI,GAAG,KAAKu/B,UAAL,EAAX;;AAEA,YAAI79B,cAAJ,EAAoB;AAClB1B,UAAAA,IAAI,GAAG0B,cAAc,CAACF,IAAf,CAAoB,IAApB,EAA0BxB,IAA1B,EAAgCne,QAAhC,EAA0C/E,QAA1C,CAAP;AACD;;AAED,eAAOkjB,IAAP;AACD;AACF;;AAED,QAAIw/B,mBAAJ;;AAEA,QAAIj+C,mBAAJ,EAAyB;AACvBi+C,MAAAA,mBAAmB,GAAG,KAAtB;AACD,KAFD,MAEO;AACLj+C,MAAAA,mBAAmB,GAAG,IAAIs7C,gBAAJ,EAAtB;AACA2C,MAAAA,mBAAmB,GAAG,IAAtB;AACD;;AAED,QAAI,KAAKhwD,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,KAA8B,KAAK6F,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAlC,EAA4D;AAC1D,WAAKwI,KAAL,CAAWyhD,gBAAX,GAA8B,KAAKzhD,KAAL,CAAW5B,KAAzC;AACD;;AAED,QAAIgxB,IAAI,GAAG,KAAKy/B,qBAAL,CAA2Bl+C,mBAA3B,EAAgD0Z,gBAAhD,CAAX;;AAEA,QAAIyG,cAAJ,EAAoB;AAClB1B,MAAAA,IAAI,GAAG0B,cAAc,CAACF,IAAf,CAAoB,IAApB,EAA0BxB,IAA1B,EAAgCne,QAAhC,EAA0C/E,QAA1C,CAAP;AACD;;AAED,QAAI,KAAKlM,KAAL,CAAWiB,IAAX,CAAgBvK,QAApB,EAA8B;AAC5B,YAAM2J,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA,YAAMwhB,QAAQ,GAAG,KAAK1tB,KAAL,CAAW1J,KAA5B;AACA+J,MAAAA,IAAI,CAACqtB,QAAL,GAAgBA,QAAhB;;AAEA,UAAI,KAAK9uB,KAAL,CAAW/G,OAAO,CAACmC,EAAnB,CAAJ,EAA4B;AAC1BqG,QAAAA,IAAI,CAAC+uB,IAAL,GAAY,KAAK/c,YAAL,CAAkB+c,IAAlB,EAAwB,IAAxB,CAAZ;AACAze,QAAAA,mBAAmB,CAAC26C,WAApB,GAAkC,CAAC,CAAnC;AACD,OAHD,MAGO;AACLjrD,QAAAA,IAAI,CAAC+uB,IAAL,GAAYA,IAAZ;AACD;;AAED,UAAIze,mBAAmB,CAAC06C,eAApB,IAAuChrD,IAAI,CAAC+uB,IAAL,CAAUhxB,KAArD,EAA4D;AAC1DuS,QAAAA,mBAAmB,CAAC06C,eAApB,GAAsC,CAAC,CAAvC;AACD;;AAED,WAAKh9B,SAAL,CAAee,IAAf,EAAqB,uBAArB;AACA,WAAKlY,IAAL;AACA7W,MAAAA,IAAI,CAAC2kB,KAAL,GAAa,KAAKmG,gBAAL,EAAb;AACA,aAAO,KAAKxZ,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;AACD,KApBD,MAoBO,IAAIuuD,mBAAJ,EAAyB;AAC9B,WAAKzD,qBAAL,CAA2Bx6C,mBAA3B,EAAgD,IAAhD;AACD;;AAED,WAAOye,IAAP;AACD;;AAEDy/B,EAAAA,qBAAqB,CAACl+C,mBAAD,EAAsB0Z,gBAAtB,EAAwC;AAC3D,UAAMpZ,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,UAAMu1C,gBAAgB,GAAG,KAAKzhD,KAAL,CAAWyhD,gBAApC;AACA,UAAMz3B,IAAI,GAAG,KAAK8kC,YAAL,CAAkBn+C,mBAAlB,CAAb;;AAEA,QAAI,KAAKy9C,oBAAL,CAA0BpkC,IAA1B,EAAgCy3B,gBAAhC,CAAJ,EAAuD;AACrD,aAAOz3B,IAAP;AACD;;AAED,WAAO,KAAKI,gBAAL,CAAsBJ,IAAtB,EAA4B/Y,QAA5B,EAAsC/E,QAAtC,EAAgDme,gBAAhD,CAAP;AACD;;AAEDD,EAAAA,gBAAgB,CAACJ,IAAD,EAAO/Y,QAAP,EAAiB/E,QAAjB,EAA2Bme,gBAA3B,EAA6C;AAC3D,QAAI,KAAKlJ,GAAL,CAAStpB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9B,YAAM+G,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,MAAAA,IAAI,CAACyV,IAAL,GAAYkU,IAAZ;AACA3pB,MAAAA,IAAI,CAACuqB,UAAL,GAAkB,KAAKS,uBAAL,EAAlB;AACA,WAAKvK,MAAL,CAAYjpB,OAAO,CAACsB,KAApB;AACAkH,MAAAA,IAAI,CAAC6qB,SAAL,GAAiB,KAAKC,gBAAL,EAAjB;AACA,aAAO,KAAKxZ,UAAL,CAAgBtR,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAED,WAAO2pB,IAAP;AACD;;AAED8kC,EAAAA,YAAY,CAACn+C,mBAAD,EAAsB;AAChC,UAAMM,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,UAAMu1C,gBAAgB,GAAG,KAAKzhD,KAAL,CAAWyhD,gBAApC;AACA,UAAMz3B,IAAI,GAAG,KAAK4qB,eAAL,CAAqBjkC,mBAArB,CAAb;;AAEA,QAAI,KAAKy9C,oBAAL,CAA0BpkC,IAA1B,EAAgCy3B,gBAAhC,CAAJ,EAAuD;AACrD,aAAOz3B,IAAP;AACD;;AAED,WAAO,KAAK8wB,WAAL,CAAiB9wB,IAAjB,EAAuB/Y,QAAvB,EAAiC/E,QAAjC,EAA2C,CAAC,CAA5C,CAAP;AACD;;AAED4uC,EAAAA,WAAW,CAAC1rB,IAAD,EAAO2rB,YAAP,EAAqBC,YAArB,EAAmCC,OAAnC,EAA4C;AACrD,QAAI8T,IAAI,GAAG,KAAK/uD,KAAL,CAAWiB,IAAX,CAAgB9J,KAA3B;;AAEA,QAAI43D,IAAI,IAAI,IAAR,KAAiB,KAAK9W,SAAL,CAAerN,KAAf,IAAwB,CAAC,KAAKhsC,KAAL,CAAW/G,OAAO,CAACqF,GAAnB,CAA1C,CAAJ,EAAwE;AACtE,UAAI6xD,IAAI,GAAG9T,OAAX,EAAoB;AAClB,cAAMuP,EAAE,GAAG,KAAKxqD,KAAL,CAAWiB,IAAtB;;AAEA,YAAIupD,EAAE,KAAK3yD,OAAO,CAACwC,QAAnB,EAA6B;AAC3B,eAAKykD,YAAL,CAAkB,kBAAlB;;AAEA,cAAI,KAAK9+C,KAAL,CAAW+hD,0BAAf,EAA2C;AACzC,mBAAO3yB,IAAP;AACD;;AAED,eAAKpvB,KAAL,CAAW0hD,UAAX,GAAwB,IAAxB;AACA,eAAKsN,4BAAL,CAAkC5/B,IAAlC,EAAwC2rB,YAAxC;AACD;;AAED,cAAM16C,IAAI,GAAG,KAAKsO,WAAL,CAAiBosC,YAAjB,EAA+BC,YAA/B,CAAb;AACA36C,QAAAA,IAAI,CAAC+uB,IAAL,GAAYA,IAAZ;AACA/uB,QAAAA,IAAI,CAACqtB,QAAL,GAAgB,KAAK1tB,KAAL,CAAW1J,KAA3B;AACA,cAAM24D,OAAO,GAAGzE,EAAE,KAAK3yD,OAAO,CAAC0C,SAAf,IAA4BiwD,EAAE,KAAK3yD,OAAO,CAAC2C,UAA3D;AACA,cAAM00D,QAAQ,GAAG1E,EAAE,KAAK3yD,OAAO,CAACyC,iBAAhC;;AAEA,YAAI40D,QAAJ,EAAc;AACZH,UAAAA,IAAI,GAAGl3D,OAAO,CAAC2C,UAAR,CAAmBrD,KAA1B;AACD;;AAED,aAAK+f,IAAL;;AAEA,YAAIszC,EAAE,KAAK3yD,OAAO,CAACwC,QAAf,IAA2B,KAAKiF,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,SAAxF,EAAmG;AACjG,cAAI,KAAKV,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4B,KAAKwI,KAAL,CAAW1J,KAAX,KAAqB,OAAjD,IAA4D,KAAK2hD,SAAL,CAAexN,QAA/E,EAAyF;AACvF,kBAAM,KAAKj+B,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACwH,gCAA3C,CAAN;AACD;AACF;;AAEDrJ,QAAAA,IAAI,CAAC2kB,KAAL,GAAa,KAAKmqC,oBAAL,CAA0B3E,EAA1B,EAA8BuE,IAA9B,CAAb;AACA,aAAKp9C,UAAL,CAAgBtR,IAAhB,EAAsB4uD,OAAO,IAAIC,QAAX,GAAsB,mBAAtB,GAA4C,kBAAlE;AACA,cAAME,MAAM,GAAG,KAAKpvD,KAAL,CAAWiB,IAA1B;;AAEA,YAAIiuD,QAAQ,KAAKE,MAAM,KAAKv3D,OAAO,CAAC0C,SAAnB,IAAgC60D,MAAM,KAAKv3D,OAAO,CAAC2C,UAAxD,CAAR,IAA+Ey0D,OAAO,IAAIG,MAAM,KAAKv3D,OAAO,CAACyC,iBAAjH,EAAoI;AAClI,gBAAM,KAAKkS,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACyE,yBAA3C,CAAN;AACD;;AAED,eAAO,KAAKm0C,WAAL,CAAiBz6C,IAAjB,EAAuB06C,YAAvB,EAAqCC,YAArC,EAAmDC,OAAnD,CAAP;AACD;AACF;;AAED,WAAO7rB,IAAP;AACD;;AAED+/B,EAAAA,oBAAoB,CAAC3E,EAAD,EAAKuE,IAAL,EAAW;AAC7B,UAAM99C,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;;AAEA,YAAQs+C,EAAR;AACE,WAAK3yD,OAAO,CAACwC,QAAb;AACE,gBAAQ,KAAKiF,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,CAAR;AACE,eAAK,OAAL;AACE,mBAAO,KAAK+vD,0BAAL,CAAgC,MAAM;AAC3C,qBAAO,KAAKC,sBAAL,CAA4B,KAAKC,wBAAL,CAA8B/E,EAA9B,EAAkCuE,IAAlC,CAA5B,EAAqE99C,QAArE,EAA+E/E,QAA/E,CAAP;AACD,aAFM,CAAP;;AAIF,eAAK,QAAL;AACE,mBAAO,KAAKsjD,8BAAL,CAAoC,MAAM;AAC/C,qBAAO,KAAKC,uBAAL,CAA6BV,IAA7B,CAAP;AACD,aAFM,CAAP;AAPJ;;AAYF;AACE,eAAO,KAAKQ,wBAAL,CAA8B/E,EAA9B,EAAkCuE,IAAlC,CAAP;AAfJ;AAiBD;;AAEDQ,EAAAA,wBAAwB,CAAC/E,EAAD,EAAKuE,IAAL,EAAW;AACjC,UAAM99C,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,WAAO,KAAK4uC,WAAL,CAAiB,KAAKlG,eAAL,EAAjB,EAAyC3jC,QAAzC,EAAmD/E,QAAnD,EAA6Ds+C,EAAE,CAACtzD,gBAAH,GAAsB63D,IAAI,GAAG,CAA7B,GAAiCA,IAA9F,CAAP;AACD;;AAEDW,EAAAA,0BAA0B,CAACrvD,IAAD,EAAO;AAC/B,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACsD,QAAnB,CAAJ,EAAkC;AAChC,WAAKqR,KAAL,CAAWnM,IAAI,CAACqnB,QAAL,CAActpB,KAAzB,EAAgC8D,aAAa,CAACoI,kCAA9C;AACD;AACF;;AAEDsqC,EAAAA,eAAe,CAACjkC,mBAAD,EAAsBg/C,QAAtB,EAAgC;AAC7C,UAAM1+C,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,UAAM0jD,OAAO,GAAG,KAAK/sC,YAAL,CAAkB,OAAlB,CAAhB;;AAEA,QAAI+sC,OAAO,IAAI,KAAKC,cAAL,EAAf,EAAsC;AACpC,WAAK34C,IAAL;AACA,YAAM8S,IAAI,GAAG,KAAK8lC,UAAL,CAAgB7+C,QAAhB,EAA0B/E,QAA1B,CAAb;AACA,UAAI,CAACyjD,QAAL,EAAe,KAAKD,0BAAL,CAAgC1lC,IAAhC;AACf,aAAOA,IAAP;AACD;;AAED,QAAI,KAAKnH,YAAL,CAAkB,QAAlB,KAA+B,KAAK8xB,iBAAL,OAA6B,GAA5D,IAAmE,CAAC,KAAK+E,qBAAL,EAAxE,EAAsG;AACpG,aAAO,KAAKqW,qBAAL,EAAP;AACD;;AAED,UAAM7H,MAAM,GAAG,KAAKtpD,KAAL,CAAW/G,OAAO,CAACqC,MAAnB,CAAf;AACA,UAAMmG,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEA,QAAI,KAAKxR,KAAL,CAAWiB,IAAX,CAAgBtK,MAApB,EAA4B;AAC1B0J,MAAAA,IAAI,CAACqtB,QAAL,GAAgB,KAAK1tB,KAAL,CAAW1J,KAA3B;AACA+J,MAAAA,IAAI,CAAC1J,MAAL,GAAc,IAAd;;AAEA,UAAI,KAAKiI,KAAL,CAAW/G,OAAO,CAACqE,MAAnB,CAAJ,EAAgC;AAC9B,aAAK4iD,YAAL,CAAkB,kBAAlB;AACD;;AAED,YAAMkR,QAAQ,GAAG,KAAKpxD,KAAL,CAAW/G,OAAO,CAACyF,OAAnB,CAAjB;AACA,WAAK4Z,IAAL;AACA7W,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKktB,eAAL,CAAqB,IAArB,EAA2B,IAA3B,CAAhB;AACA,WAAKuW,qBAAL,CAA2Bx6C,mBAA3B,EAAgD,IAAhD;;AAEA,UAAI,KAAK3Q,KAAL,CAAWkW,MAAX,IAAqB85C,QAAzB,EAAmC;AACjC,cAAMlD,GAAG,GAAGzsD,IAAI,CAACqnB,QAAjB;;AAEA,YAAIolC,GAAG,CAAC7rD,IAAJ,KAAa,YAAjB,EAA+B;AAC7B,eAAKuL,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAAC0G,YAArC;AACD,SAFD,MAEO,IAAI,KAAK8K,wBAAL,CAA8Bo5C,GAA9B,CAAJ,EAAwC;AAC7C,eAAKtgD,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAACwB,kBAArC;AACD;AACF;;AAED,UAAI,CAACwkD,MAAL,EAAa;AACX,YAAI,CAACyH,QAAL,EAAe,KAAKD,0BAAL,CAAgCrvD,IAAhC;AACf,eAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;AACF;;AAED,UAAM2pB,IAAI,GAAG,KAAKimC,WAAL,CAAiB5vD,IAAjB,EAAuB6nD,MAAvB,EAA+Bv3C,mBAA/B,CAAb;;AAEA,QAAIi/C,OAAJ,EAAa;AACX,YAAMp5D,UAAU,GAAG,KAAK2I,SAAL,CAAe,aAAf,IAAgC,KAAKa,KAAL,CAAWiB,IAAX,CAAgBzK,UAAhD,GAA6D,KAAKwJ,KAAL,CAAWiB,IAAX,CAAgBzK,UAAhB,IAA8B,CAAC,KAAKoI,KAAL,CAAW/G,OAAO,CAACmD,MAAnB,CAA/G;;AAEA,UAAIxE,UAAU,IAAI,CAAC,KAAK05D,gBAAL,EAAnB,EAA4C;AAC1C,aAAKvjD,cAAL,CAAoBsE,QAApB,EAA8B,KAAK9R,SAAL,CAAe,eAAf,IAAkC+C,aAAa,CAACQ,sBAAhD,GAAyER,aAAa,CAACS,uBAArH;AACA,eAAO,KAAKmtD,UAAL,CAAgB7+C,QAAhB,EAA0B/E,QAA1B,CAAP;AACD;AACF;;AAED,WAAO8d,IAAP;AACD;;AAEDimC,EAAAA,WAAW,CAAC5vD,IAAD,EAAO6nD,MAAP,EAAev3C,mBAAf,EAAoC;AAC7C,QAAIu3C,MAAJ,EAAY;AACV,WAAK75B,SAAL,CAAehuB,IAAI,CAACqnB,QAApB,EAA8B,kBAA9B;AACA,aAAO,KAAK/V,UAAL,CAAgBtR,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED,UAAM4Q,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,QAAI8d,IAAI,GAAG,KAAKmmC,mBAAL,CAAyBx/C,mBAAzB,CAAX;AACA,QAAI,KAAKw6C,qBAAL,CAA2Bx6C,mBAA3B,EAAgD,KAAhD,CAAJ,EAA4D,OAAOqZ,IAAP;;AAE5D,WAAO,KAAKhqB,KAAL,CAAWiB,IAAX,CAAgBrK,OAAhB,IAA2B,CAAC,KAAKkyB,kBAAL,EAAnC,EAA8D;AAC5D,YAAMzoB,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,MAAAA,IAAI,CAACqtB,QAAL,GAAgB,KAAK1tB,KAAL,CAAW1J,KAA3B;AACA+J,MAAAA,IAAI,CAAC1J,MAAL,GAAc,KAAd;AACA0J,MAAAA,IAAI,CAACqnB,QAAL,GAAgBsC,IAAhB;AACA,WAAKqE,SAAL,CAAerE,IAAf,EAAqB,mBAArB;AACA,WAAK9S,IAAL;AACA8S,MAAAA,IAAI,GAAG,KAAKrY,UAAL,CAAgBtR,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED,WAAO2pB,IAAP;AACD;;AAEDmmC,EAAAA,mBAAmB,CAACx/C,mBAAD,EAAsB;AACvC,UAAMM,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,UAAMu1C,gBAAgB,GAAG,KAAKzhD,KAAL,CAAWyhD,gBAApC;AACA,UAAMz3B,IAAI,GAAG,KAAKtZ,aAAL,CAAmBC,mBAAnB,CAAb;;AAEA,QAAI,KAAKy9C,oBAAL,CAA0BpkC,IAA1B,EAAgCy3B,gBAAhC,CAAJ,EAAuD;AACrD,aAAOz3B,IAAP;AACD;;AAED,WAAO,KAAKoI,eAAL,CAAqBpI,IAArB,EAA2B/Y,QAA3B,EAAqC/E,QAArC,CAAP;AACD;;AAEDkmB,EAAAA,eAAe,CAACjf,IAAD,EAAOlC,QAAP,EAAiB/E,QAAjB,EAA2BkH,OAA3B,EAAoC;AACjD,UAAMpT,KAAK,GAAG;AACZqT,MAAAA,mBAAmB,EAAE,KADT;AAEZ+8C,MAAAA,eAAe,EAAE,KAAKzV,oBAAL,CAA0BxnC,IAA1B,CAFL;AAGZI,MAAAA,IAAI,EAAE;AAHM,KAAd;;AAMA,OAAG;AACDJ,MAAAA,IAAI,GAAG,KAAKD,cAAL,CAAoBC,IAApB,EAA0BlC,QAA1B,EAAoC/E,QAApC,EAA8CkH,OAA9C,EAAuDpT,KAAvD,CAAP;AACAA,MAAAA,KAAK,CAACowD,eAAN,GAAwB,KAAxB;AACD,KAHD,QAGS,CAACpwD,KAAK,CAACuT,IAHhB;;AAKA,WAAOJ,IAAP;AACD;;AAEDD,EAAAA,cAAc,CAACC,IAAD,EAAOlC,QAAP,EAAiB/E,QAAjB,EAA2BkH,OAA3B,EAAoCpT,KAApC,EAA2C;AACvD,QAAI,CAACoT,OAAD,IAAY,KAAK+N,GAAL,CAAStpB,OAAO,CAACuB,WAAjB,CAAhB,EAA+C;AAC7C,aAAO,KAAKi3D,SAAL,CAAel9C,IAAf,EAAqBlC,QAArB,EAA+B/E,QAA/B,EAAyCkH,OAAzC,EAAkDpT,KAAlD,CAAP;AACD,KAFD,MAEO,IAAI,KAAKpB,KAAL,CAAW/G,OAAO,CAAC8B,SAAnB,CAAJ,EAAmC;AACxC,aAAO,KAAKkhD,6BAAL,CAAmC1nC,IAAnC,EAAyClC,QAAzC,EAAmD/E,QAAnD,EAA6DlM,KAA7D,CAAP;AACD;;AAED,QAAI0S,QAAQ,GAAG,KAAf;;AAEA,QAAI,KAAK9T,KAAL,CAAW/G,OAAO,CAAC0B,WAAnB,CAAJ,EAAqC;AACnC,UAAI6Z,OAAO,IAAI,KAAKuhC,iBAAL,OAA6B,EAA5C,EAAgD;AAC9C30C,QAAAA,KAAK,CAACuT,IAAN,GAAa,IAAb;AACA,eAAOJ,IAAP;AACD;;AAEDnT,MAAAA,KAAK,CAACqT,mBAAN,GAA4BX,QAAQ,GAAG,IAAvC;AACA,WAAKwE,IAAL;AACD;;AAED,QAAI,CAAC9D,OAAD,IAAY,KAAKxU,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAAhB,EAA4C;AAC1C,aAAO,KAAKu3D,+BAAL,CAAqCn9C,IAArC,EAA2ClC,QAA3C,EAAqD/E,QAArD,EAA+DlM,KAA/D,EAAsE0S,QAAtE,CAAP;AACD,KAFD,MAEO,IAAIA,QAAQ,IAAI,KAAK9T,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,CAAZ,IAA4C,KAAK8oB,GAAL,CAAStpB,OAAO,CAACwB,GAAjB,CAAhD,EAAuE;AAC5E,aAAO,KAAKk3D,WAAL,CAAiBp9C,IAAjB,EAAuBlC,QAAvB,EAAiC/E,QAAjC,EAA2ClM,KAA3C,EAAkD0S,QAAlD,CAAP;AACD,KAFM,MAEA;AACL1S,MAAAA,KAAK,CAACuT,IAAN,GAAa,IAAb;AACA,aAAOJ,IAAP;AACD;AACF;;AAEDo9C,EAAAA,WAAW,CAACp9C,IAAD,EAAOlC,QAAP,EAAiB/E,QAAjB,EAA2BlM,KAA3B,EAAkC0S,QAAlC,EAA4C;AACrD,UAAMrS,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA,UAAMwF,QAAQ,GAAG,KAAKyP,GAAL,CAAStpB,OAAO,CAACQ,QAAjB,CAAjB;AACAgI,IAAAA,IAAI,CAAC2mC,MAAL,GAAc7zB,IAAd;AACA9S,IAAAA,IAAI,CAACqR,QAAL,GAAgBA,QAAhB;AACA,UAAMvZ,WAAW,GAAG,CAACuZ,QAAD,IAAa,KAAK9S,KAAL,CAAW/G,OAAO,CAACM,WAAnB,CAAb,IAAgD,KAAK6H,KAAL,CAAW1J,KAA/E;AACA,UAAMuxB,QAAQ,GAAGnW,QAAQ,GAAG,KAAK0P,eAAL,EAAH,GAA4BjpB,WAAW,GAAG,KAAKq4D,gBAAL,EAAH,GAA6B,KAAK9uC,eAAL,CAAqB,IAArB,CAA7F;;AAEA,QAAIvpB,WAAW,KAAK,KAApB,EAA2B;AACzB,UAAIkI,IAAI,CAAC2mC,MAAL,CAAY/lC,IAAZ,KAAqB,OAAzB,EAAkC;AAChC,aAAKuL,KAAL,CAAWyE,QAAX,EAAqB/O,aAAa,CAACkH,iBAAnC;AACD;;AAED,WAAKs/C,UAAL,CAAgBO,cAAhB,CAA+B9wD,WAA/B,EAA4C0vB,QAAQ,CAACzpB,KAArD;AACD;;AAEDiC,IAAAA,IAAI,CAACwnB,QAAL,GAAgBA,QAAhB;;AAEA,QAAInW,QAAJ,EAAc;AACZ,WAAKoP,MAAL,CAAYjpB,OAAO,CAACW,QAApB;AACD;;AAED,QAAIwH,KAAK,CAACqT,mBAAV,EAA+B;AAC7BhT,MAAAA,IAAI,CAACqS,QAAL,GAAgBA,QAAhB;AACA,aAAO,KAAKf,UAAL,CAAgBtR,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,kBAAtB,CAAP;AACD;AACF;;AAEDgwD,EAAAA,SAAS,CAACl9C,IAAD,EAAOlC,QAAP,EAAiB/E,QAAjB,EAA2BkH,OAA3B,EAAoCpT,KAApC,EAA2C;AAClD,UAAMK,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,IAAAA,IAAI,CAAC2mC,MAAL,GAAc7zB,IAAd;AACA9S,IAAAA,IAAI,CAACsS,MAAL,GAAc,KAAK89C,eAAL,EAAd;AACAzwD,IAAAA,KAAK,CAACuT,IAAN,GAAa,IAAb;AACA,WAAO,KAAK6e,eAAL,CAAqB,KAAKzgB,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAArB,EAA8D4Q,QAA9D,EAAwE/E,QAAxE,EAAkFkH,OAAlF,CAAP;AACD;;AAEDk9C,EAAAA,+BAA+B,CAACn9C,IAAD,EAAOlC,QAAP,EAAiB/E,QAAjB,EAA2BlM,KAA3B,EAAkC0S,QAAlC,EAA4C;AACzE,UAAMknC,yBAAyB,GAAG,KAAK55C,KAAL,CAAWouB,sBAA7C;AACA,SAAKpuB,KAAL,CAAWouB,sBAAX,GAAoC,IAApC;AACA,SAAKlX,IAAL;AACA,QAAI7W,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAX;AACA7L,IAAAA,IAAI,CAACsS,MAAL,GAAcQ,IAAd;;AAEA,QAAInT,KAAK,CAACowD,eAAV,EAA2B;AACzB,WAAKtE,eAAL,CAAqB5wC,KAArB,CAA2BmvC,kBAAkB,EAA7C;AACD;;AAED,QAAIrqD,KAAK,CAACqT,mBAAV,EAA+B;AAC7BhT,MAAAA,IAAI,CAACqS,QAAL,GAAgBA,QAAhB;AACD;;AAED,QAAIA,QAAJ,EAAc;AACZrS,MAAAA,IAAI,CAACoB,SAAL,GAAiB,KAAK4wB,4BAAL,CAAkCx6B,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACD,KAFD,MAEO;AACLqH,MAAAA,IAAI,CAACoB,SAAL,GAAiB,KAAK4wB,4BAAL,CAAkCx6B,OAAO,CAACmB,MAA1C,EAAkDgH,KAAK,CAACowD,eAAxD,EAAyEj9C,IAAI,CAAClS,IAAL,KAAc,QAAvF,EAAiGkS,IAAI,CAAClS,IAAL,KAAc,OAA/G,EAAwHZ,IAAxH,CAAjB;AACD;;AAED,SAAKoS,oBAAL,CAA0BpS,IAA1B,EAAgCL,KAAK,CAACqT,mBAAtC;;AAEA,QAAIrT,KAAK,CAACowD,eAAN,IAAyB,KAAKv/B,qBAAL,EAAzB,IAAyD,CAACne,QAA9D,EAAwE;AACtE1S,MAAAA,KAAK,CAACuT,IAAN,GAAa,IAAb;AACA,WAAKu4C,eAAL,CAAqB5B,iBAArB;AACA,WAAK4B,eAAL,CAAqB3wC,IAArB;AACA9a,MAAAA,IAAI,GAAG,KAAKswB,iCAAL,CAAuC,KAAKhiB,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAvC,EAA6E7L,IAA7E,CAAP;AACD,KALD,MAKO;AACL,UAAIL,KAAK,CAACowD,eAAV,EAA2B;AACzB,aAAKtE,eAAL,CAAqB3wC,IAArB;AACD;;AAED,WAAKrI,qBAAL,CAA2BzS,IAA3B;AACD;;AAED,SAAKL,KAAL,CAAWouB,sBAAX,GAAoCwrB,yBAApC;AACA,WAAOv5C,IAAP;AACD;;AAEDyS,EAAAA,qBAAqB,CAACzS,IAAD,EAAOytB,mBAAP,EAA4B;AAC/C,SAAKk/B,oBAAL,CAA0B3sD,IAAI,CAACoB,SAA/B,EAA0CqsB,mBAA1C;AACD;;AAED+sB,EAAAA,6BAA6B,CAAC1nC,IAAD,EAAOlC,QAAP,EAAiB/E,QAAjB,EAA2BlM,KAA3B,EAAkC;AAC7D,UAAMK,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,IAAAA,IAAI,CAACqwD,GAAL,GAAWv9C,IAAX;AACA9S,IAAAA,IAAI,CAACswD,KAAL,GAAa,KAAKrc,aAAL,CAAmB,IAAnB,CAAb;;AAEA,QAAIt0C,KAAK,CAACqT,mBAAV,EAA+B;AAC7B,WAAK7G,KAAL,CAAWyE,QAAX,EAAqB/O,aAAa,CAACsF,0BAAnC;AACD;;AAED,WAAO,KAAKmK,UAAL,CAAgBtR,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAEDs6C,EAAAA,oBAAoB,CAACxnC,IAAD,EAAO;AACzB,WAAOA,IAAI,CAAClS,IAAL,KAAc,YAAd,IAA8BkS,IAAI,CAAC3b,IAAL,KAAc,OAA5C,IAAuD,KAAKwI,KAAL,CAAWsM,UAAX,KAA0B6G,IAAI,CAAC9U,GAAtF,IAA6F,CAAC,KAAKyqB,kBAAL,EAA9F,IAA2H3V,IAAI,CAAC9U,GAAL,GAAW8U,IAAI,CAAC/U,KAAhB,KAA0B,CAArJ,IAA0J+U,IAAI,CAAC/U,KAAL,KAAe,KAAK4B,KAAL,CAAWyhD,gBAA3L;AACD;;AAEDhvC,EAAAA,oBAAoB,CAACpS,IAAD,EAAOqS,QAAP,EAAiB;AACnC,QAAIrS,IAAI,CAACsS,MAAL,CAAY1R,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,UAAIZ,IAAI,CAACoB,SAAL,CAAe9B,MAAf,KAA0B,CAA9B,EAAiC;AAC/B;AACE,cAAI,CAAC,KAAKR,SAAL,CAAe,kBAAf,CAAL,EAAyC;AACvC,iBAAK2/C,YAAL,CAAkB,kBAAlB;AACD;AACF;AACF;;AAED,UAAIz+C,IAAI,CAACoB,SAAL,CAAe9B,MAAf,KAA0B,CAA1B,IAA+BU,IAAI,CAACoB,SAAL,CAAe9B,MAAf,GAAwB,CAA3D,EAA8D;AAC5D,aAAK6M,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAAC4C,eAArC,EAAsD,KAAK3F,SAAL,CAAe,kBAAf,KAAsC,KAAKA,SAAL,CAAe,kBAAf,CAAtC,GAA2E,sBAA3E,GAAoG,cAA1J;AACD,OAFD,MAEO;AACL,aAAK,MAAM2tD,GAAX,IAAkBzsD,IAAI,CAACoB,SAAvB,EAAkC;AAChC,cAAIqrD,GAAG,CAAC7rD,IAAJ,KAAa,eAAjB,EAAkC;AAChC,iBAAKuL,KAAL,CAAWsgD,GAAG,CAAC1uD,KAAf,EAAsB8D,aAAa,CAAC8C,wBAApC;AACD;AACF;AACF;AACF;;AAED,WAAO,KAAK2M,UAAL,CAAgBtR,IAAhB,EAAsBqS,QAAQ,GAAG,wBAAH,GAA8B,gBAA5D,CAAP;AACD;;AAED2f,EAAAA,4BAA4B,CAACpE,KAAD,EAAQ2iC,kBAAR,EAA4BC,aAA5B,EAA2CC,gBAA3C,EAA6DC,YAA7D,EAA2E;AACrG,UAAMzD,IAAI,GAAG,EAAb;AACA,QAAIjlC,KAAK,GAAG,IAAZ;AACA,UAAM2oC,6BAA6B,GAAG,KAAKhxD,KAAL,CAAW+hD,0BAAjD;AACA,SAAK/hD,KAAL,CAAW+hD,0BAAX,GAAwC,KAAxC;;AAEA,WAAO,CAAC,KAAK5gC,GAAL,CAAS8M,KAAT,CAAR,EAAyB;AACvB,UAAI5F,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKvH,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;;AAEA,YAAI,KAAK2F,KAAL,CAAWqvB,KAAX,CAAJ,EAAuB;AACrB,cAAI4iC,aAAa,IAAI,CAAC,KAAK1xD,SAAL,CAAe,kBAAf,CAAlB,IAAwD,CAAC,KAAKA,SAAL,CAAe,kBAAf,CAA7D,EAAiG;AAC/F,iBAAKqN,KAAL,CAAW,KAAKxM,KAAL,CAAWmM,YAAtB,EAAoCjK,aAAa,CAAC2C,+BAAlD;AACD;;AAED,cAAIksD,YAAJ,EAAkB;AAChB,iBAAKphD,QAAL,CAAcohD,YAAd,EAA4B,eAA5B,EAA6C,KAAK/wD,KAAL,CAAWmM,YAAxD;AACD;;AAED,eAAK+K,IAAL;AACA;AACD;AACF;;AAEDo2C,MAAAA,IAAI,CAACptD,IAAL,CAAU,KAAK+wD,iBAAL,CAAuB,KAAvB,EAA8BL,kBAAkB,GAAG,IAAI3E,gBAAJ,EAAH,GAA4BlrD,SAA5E,EAAuF6vD,kBAAkB,GAAG;AACpHxyD,QAAAA,KAAK,EAAE;AAD6G,OAAH,GAE/G2C,SAFM,EAEK+vD,gBAFL,CAAV;AAGD;;AAED,SAAK9wD,KAAL,CAAW+hD,0BAAX,GAAwCiP,6BAAxC;AACA,WAAO1D,IAAP;AACD;;AAEDz8B,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAKjyB,KAAL,CAAW/G,OAAO,CAAC2B,KAAnB,KAA6B,CAAC,KAAKsvB,kBAAL,EAArC;AACD;;AAED6H,EAAAA,iCAAiC,CAACtwB,IAAD,EAAOuwB,IAAP,EAAa;AAC5C,QAAIsgC,WAAJ;;AAEA,SAAKpwC,MAAL,CAAYjpB,OAAO,CAAC2B,KAApB;AACA,SAAKo5B,oBAAL,CAA0BvyB,IAA1B,EAAgCuwB,IAAI,CAACnvB,SAArC,EAAgD,IAAhD,EAAsD,CAACyvD,WAAW,GAAGtgC,IAAI,CAAC/hB,KAApB,KAA8B,IAA9B,GAAqC,KAAK,CAA1C,GAA8CqiD,WAAW,CAACrlC,aAAhH;AACA,WAAOxrB,IAAP;AACD;;AAEDowD,EAAAA,eAAe,GAAG;AAChB,UAAMx/C,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,WAAO,KAAKkmB,eAAL,CAAqB,KAAK1hB,aAAL,EAArB,EAA2CO,QAA3C,EAAqD/E,QAArD,EAA+D,IAA/D,CAAP;AACD;;AAEDwE,EAAAA,aAAa,CAACC,mBAAD,EAAsB;AACjC,QAAI,KAAK3Q,KAAL,CAAWiB,IAAX,KAAoBpJ,OAAO,CAACqD,KAAhC,EAAuC,KAAKypD,UAAL;AACvC,UAAMxyB,UAAU,GAAG,KAAKnyB,KAAL,CAAWyhD,gBAAX,KAAgC,KAAKzhD,KAAL,CAAW5B,KAA9D;AACA,QAAIiC,IAAJ;;AAEA,YAAQ,KAAKL,KAAL,CAAWiB,IAAnB;AACE,WAAKpJ,OAAO,CAAC6E,MAAb;AACE,eAAO,KAAKy0D,UAAL,EAAP;;AAEF,WAAKt5D,OAAO,CAACiF,OAAb;AACEuD,QAAAA,IAAI,GAAG,KAAKmR,SAAL,EAAP;AACA,aAAK0F,IAAL;;AAEA,YAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACwB,GAAnB,CAAJ,EAA6B;AAC3B,iBAAO,KAAK+3D,uBAAL,CAA6B/wD,IAA7B,CAAP;AACD;;AAED,YAAI,CAAC,KAAKzB,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAAL,EAAiC;AAC/B,eAAKyT,KAAL,CAAW,KAAKxM,KAAL,CAAWmM,YAAtB,EAAoCjK,aAAa,CAACwI,iBAAlD;AACD;;AAED,eAAO,KAAKiH,UAAL,CAAgBtR,IAAhB,EAAsB,QAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAAC4E,KAAb;AACE4D,QAAAA,IAAI,GAAG,KAAKmR,SAAL,EAAP;AACA,aAAK0F,IAAL;AACA,eAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAACL,IAAb;AACE;AACE,gBAAM4+C,WAAW,GAAG,KAAKp2C,KAAL,CAAWo2C,WAA/B;AACA,gBAAMrlC,EAAE,GAAG,KAAK2Q,eAAL,EAAX;;AAEA,cAAI,CAAC00B,WAAD,IAAgBrlC,EAAE,CAACvZ,IAAH,KAAY,OAA5B,IAAuC,CAAC,KAAKsxB,kBAAL,EAA5C,EAAuE;AACrE,gBAAI,KAAKlqB,KAAL,CAAW/G,OAAO,CAACiE,SAAnB,CAAJ,EAAmC;AACjC,oBAAM2D,IAAI,GAAG,KAAKO,KAAL,CAAW4U,OAAX,CAAmBjV,MAAnB,GAA4B,CAAzC;;AAEA,kBAAI,KAAKK,KAAL,CAAW4U,OAAX,CAAmBnV,IAAnB,MAA6BwU,KAAK,CAACU,iBAAvC,EAA0D;AACxD,sBAAM,IAAI8L,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,mBAAKzgB,KAAL,CAAW4U,OAAX,CAAmBnV,IAAnB,IAA2BwU,KAAK,CAACS,kBAAjC;AACA,mBAAKwC,IAAL;AACA,qBAAO,KAAKm6C,aAAL,CAAmB,KAAK59C,eAAL,CAAqB1C,EAArB,CAAnB,EAA6ChQ,SAA7C,EAAwD,IAAxD,CAAP;AACD,aAVD,MAUO,IAAI,KAAKnC,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AACnC,kBAAI,KAAKm9C,iBAAL,OAA6B,EAAjC,EAAqC;AACnC,uBAAO,KAAK2c,4BAAL,CAAkCvgD,EAAlC,CAAP;AACD,eAFD,MAEO;AACL,uBAAOA,EAAP;AACD;AACF,aANM,MAMA,IAAI,KAAKnS,KAAL,CAAW/G,OAAO,CAAC6D,GAAnB,CAAJ,EAA6B;AAClC,qBAAO,KAAK61D,OAAL,CAAa,IAAb,CAAP;AACD;AACF;;AAED,cAAIp/B,UAAU,IAAI,KAAKvzB,KAAL,CAAW/G,OAAO,CAAC2B,KAAnB,CAAd,IAA2C,CAAC,KAAKsvB,kBAAL,EAAhD,EAA2E;AACzE,iBAAK5R,IAAL;AACA,mBAAO,KAAK0b,oBAAL,CAA0B,KAAKnf,eAAL,CAAqB1C,EAArB,CAA1B,EAAoD,CAACA,EAAD,CAApD,EAA0D,KAA1D,CAAP;AACD;;AAED,iBAAOA,EAAP;AACD;;AAEH,WAAKlZ,OAAO,CAAC6D,GAAb;AACE;AACE,iBAAO,KAAK61D,OAAL,CAAa,KAAb,CAAP;AACD;;AAEH,WAAK15D,OAAO,CAACI,MAAb;AACE;AACE,gBAAM3B,KAAK,GAAG,KAAK0J,KAAL,CAAW1J,KAAzB;AACA+J,UAAAA,IAAI,GAAG,KAAKiO,YAAL,CAAkBhY,KAAK,CAACA,KAAxB,EAA+B,eAA/B,CAAP;AACA+J,UAAAA,IAAI,CAACsN,OAAL,GAAerX,KAAK,CAACqX,OAArB;AACAtN,UAAAA,IAAI,CAACuN,KAAL,GAAatX,KAAK,CAACsX,KAAnB;AACA,iBAAOvN,IAAP;AACD;;AAEH,WAAKxI,OAAO,CAACC,GAAb;AACE,eAAO,KAAKwW,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,gBAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACE,MAAb;AACE,eAAO,KAAKuW,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,eAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACG,OAAb;AACE,eAAO,KAAKsW,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,gBAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACK,MAAb;AACE,eAAO,KAAKoW,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,eAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACkF,KAAb;AACEsD,QAAAA,IAAI,GAAG,KAAKmR,SAAL,EAAP;AACA,aAAK0F,IAAL;AACA,eAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,aAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAACmF,KAAb;AACA,WAAKnF,OAAO,CAACoF,MAAb;AACE,eAAO,KAAK03B,mBAAL,EAAP;;AAEF,WAAK98B,OAAO,CAACkB,MAAb;AACE,eAAO,KAAKm5B,kCAAL,CAAwCC,UAAxC,CAAP;;AAEF,WAAKt6B,OAAO,CAACU,WAAb;AACA,WAAKV,OAAO,CAACS,YAAb;AACE;AACE,iBAAO,KAAK01B,cAAL,CAAoB,KAAKhuB,KAAL,CAAWiB,IAAX,KAAoBpJ,OAAO,CAACU,WAA5B,GAA0CV,OAAO,CAACY,WAAlD,GAAgEZ,OAAO,CAACW,QAA5F,EAAsG,KAAtG,EAA6G,IAA7G,EAAmHmY,mBAAnH,CAAP;AACD;;AAEH,WAAK9Y,OAAO,CAACQ,QAAb;AACE;AACE,iBAAO,KAAK21B,cAAL,CAAoBn2B,OAAO,CAACW,QAA5B,EAAsC,IAAtC,EAA4C,KAA5C,EAAmDmY,mBAAnD,CAAP;AACD;;AAEH,WAAK9Y,OAAO,CAACc,SAAb;AACA,WAAKd,OAAO,CAACe,UAAb;AACE;AACE,iBAAO,KAAKu0D,eAAL,CAAqB,KAAKntD,KAAL,CAAWiB,IAAX,KAAoBpJ,OAAO,CAACc,SAA5B,GAAwCd,OAAO,CAACiB,SAAhD,GAA4DjB,OAAO,CAACgB,MAAzF,EAAiG,KAAjG,EAAwG,IAAxG,EAA8G8X,mBAA9G,CAAP;AACD;;AAEH,WAAK9Y,OAAO,CAACa,MAAb;AACE;AACE,iBAAO,KAAKy0D,eAAL,CAAqBt1D,OAAO,CAACgB,MAA7B,EAAqC,KAArC,EAA4C,KAA5C,EAAmD8X,mBAAnD,CAAP;AACD;;AAEH,WAAK9Y,OAAO,CAACiE,SAAb;AACE,eAAO,KAAK01D,2BAAL,EAAP;;AAEF,WAAK35D,OAAO,CAACgC,EAAb;AACE,aAAK43D,eAAL;;AAEF,WAAK55D,OAAO,CAAC8E,MAAb;AACE0D,QAAAA,IAAI,GAAG,KAAKmR,SAAL,EAAP;AACA,aAAKmtC,cAAL,CAAoBt+C,IAApB;AACA,eAAO,KAAK64C,UAAL,CAAgB74C,IAAhB,EAAsB,KAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAAC2E,IAAb;AACE,eAAO,KAAKk1D,mBAAL,EAAP;;AAEF,WAAK75D,OAAO,CAAC8B,SAAb;AACE,eAAO,KAAK26C,aAAL,CAAmB,KAAnB,CAAP;;AAEF,WAAKz8C,OAAO,CAACuB,WAAb;AACE;AACEiH,UAAAA,IAAI,GAAG,KAAKmR,SAAL,EAAP;AACA,eAAK0F,IAAL;AACA7W,UAAAA,IAAI,CAAC2mC,MAAL,GAAc,IAAd;AACA,gBAAMr0B,MAAM,GAAGtS,IAAI,CAACsS,MAAL,GAAc,KAAK89C,eAAL,EAA7B;;AAEA,cAAI99C,MAAM,CAAC1R,IAAP,KAAgB,kBAApB,EAAwC;AACtC,mBAAO,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAFD,MAEO;AACL,kBAAM,KAAKmM,KAAL,CAAWmG,MAAM,CAACvU,KAAlB,EAAyB8D,aAAa,CAACqI,eAAvC,CAAN;AACD;AACF;;AAEH,WAAK1S,OAAO,CAACM,WAAb;AACE;AACE,gBAAMiG,KAAK,GAAG,KAAK4B,KAAL,CAAW5B,KAAzB;AACA,gBAAM9H,KAAK,GAAG,KAAK0J,KAAL,CAAW1J,KAAzB;AACA+J,UAAAA,IAAI,GAAG,KAAKmwD,gBAAL,EAAP;;AAEA,cAAI,KAAK5xD,KAAL,CAAW/G,OAAO,CAACqF,GAAnB,CAAJ,EAA6B;AAC3B,iBAAK4hD,YAAL,CAAkB,WAAlB;AACA,iBAAK4J,UAAL,CAAgBO,cAAhB,CAA+B3yD,KAA/B,EAAsC+J,IAAI,CAACjC,KAA3C;AACD,WAHD,MAGO,IAAI,KAAKe,SAAL,CAAe,WAAf,CAAJ,EAAiC;AACtC,iBAAKqN,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACiG,mBAA3C,EAAgE7R,KAAhE;AACD,WAFM,MAEA;AACL,kBAAM,KAAK4sB,UAAL,CAAgB9kB,KAAhB,CAAN;AACD;;AAED,iBAAOiC,IAAP;AACD;;AAEH,WAAKxI,OAAO,CAACiC,IAAb;AACE;AACE,cAAI,KAAKkG,KAAL,CAAW0hD,UAAf,EAA2B;AACzBrhD,YAAAA,IAAI,GAAG,KAAKmR,SAAL,EAAP;;AAEA,gBAAI,KAAKlS,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OAA7D,EAAsE;AACpE,mBAAKkN,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAACgG,iCAArC;AACD;;AAED,iBAAKgP,IAAL;;AAEA,gBAAI,CAAC,KAAKy6C,mDAAL,EAAL,EAAiE;AAC/D,mBAAKnlD,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAAC+F,sBAArC;AACD;;AAED,iBAAK2pD,sBAAL;AACA,mBAAO,KAAKjgD,UAAL,CAAgBtR,IAAhB,EAAsB,+BAAtB,CAAP;AACD;AACF;;AAEH,WAAKxI,OAAO,CAACgD,UAAb;AACE;AACE,cAAI,KAAKmF,KAAL,CAAW1J,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,kBAAMu7D,WAAW,GAAG,KAAKpzD,KAAL,CAAWqzD,WAAX,CAAuB,KAAK17B,cAAL,EAAvB,CAApB;;AAEA,gBAAIvgB,iBAAiB,CAACg8C,WAAD,CAAjB,IAAkCA,WAAW,KAAK,EAAtD,EAA0D;AACtD,mBAAK/G,eAAL,CAAqB,CAAC,KAAD,EAAQ,MAAR,EAAgB,YAAhB,CAArB;AACD;AACJ;AACF;;AAEH;AACE,cAAM,KAAK5nC,UAAL,EAAN;AAvMJ;AAyMD;;AAEDouC,EAAAA,4BAA4B,CAACvgD,EAAD,EAAK;AAC/B,UAAM1Q,IAAI,GAAG,KAAKoT,eAAL,CAAqB1C,EAArB,CAAb;AACA,SAAKknC,SAAL,CAAe/8B,KAAf,CAAqB2vB,aAAa,CAAC,IAAD,EAAO,KAAKoN,SAAL,CAAevN,QAAtB,CAAlC;AACA,UAAMj+B,MAAM,GAAG,CAAC,KAAKiV,eAAL,EAAD,CAAf;AACA,SAAKu2B,SAAL,CAAe98B,IAAf;;AAEA,QAAI,KAAK/F,qBAAL,EAAJ,EAAkC;AAChC,WAAK5I,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACmE,yBAAzC;AACD;;AAED,SAAKya,MAAL,CAAYjpB,OAAO,CAAC2B,KAApB;AACA,SAAKo5B,oBAAL,CAA0BvyB,IAA1B,EAAgCoM,MAAhC,EAAwC,IAAxC;AACA,WAAOpM,IAAP;AACD;;AAEDkxD,EAAAA,OAAO,CAACriD,OAAD,EAAU;AACf,SAAK4vC,YAAL,CAAkB,eAAlB;;AAEA,QAAI5vC,OAAJ,EAAa;AACX,WAAK4vC,YAAL,CAAkB,oBAAlB;AACD;;AAED,UAAMz+C,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAACsxB,KAAL,GAAaziB,OAAb;AACA,SAAKgI,IAAL;AACA,UAAMs0C,SAAS,GAAG,KAAKxrD,KAAL,CAAWgiD,MAA7B;AACA,SAAKhiD,KAAL,CAAWgiD,MAAX,GAAoB,EAApB;;AAEA,QAAI9yC,OAAJ,EAAa;AACX,WAAK+oC,SAAL,CAAe/8B,KAAf,CAAqBivB,WAArB;AACA9pC,MAAAA,IAAI,CAACa,IAAL,GAAY,KAAKu9C,UAAL,EAAZ;AACA,WAAKxG,SAAL,CAAe98B,IAAf;AACD,KAJD,MAIO;AACL9a,MAAAA,IAAI,CAACa,IAAL,GAAY,KAAKu9C,UAAL,EAAZ;AACD;;AAED,SAAKz+C,KAAL,CAAWgiD,MAAX,GAAoBwJ,SAApB;AACA,WAAO,KAAK75C,UAAL,CAAgBtR,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED8wD,EAAAA,UAAU,GAAG;AACX,UAAM9wD,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0F,IAAL;;AAEA,QAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,KAA8B,CAAC,KAAKqiB,KAAL,CAAW/J,gBAA1C,IAA8D,CAAC,KAAK5Z,OAAL,CAAaupD,uBAAhF,EAAyG;AACvG,WAAKx0C,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAACiH,eAArC;AACD,KAFD,MAEO,IAAI,CAAC,KAAKiS,KAAL,CAAWX,UAAZ,IAA0B,CAAC,KAAKhjB,OAAL,CAAaupD,uBAA5C,EAAqE;AAC1E,WAAKx0C,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAACkI,eAArC;AACD;;AAED,QAAI,CAAC,KAAKxL,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAAD,IAA+B,CAAC,KAAK6F,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,CAAhC,IAAgE,CAAC,KAAKuG,KAAL,CAAW/G,OAAO,CAACwB,GAAnB,CAArE,EAA8F;AAC5F,WAAKmT,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAAC4I,gBAArC;AACD;;AAED,WAAO,KAAK6G,UAAL,CAAgBtR,IAAhB,EAAsB,OAAtB,CAAP;AACD;;AAEDs0B,EAAAA,mBAAmB,GAAG;AACpB,UAAMt0B,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAKsI,KAAL,CAAW/G,OAAO,CAACmF,KAAnB,CAAb;AACA,SAAKka,IAAL;AACA,WAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDuQ,EAAAA,qBAAqB,CAACoe,oBAAD,EAAuB;AAC1C,UAAM+iC,SAAS,GAAG,KAAKnzD,KAAL,CAAW/G,OAAO,CAACM,WAAnB,CAAlB;;AAEA,QAAI45D,SAAJ,EAAe;AACb,UAAI,CAAC/iC,oBAAL,EAA2B;AACzB,aAAKxiB,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAX,GAAmB,CAA9B,EAAiC8D,aAAa,CAACgI,sBAA/C;AACD;;AAED,aAAO,KAAKsmD,gBAAL,EAAP;AACD,KAND,MAMO;AACL,aAAO,KAAK9uC,eAAL,CAAqB,IAArB,CAAP;AACD;AACF;;AAED8uC,EAAAA,gBAAgB,GAAG;AACjB,UAAMnwD,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,UAAMT,EAAE,GAAG,KAAKpC,WAAL,CAAiB,KAAK3O,KAAL,CAAW5B,KAAX,GAAmB,CAApC,EAAuC,IAAIL,QAAJ,CAAa,KAAKiC,KAAL,CAAWynC,OAAxB,EAAiC,KAAKznC,KAAL,CAAW5B,KAAX,GAAmB,CAAnB,GAAuB,KAAK4B,KAAL,CAAWrB,SAAnE,CAAvC,CAAX;AACA,UAAMnH,IAAI,GAAG,KAAKwI,KAAL,CAAW1J,KAAxB;AACA,SAAK4gB,IAAL;AACA7W,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK4X,gBAAL,CAAsB5X,EAAtB,EAA0BvZ,IAA1B,CAAV;AACA,WAAO,KAAKma,UAAL,CAAgBtR,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDmxD,EAAAA,2BAA2B,GAAG;AAC5B,UAAMnxD,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0F,IAAL;;AAEA,QAAI,KAAK+gC,SAAL,CAAevN,QAAf,IAA2B,KAAK9rC,KAAL,CAAW/G,OAAO,CAACwB,GAAnB,CAA/B,EAAwD;AACtD,YAAM24D,IAAI,GAAG,KAAKrpC,gBAAL,CAAsB,KAAKlV,eAAL,CAAqBpT,IAArB,CAAtB,EAAkD,UAAlD,CAAb;AACA,WAAK6W,IAAL;AACA,aAAO,KAAK+6C,iBAAL,CAAuB5xD,IAAvB,EAA6B2xD,IAA7B,EAAmC,MAAnC,CAAP;AACD;;AAED,WAAO,KAAKX,aAAL,CAAmBhxD,IAAnB,CAAP;AACD;;AAED4xD,EAAAA,iBAAiB,CAAC5xD,IAAD,EAAO2xD,IAAP,EAAaE,YAAb,EAA2B;AAC1C7xD,IAAAA,IAAI,CAAC2xD,IAAL,GAAYA,IAAZ;;AAEA,QAAIA,IAAI,CAACx6D,IAAL,KAAc,UAAd,IAA4B06D,YAAY,KAAK,MAAjD,EAAyD;AACvD,UAAI,KAAKrvC,YAAL,CAAkBqvC,YAAlB,CAAJ,EAAqC;AACnC,aAAKpT,YAAL,CAAkB,cAAlB;AACD,OAFD,MAEO,IAAI,CAAC,KAAK3/C,SAAL,CAAe,cAAf,CAAL,EAAqC;AAC1C,aAAK+jB,UAAL;AACD;AACF;;AAED,UAAMkzB,WAAW,GAAG,KAAKp2C,KAAL,CAAWo2C,WAA/B;AACA/1C,IAAAA,IAAI,CAACwnB,QAAL,GAAgB,KAAKnG,eAAL,CAAqB,IAArB,CAAhB;;AAEA,QAAIrhB,IAAI,CAACwnB,QAAL,CAAcrwB,IAAd,KAAuB06D,YAAvB,IAAuC9b,WAA3C,EAAwD;AACtD,WAAK5pC,KAAL,CAAWnM,IAAI,CAACwnB,QAAL,CAAczpB,KAAzB,EAAgC8D,aAAa,CAACyI,uBAA9C,EAAuEqnD,IAAI,CAACx6D,IAA5E,EAAkF06D,YAAlF;AACD;;AAED,WAAO,KAAKvgD,UAAL,CAAgBtR,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED+wD,EAAAA,uBAAuB,CAAC/wD,IAAD,EAAO;AAC5B,UAAM0Q,EAAE,GAAG,KAAK4X,gBAAL,CAAsB,KAAKlV,eAAL,CAAqBpT,IAArB,CAAtB,EAAkD,QAAlD,CAAX;AACA,SAAK6W,IAAL;;AAEA,QAAI,KAAK2L,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B,UAAI,CAAC,KAAKnM,QAAV,EAAoB;AAClB,aAAKlK,KAAL,CAAWuE,EAAE,CAAC3S,KAAd,EAAqBmN,6BAA6B,CAACC,uBAAnD;AACD;;AAED,WAAKvM,iBAAL,GAAyB,IAAzB;AACD;;AAED,WAAO,KAAKgzD,iBAAL,CAAuB5xD,IAAvB,EAA6B0Q,EAA7B,EAAiC,MAAjC,CAAP;AACD;;AAEDzC,EAAAA,YAAY,CAAChY,KAAD,EAAQ2K,IAAR,EAAcgQ,QAAd,EAAwB/E,QAAxB,EAAkC;AAC5C+E,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKjR,KAAL,CAAW5B,KAAlC;AACA8N,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKlM,KAAL,CAAWkM,QAAlC;AACA,UAAM7L,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA,SAAKyD,QAAL,CAActP,IAAd,EAAoB,UAApB,EAAgC/J,KAAhC;AACA,SAAKqZ,QAAL,CAActP,IAAd,EAAoB,KAApB,EAA2B,KAAK5B,KAAL,CAAWiD,KAAX,CAAiBuP,QAAjB,EAA2B,KAAKjR,KAAL,CAAW3B,GAAtC,CAA3B;AACAgC,IAAAA,IAAI,CAAC/J,KAAL,GAAaA,KAAb;AACA,SAAK4gB,IAAL;AACA,WAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsBY,IAAtB,CAAP;AACD;;AAEDixB,EAAAA,kCAAkC,CAACC,UAAD,EAAa;AAC7C,UAAMlhB,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,QAAIqU,GAAJ;AACA,SAAKrJ,IAAL;AACA,SAAK40C,eAAL,CAAqB5wC,KAArB,CAA2BkvC,iBAAiB,EAA5C;AACA,UAAMxQ,yBAAyB,GAAG,KAAK55C,KAAL,CAAWouB,sBAA7C;AACA,UAAM4iC,6BAA6B,GAAG,KAAKhxD,KAAL,CAAW+hD,0BAAjD;AACA,SAAK/hD,KAAL,CAAWouB,sBAAX,GAAoC,IAApC;AACA,SAAKpuB,KAAL,CAAW+hD,0BAAX,GAAwC,KAAxC;AACA,UAAMoQ,aAAa,GAAG,KAAKnyD,KAAL,CAAW5B,KAAjC;AACA,UAAMg0D,aAAa,GAAG,KAAKpyD,KAAL,CAAWkM,QAAjC;AACA,UAAMyhB,QAAQ,GAAG,EAAjB;AACA,UAAMhd,mBAAmB,GAAG,IAAIs7C,gBAAJ,EAA5B;AACA,UAAM5hC,gBAAgB,GAAG;AACvBjsB,MAAAA,KAAK,EAAE;AADgB,KAAzB;AAGA,QAAIiqB,KAAK,GAAG,IAAZ;AACA,QAAIgqC,WAAJ;AACA,QAAIC,kBAAJ;;AAEA,WAAO,CAAC,KAAK1zD,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,CAAR,EAAoC;AAClC,UAAIqvB,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKvH,MAAL,CAAYjpB,OAAO,CAACoB,KAApB,EAA2BoxB,gBAAgB,CAACjsB,KAAjB,IAA0B,IAArD;;AAEA,YAAI,KAAKQ,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,CAAJ,EAAgC;AAC9Bs5D,UAAAA,kBAAkB,GAAG,KAAKtyD,KAAL,CAAW5B,KAAhC;AACA;AACD;AACF;;AAED,UAAI,KAAKQ,KAAL,CAAW/G,OAAO,CAAC6B,QAAnB,CAAJ,EAAkC;AAChC,cAAM64D,kBAAkB,GAAG,KAAKvyD,KAAL,CAAW5B,KAAtC;AACA,cAAMo0D,kBAAkB,GAAG,KAAKxyD,KAAL,CAAWkM,QAAtC;AACAmmD,QAAAA,WAAW,GAAG,KAAKryD,KAAL,CAAW5B,KAAzB;AACAuvB,QAAAA,QAAQ,CAACztB,IAAT,CAAc,KAAK8rB,cAAL,CAAoB,KAAKkhC,gBAAL,EAApB,EAA6CqF,kBAA7C,EAAiEC,kBAAjE,CAAd;AACA,aAAKtV,mBAAL,CAAyB,EAAzB;AACA;AACD,OAPD,MAOO;AACLvvB,QAAAA,QAAQ,CAACztB,IAAT,CAAc,KAAKmrB,uBAAL,CAA6B1a,mBAA7B,EAAkD,KAAKqb,cAAvD,EAAuE3B,gBAAvE,CAAd;AACD;AACF;;AAED,UAAMooC,WAAW,GAAG,KAAKzyD,KAAL,CAAWsM,UAA/B;AACA,UAAMomD,WAAW,GAAG,KAAK1yD,KAAL,CAAWuM,aAA/B;AACA,SAAKuU,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACA,SAAKgH,KAAL,CAAWouB,sBAAX,GAAoCwrB,yBAApC;AACA,SAAK55C,KAAL,CAAW+hD,0BAAX,GAAwCiP,6BAAxC;AACA,QAAI2B,SAAS,GAAG,KAAKhkD,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAhB;;AAEA,QAAIimB,UAAU,IAAI,KAAKL,gBAAL,EAAd,KAA0C6gC,SAAS,GAAG,KAAK9gC,UAAL,CAAgB8gC,SAAhB,CAAtD,CAAJ,EAAuF;AACrF,WAAK7G,eAAL,CAAqB5B,iBAArB;AACA,WAAK4B,eAAL,CAAqB3wC,IAArB;AACA,WAAKyX,oBAAL,CAA0B+/B,SAA1B,EAAqChlC,QAArC,EAA+C,KAA/C;AACA,aAAOglC,SAAP;AACD;;AAED,SAAK7G,eAAL,CAAqB3wC,IAArB;;AAEA,QAAI,CAACwS,QAAQ,CAAChuB,MAAd,EAAsB;AACpB,WAAKujB,UAAL,CAAgB,KAAKljB,KAAL,CAAWmM,YAA3B;AACD;;AAED,QAAImmD,kBAAJ,EAAwB,KAAKpvC,UAAL,CAAgBovC,kBAAhB;AACxB,QAAID,WAAJ,EAAiB,KAAKnvC,UAAL,CAAgBmvC,WAAhB;AACjB,SAAKlH,qBAAL,CAA2Bx6C,mBAA3B,EAAgD,IAAhD;AACA,QAAI0Z,gBAAgB,CAACjsB,KAArB,EAA4B,KAAK8kB,UAAL,CAAgBmH,gBAAgB,CAACjsB,KAAjC;AAC5B,SAAK4uD,oBAAL,CAA0Br/B,QAA1B,EAAoC,IAApC;;AAEA,QAAIA,QAAQ,CAAChuB,MAAT,GAAkB,CAAtB,EAAyB;AACvB4gB,MAAAA,GAAG,GAAG,KAAK5R,WAAL,CAAiBwjD,aAAjB,EAAgCC,aAAhC,CAAN;AACA7xC,MAAAA,GAAG,CAACkuC,WAAJ,GAAkB9gC,QAAlB;AACA,WAAK3e,YAAL,CAAkBuR,GAAlB,EAAuB,oBAAvB,EAA6CkyC,WAA7C,EAA0DC,WAA1D;AACD,KAJD,MAIO;AACLnyC,MAAAA,GAAG,GAAGoN,QAAQ,CAAC,CAAD,CAAd;AACD;;AAED,QAAI,CAAC,KAAKl2B,OAAL,CAAa4pD,8BAAlB,EAAkD;AAChD,WAAK1xC,QAAL,CAAc4Q,GAAd,EAAmB,eAAnB,EAAoC,IAApC;AACA,WAAK5Q,QAAL,CAAc4Q,GAAd,EAAmB,YAAnB,EAAiCtP,QAAjC;AACA,aAAOsP,GAAP;AACD;;AAED,UAAMhM,eAAe,GAAG,KAAK5F,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAxB;AACAqI,IAAAA,eAAe,CAAC3F,UAAhB,GAA6B2R,GAA7B;AACA,SAAK5O,UAAL,CAAgB4C,eAAhB,EAAiC,yBAAjC;AACA,WAAOA,eAAP;AACD;;AAEDud,EAAAA,gBAAgB,GAAG;AACjB,WAAO,CAAC,KAAKhJ,kBAAL,EAAR;AACD;;AAED+I,EAAAA,UAAU,CAACxxB,IAAD,EAAO;AACf,QAAI,KAAK8gB,GAAL,CAAStpB,OAAO,CAAC2B,KAAjB,CAAJ,EAA6B;AAC3B,aAAO6G,IAAP;AACD;AACF;;AAED2rB,EAAAA,cAAc,CAAC3rB,IAAD,EAAO4Q,QAAP,EAAiB/E,QAAjB,EAA2B;AACvC,WAAO7L,IAAP;AACD;;AAEDqxD,EAAAA,mBAAmB,GAAG;AACpB,UAAMrxD,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0F,IAAL;;AAEA,QAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACwB,GAAnB,CAAJ,EAA6B;AAC3B,YAAM24D,IAAI,GAAG,KAAKrpC,gBAAL,CAAsB,KAAKlV,eAAL,CAAqBpT,IAArB,CAAtB,EAAkD,KAAlD,CAAb;AACA,WAAK6W,IAAL;AACA,YAAM07C,QAAQ,GAAG,KAAKX,iBAAL,CAAuB5xD,IAAvB,EAA6B2xD,IAA7B,EAAmC,QAAnC,CAAjB;;AAEA,UAAI,CAAC,KAAK52C,KAAL,CAAWP,kBAAZ,IAAkC,CAAC,KAAKO,KAAL,CAAWT,OAAlD,EAA2D;AACzD,aAAKnO,KAAL,CAAWomD,QAAQ,CAACx0D,KAApB,EAA2B8D,aAAa,CAAC8H,mBAAzC;AACD;;AAED,aAAO4oD,QAAP;AACD;;AAED,WAAO,KAAKC,QAAL,CAAcxyD,IAAd,CAAP;AACD;;AAEDwyD,EAAAA,QAAQ,CAACxyD,IAAD,EAAO;AACbA,IAAAA,IAAI,CAACsS,MAAL,GAAc,KAAK89C,eAAL,EAAd;;AAEA,QAAIpwD,IAAI,CAACsS,MAAL,CAAY1R,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,WAAKuL,KAAL,CAAWnM,IAAI,CAACsS,MAAL,CAAYvU,KAAvB,EAA8B8D,aAAa,CAAC6C,0BAA5C;AACD,KAFD,MAEO,IAAI,KAAK4O,eAAL,CAAqBtT,IAAI,CAACsS,MAA1B,CAAJ,EAAuC;AAC5C,WAAKnG,KAAL,CAAW,KAAKxM,KAAL,CAAWsM,UAAtB,EAAkCpK,aAAa,CAACqF,qBAAhD;AACD,KAFM,MAEA,IAAI,KAAK4Z,GAAL,CAAStpB,OAAO,CAAC0B,WAAjB,CAAJ,EAAmC;AACxC,WAAKiT,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACqF,qBAA3C;AACD;;AAED,SAAKmrB,iBAAL,CAAuBryB,IAAvB;AACA,WAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDqyB,EAAAA,iBAAiB,CAACryB,IAAD,EAAO;AACtB,QAAI,KAAK8gB,GAAL,CAAStpB,OAAO,CAACkB,MAAjB,CAAJ,EAA8B;AAC5B,YAAM8W,IAAI,GAAG,KAAKijD,aAAL,CAAmBj7D,OAAO,CAACmB,MAA3B,CAAb;AACA,WAAK60B,gBAAL,CAAsBhe,IAAtB;AACAxP,MAAAA,IAAI,CAACoB,SAAL,GAAiBoO,IAAjB;AACD,KAJD,MAIO;AACLxP,MAAAA,IAAI,CAACoB,SAAL,GAAiB,EAAjB;AACD;AACF;;AAEDsxD,EAAAA,oBAAoB,CAACC,QAAD,EAAW;AAC7B,UAAMlF,IAAI,GAAG,KAAKt8C,SAAL,EAAb;;AAEA,QAAI,KAAKxR,KAAL,CAAW1J,KAAX,KAAqB,IAAzB,EAA+B;AAC7B,UAAI,CAAC08D,QAAL,EAAe;AACb,aAAKxmD,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAX,GAAmB,CAA9B,EAAiC8D,aAAa,CAACoD,6BAA/C;AACD;AACF;;AAEDwoD,IAAAA,IAAI,CAACx3D,KAAL,GAAa;AACXyY,MAAAA,GAAG,EAAE,KAAKtQ,KAAL,CAAWiD,KAAX,CAAiB,KAAK1B,KAAL,CAAW5B,KAA5B,EAAmC,KAAK4B,KAAL,CAAW3B,GAA9C,EAAmDwO,OAAnD,CAA2D,QAA3D,EAAqE,IAArE,CADM;AAEXomD,MAAAA,MAAM,EAAE,KAAKjzD,KAAL,CAAW1J;AAFR,KAAb;AAIA,SAAK4gB,IAAL;AACA42C,IAAAA,IAAI,CAACoF,IAAL,GAAY,KAAKt0D,KAAL,CAAW/G,OAAO,CAAC8B,SAAnB,CAAZ;AACA,WAAO,KAAKgY,UAAL,CAAgBm8C,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDxZ,EAAAA,aAAa,CAAC0e,QAAD,EAAW;AACtB,UAAM3yD,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0F,IAAL;AACA7W,IAAAA,IAAI,CAACouD,WAAL,GAAmB,EAAnB;AACA,QAAI0E,MAAM,GAAG,KAAKJ,oBAAL,CAA0BC,QAA1B,CAAb;AACA3yD,IAAAA,IAAI,CAAC+yD,MAAL,GAAc,CAACD,MAAD,CAAd;;AAEA,WAAO,CAACA,MAAM,CAACD,IAAf,EAAqB;AACnB,WAAKpyC,MAAL,CAAYjpB,OAAO,CAAC+B,YAApB;AACAyG,MAAAA,IAAI,CAACouD,WAAL,CAAiBvuD,IAAjB,CAAsB,KAAKq0C,yBAAL,EAAtB;AACA,WAAKzzB,MAAL,CAAYjpB,OAAO,CAACgB,MAApB;AACAwH,MAAAA,IAAI,CAAC+yD,MAAL,CAAYlzD,IAAZ,CAAiBizD,MAAM,GAAG,KAAKJ,oBAAL,CAA0BC,QAA1B,CAA1B;AACD;;AAED,SAAK97C,IAAL;AACA,WAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDk0C,EAAAA,yBAAyB,GAAG;AAC1B,WAAO,KAAKnzB,eAAL,EAAP;AACD;;AAED+rC,EAAAA,eAAe,CAACl/B,KAAD,EAAQhc,SAAR,EAAmBg8C,QAAnB,EAA6Bt9C,mBAA7B,EAAkD;AAC/D,QAAIs9C,QAAJ,EAAc;AACZ,WAAKnP,YAAL,CAAkB,gBAAlB;AACD;;AAED,UAAMkS,6BAA6B,GAAG,KAAKhxD,KAAL,CAAW+hD,0BAAjD;AACA,SAAK/hD,KAAL,CAAW+hD,0BAAX,GAAwC,KAAxC;AACA,UAAMsR,QAAQ,GAAGl9D,MAAM,CAACm9D,MAAP,CAAc,IAAd,CAAjB;AACA,QAAIjrC,KAAK,GAAG,IAAZ;AACA,UAAMhoB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAACmB,UAAL,GAAkB,EAAlB;AACA,SAAK0V,IAAL;;AAEA,WAAO,CAAC,KAAKtY,KAAL,CAAWqvB,KAAX,CAAR,EAA2B;AACzB,UAAI5F,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKvH,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;;AAEA,YAAI,KAAK2F,KAAL,CAAWqvB,KAAX,CAAJ,EAAuB;AACrB,eAAKte,QAAL,CAActP,IAAd,EAAoB,eAApB,EAAqC,KAAKL,KAAL,CAAWmM,YAAhD;AACA;AACD;AACF;;AAED,YAAM6F,IAAI,GAAG,KAAKuhD,uBAAL,CAA6BthD,SAA7B,EAAwCtB,mBAAxC,CAAb;;AAEA,UAAI,CAACsB,SAAL,EAAgB;AACd,aAAK+7C,UAAL,CAAgBh8C,IAAhB,EAAsBi8C,QAAtB,EAAgCoF,QAAhC,EAA0C1iD,mBAA1C;AACD;;AAED,UAAIs9C,QAAQ,IAAI,CAAC,KAAK7+C,gBAAL,CAAsB4C,IAAtB,CAAb,IAA4CA,IAAI,CAAC/Q,IAAL,KAAc,eAA9D,EAA+E;AAC7E,aAAKuL,KAAL,CAAWwF,IAAI,CAAC5T,KAAhB,EAAuB8D,aAAa,CAAC+D,qBAArC;AACD;;AAED,UAAI+L,IAAI,CAACG,SAAT,EAAoB;AAClB,aAAKxC,QAAL,CAAcqC,IAAd,EAAoB,WAApB,EAAiC,IAAjC;AACD;;AAED3R,MAAAA,IAAI,CAACmB,UAAL,CAAgBtB,IAAhB,CAAqB8R,IAArB;AACD;;AAED,SAAKhS,KAAL,CAAW6U,WAAX,GAAyB,KAAzB;AACA,SAAKqC,IAAL;AACA,SAAKlX,KAAL,CAAW+hD,0BAAX,GAAwCiP,6BAAxC;AACA,QAAI/vD,IAAI,GAAG,kBAAX;;AAEA,QAAIgR,SAAJ,EAAe;AACbhR,MAAAA,IAAI,GAAG,eAAP;AACD,KAFD,MAEO,IAAIgtD,QAAJ,EAAc;AACnBhtD,MAAAA,IAAI,GAAG,kBAAP;AACD;;AAED,WAAO,KAAK0Q,UAAL,CAAgBtR,IAAhB,EAAsBY,IAAtB,CAAP;AACD;;AAEDuyD,EAAAA,wBAAwB,CAACxhD,IAAD,EAAO;AAC7B,WAAO,CAACA,IAAI,CAACN,QAAN,IAAkBM,IAAI,CAACQ,GAAL,CAASvR,IAAT,KAAkB,YAApC,KAAqD,KAAKstC,qBAAL,MAAgC,KAAK3vC,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,CAAhC,IAAgE,KAAKuG,KAAL,CAAW/G,OAAO,CAACoD,IAAnB,CAArH,CAAP;AACD;;AAEDs4D,EAAAA,uBAAuB,CAACthD,SAAD,EAAYtB,mBAAZ,EAAiC;AACtD,QAAIopC,UAAU,GAAG,EAAjB;;AAEA,QAAI,KAAKn7C,KAAL,CAAW/G,OAAO,CAACgC,EAAnB,CAAJ,EAA4B;AAC1B,UAAI,KAAKsF,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,aAAKqN,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAAC2I,4BAA3C;AACD;;AAED,aAAO,KAAKjM,KAAL,CAAW/G,OAAO,CAACgC,EAAnB,CAAP,EAA+B;AAC7BkgD,QAAAA,UAAU,CAAC75C,IAAX,CAAgB,KAAKqtD,cAAL,EAAhB;AACD;AACF;;AAED,UAAMv7C,IAAI,GAAG,KAAKR,SAAL,EAAb;AACA,QAAInB,WAAW,GAAG,KAAlB;AACA,QAAInB,OAAO,GAAG,KAAd;AACA,QAAIgD,UAAU,GAAG,KAAjB;AACA,QAAIjB,QAAJ;AACA,QAAI/E,QAAJ;;AAEA,QAAI,KAAKtN,KAAL,CAAW/G,OAAO,CAAC6B,QAAnB,CAAJ,EAAkC;AAChC,UAAIqgD,UAAU,CAACp6C,MAAf,EAAuB,KAAKujB,UAAL;;AAEvB,UAAIjR,SAAJ,EAAe;AACb,aAAKiF,IAAL;AACAlF,QAAAA,IAAI,CAAC0V,QAAL,GAAgB,KAAKhG,eAAL,EAAhB;AACA,aAAKw7B,mBAAL,CAAyB,GAAzB;AACA,eAAO,KAAKvrC,UAAL,CAAgBK,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED,aAAO,KAAKi7C,WAAL,EAAP;AACD;;AAED,QAAIlT,UAAU,CAACp6C,MAAf,EAAuB;AACrBqS,MAAAA,IAAI,CAAC+nC,UAAL,GAAkBA,UAAlB;AACAA,MAAAA,UAAU,GAAG,EAAb;AACD;;AAED/nC,IAAAA,IAAI,CAAC1C,MAAL,GAAc,KAAd;;AAEA,QAAI2C,SAAS,IAAItB,mBAAjB,EAAsC;AACpCM,MAAAA,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAAtB;AACA8N,MAAAA,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAAtB;AACD;;AAED,QAAI,CAAC+F,SAAL,EAAgB;AACd5B,MAAAA,WAAW,GAAG,KAAK8Q,GAAL,CAAStpB,OAAO,CAACoD,IAAjB,CAAd;AACD;;AAED,UAAMm7C,WAAW,GAAG,KAAKp2C,KAAL,CAAWo2C,WAA/B;AACA,UAAM5jC,GAAG,GAAG,KAAKuc,iBAAL,CAAuB/c,IAAvB,EAA6B,KAA7B,CAAZ;;AAEA,QAAI,CAACC,SAAD,IAAc,CAAC5B,WAAf,IAA8B,CAAC+lC,WAA/B,IAA8C,KAAKod,wBAAL,CAA8BxhD,IAA9B,CAAlD,EAAuF;AACrF,YAAMyhD,OAAO,GAAGjhD,GAAG,CAAChb,IAApB;;AAEA,UAAIi8D,OAAO,KAAK,OAAZ,IAAuB,CAAC,KAAKr+C,qBAAL,EAA5B,EAA0D;AACxDlG,QAAAA,OAAO,GAAG,IAAV;AACAmB,QAAAA,WAAW,GAAG,KAAK8Q,GAAL,CAAStpB,OAAO,CAACoD,IAAjB,CAAd;AACA,aAAK8zB,iBAAL,CAAuB/c,IAAvB,EAA6B,KAA7B;AACD;;AAED,UAAIyhD,OAAO,KAAK,KAAZ,IAAqBA,OAAO,KAAK,KAArC,EAA4C;AAC1CvhD,QAAAA,UAAU,GAAG,IAAb;AACAF,QAAAA,IAAI,CAACP,IAAL,GAAYgiD,OAAZ;;AAEA,YAAI,KAAK70D,KAAL,CAAW/G,OAAO,CAACoD,IAAnB,CAAJ,EAA8B;AAC5BoV,UAAAA,WAAW,GAAG,IAAd;AACA,eAAK7D,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACE,mBAAzC,EAA8DqxD,OAA9D;AACA,eAAKv8C,IAAL;AACD;;AAED,aAAK6X,iBAAL,CAAuB/c,IAAvB,EAA6B,KAA7B;AACD;AACF;;AAED,SAAKid,iBAAL,CAAuBjd,IAAvB,EAA6Bf,QAA7B,EAAuC/E,QAAvC,EAAiDmE,WAAjD,EAA8DnB,OAA9D,EAAuE+C,SAAvE,EAAkFC,UAAlF,EAA8FvB,mBAA9F;AACA,WAAOqB,IAAP;AACD;;AAEDqrC,EAAAA,iCAAiC,CAAC/tC,MAAD,EAAS;AACxC,WAAOA,MAAM,CAACmC,IAAP,KAAgB,KAAhB,GAAwB,CAAxB,GAA4B,CAAnC;AACD;;AAEDpC,EAAAA,4BAA4B,CAACC,MAAD,EAAS;AACnC,WAAOA,MAAM,CAAC7C,MAAd;AACD;;AAEDqiB,EAAAA,uBAAuB,CAACxf,MAAD,EAAS;AAC9B,QAAIokD,OAAJ;;AAEA,UAAM5rC,UAAU,GAAG,KAAKu1B,iCAAL,CAAuC/tC,MAAvC,CAAnB;AACA,UAAM7C,MAAM,GAAG,KAAK4C,4BAAL,CAAkCC,MAAlC,CAAf;AACA,UAAMlR,KAAK,GAAGkR,MAAM,CAAClR,KAArB;;AAEA,QAAIqO,MAAM,CAAC9M,MAAP,KAAkBmoB,UAAtB,EAAkC;AAChC,UAAIxY,MAAM,CAACmC,IAAP,KAAgB,KAApB,EAA2B;AACzB,aAAKjF,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACU,cAAhC;AACD,OAFD,MAEO;AACL,aAAK4J,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACW,cAAhC;AACD;AACF;;AAED,QAAIyM,MAAM,CAACmC,IAAP,KAAgB,KAAhB,IAAyB,CAAC,CAACiiD,OAAO,GAAGjnD,MAAM,CAACA,MAAM,CAAC9M,MAAP,GAAgB,CAAjB,CAAjB,KAAyC,IAAzC,GAAgD,KAAK,CAArD,GAAyD+zD,OAAO,CAACzyD,IAAlE,MAA4E,aAAzG,EAAwH;AACtH,WAAKuL,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACY,sBAAhC;AACD;AACF;;AAEDiP,EAAAA,iBAAiB,CAACC,IAAD,EAAO3B,WAAP,EAAoBnB,OAApB,EAA6B+C,SAA7B,EAAwCC,UAAxC,EAAoD;AACnE,QAAIA,UAAJ,EAAgB;AACd,WAAK1B,WAAL,CAAiBwB,IAAjB,EAAuB3B,WAAvB,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,cAAzD;AACA,WAAKye,uBAAL,CAA6B9c,IAA7B;AACA,aAAOA,IAAP;AACD;;AAED,QAAI9C,OAAO,IAAImB,WAAX,IAA0B,KAAKzR,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAA9B,EAA0D;AACxD,UAAIkZ,SAAJ,EAAe,KAAKiR,UAAL;AACflR,MAAAA,IAAI,CAACP,IAAL,GAAY,QAAZ;AACAO,MAAAA,IAAI,CAAC1C,MAAL,GAAc,IAAd;AACA,aAAO,KAAKkB,WAAL,CAAiBwB,IAAjB,EAAuB3B,WAAvB,EAAoCnB,OAApC,EAA6C,KAA7C,EAAoD,KAApD,EAA2D,cAA3D,CAAP;AACD;AACF;;AAEDkD,EAAAA,mBAAmB,CAACJ,IAAD,EAAOf,QAAP,EAAiB/E,QAAjB,EAA2B+F,SAA3B,EAAsCtB,mBAAtC,EAA2D;AAC5EqB,IAAAA,IAAI,CAACG,SAAL,GAAiB,KAAjB;;AAEA,QAAI,KAAKgP,GAAL,CAAStpB,OAAO,CAACsB,KAAjB,CAAJ,EAA6B;AAC3B6Y,MAAAA,IAAI,CAAC1b,KAAL,GAAa2b,SAAS,GAAG,KAAKkd,iBAAL,CAAuB,KAAKnvB,KAAL,CAAW5B,KAAlC,EAAyC,KAAK4B,KAAL,CAAWkM,QAApD,CAAH,GAAmE,KAAKmf,uBAAL,CAA6B1a,mBAA7B,CAAzF;AACA,aAAO,KAAKgB,UAAL,CAAgBK,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED,QAAI,CAACA,IAAI,CAACN,QAAN,IAAkBM,IAAI,CAACQ,GAAL,CAASvR,IAAT,KAAkB,YAAxC,EAAsD;AACpD,WAAKqvB,iBAAL,CAAuBte,IAAI,CAACQ,GAAL,CAAShb,IAAhC,EAAsCwa,IAAI,CAACQ,GAAL,CAASpU,KAA/C,EAAsD,IAAtD,EAA4D,KAA5D;;AAEA,UAAI6T,SAAJ,EAAe;AACbD,QAAAA,IAAI,CAAC1b,KAAL,GAAa,KAAK64B,iBAAL,CAAuBle,QAAvB,EAAiC/E,QAAjC,EAA2C8F,IAAI,CAACQ,GAAL,CAAS2d,OAAT,EAA3C,CAAb;AACD,OAFD,MAEO,IAAI,KAAKvxB,KAAL,CAAW/G,OAAO,CAACmC,EAAnB,KAA0B2W,mBAA9B,EAAmD;AACxD,YAAIA,mBAAmB,CAAC06C,eAApB,KAAwC,CAAC,CAA7C,EAAgD;AAC9C16C,UAAAA,mBAAmB,CAAC06C,eAApB,GAAsC,KAAKrrD,KAAL,CAAW5B,KAAjD;AACD;;AAED4T,QAAAA,IAAI,CAAC1b,KAAL,GAAa,KAAK64B,iBAAL,CAAuBle,QAAvB,EAAiC/E,QAAjC,EAA2C8F,IAAI,CAACQ,GAAL,CAAS2d,OAAT,EAA3C,CAAb;AACD,OANM,MAMA;AACLne,QAAAA,IAAI,CAAC1b,KAAL,GAAa0b,IAAI,CAACQ,GAAL,CAAS2d,OAAT,EAAb;AACD;;AAEDne,MAAAA,IAAI,CAACG,SAAL,GAAiB,IAAjB;AACA,aAAO,KAAKR,UAAL,CAAgBK,IAAhB,EAAsB,gBAAtB,CAAP;AACD;AACF;;AAEDid,EAAAA,iBAAiB,CAACjd,IAAD,EAAOf,QAAP,EAAiB/E,QAAjB,EAA2BmE,WAA3B,EAAwCnB,OAAxC,EAAiD+C,SAAjD,EAA4DC,UAA5D,EAAwEvB,mBAAxE,EAA6F;AAC5G,UAAMtQ,IAAI,GAAG,KAAK0R,iBAAL,CAAuBC,IAAvB,EAA6B3B,WAA7B,EAA0CnB,OAA1C,EAAmD+C,SAAnD,EAA8DC,UAA9D,KAA6E,KAAKE,mBAAL,CAAyBJ,IAAzB,EAA+Bf,QAA/B,EAAyC/E,QAAzC,EAAmD+F,SAAnD,EAA8DtB,mBAA9D,CAA1F;AACA,QAAI,CAACtQ,IAAL,EAAW,KAAK6iB,UAAL;AACX,WAAO7iB,IAAP;AACD;;AAED0uB,EAAAA,iBAAiB,CAAC/c,IAAD,EAAOgd,oBAAP,EAA6B;AAC5C,QAAI,KAAK7N,GAAL,CAAStpB,OAAO,CAACQ,QAAjB,CAAJ,EAAgC;AAC9B2Z,MAAAA,IAAI,CAACN,QAAL,GAAgB,IAAhB;AACAM,MAAAA,IAAI,CAACQ,GAAL,GAAW,KAAK6Y,uBAAL,EAAX;AACA,WAAKvK,MAAL,CAAYjpB,OAAO,CAACW,QAApB;AACD,KAJD,MAIO;AACL,YAAMm7D,iBAAiB,GAAG,KAAK3zD,KAAL,CAAWwpC,cAArC;AACA,WAAKxpC,KAAL,CAAWwpC,cAAX,GAA4B,IAA5B;AACA,YAAMvoC,IAAI,GAAG,KAAKjB,KAAL,CAAWiB,IAAxB;AACA+Q,MAAAA,IAAI,CAACQ,GAAL,GAAWvR,IAAI,KAAKpJ,OAAO,CAACC,GAAjB,IAAwBmJ,IAAI,KAAKpJ,OAAO,CAACK,MAAzC,IAAmD+I,IAAI,KAAKpJ,OAAO,CAACE,MAApE,IAA8EkJ,IAAI,KAAKpJ,OAAO,CAACG,OAA/F,GAAyG,KAAK0Y,aAAL,EAAzG,GAAgI,KAAKE,qBAAL,CAA2Boe,oBAA3B,CAA3I;;AAEA,UAAI/tB,IAAI,KAAKpJ,OAAO,CAACM,WAArB,EAAkC;AAChC6Z,QAAAA,IAAI,CAACN,QAAL,GAAgB,KAAhB;AACD;;AAED,WAAK1R,KAAL,CAAWwpC,cAAX,GAA4BmqB,iBAA5B;AACD;;AAED,WAAO3hD,IAAI,CAACQ,GAAZ;AACD;;AAEDvD,EAAAA,YAAY,CAAC5O,IAAD,EAAO6O,OAAP,EAAgB;AAC1B7O,IAAAA,IAAI,CAAC0Q,EAAL,GAAU,IAAV;AACA1Q,IAAAA,IAAI,CAACuzD,SAAL,GAAiB,KAAjB;AACAvzD,IAAAA,IAAI,CAACsxB,KAAL,GAAa,CAAC,CAACziB,OAAf;AACD;;AAEDsB,EAAAA,WAAW,CAACnQ,IAAD,EAAOgQ,WAAP,EAAoBnB,OAApB,EAA6BoB,aAA7B,EAA4Ce,gBAA5C,EAA8DpQ,IAA9D,EAAoEqQ,YAAY,GAAG,KAAnF,EAA0F;AACnG,SAAKrC,YAAL,CAAkB5O,IAAlB,EAAwB6O,OAAxB;AACA7O,IAAAA,IAAI,CAACuzD,SAAL,GAAiB,CAAC,CAACvjD,WAAnB;AACA,UAAMogB,cAAc,GAAGngB,aAAvB;AACA,SAAK8K,KAAL,CAAWF,KAAX,CAAiB7D,cAAc,GAAGG,WAAjB,IAAgClG,YAAY,GAAGoG,WAAH,GAAiB,CAA7D,KAAmErG,gBAAgB,GAAGoG,kBAAH,GAAwB,CAA3G,CAAjB;AACA,SAAKwgC,SAAL,CAAe/8B,KAAf,CAAqB2vB,aAAa,CAAC37B,OAAD,EAAU7O,IAAI,CAACuzD,SAAf,CAAlC;AACA,SAAKpjC,mBAAL,CAAyBnwB,IAAzB,EAA+BowB,cAA/B;AACA,SAAK9G,0BAAL,CAAgCtpB,IAAhC,EAAsCY,IAAtC,EAA4C,IAA5C;AACA,SAAKg3C,SAAL,CAAe98B,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACA,WAAO9a,IAAP;AACD;;AAED2tB,EAAAA,cAAc,CAACC,KAAD,EAAQC,YAAR,EAAsBC,OAAtB,EAA+Bxd,mBAA/B,EAAoD;AAChE,QAAIwd,OAAJ,EAAa;AACX,WAAK2wB,YAAL,CAAkB,gBAAlB;AACD;;AAED,UAAMkS,6BAA6B,GAAG,KAAKhxD,KAAL,CAAW+hD,0BAAjD;AACA,SAAK/hD,KAAL,CAAW+hD,0BAAX,GAAwC,KAAxC;AACA,UAAM1hD,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0F,IAAL;AACA7W,IAAAA,IAAI,CAACC,QAAL,GAAgB,KAAKwyD,aAAL,CAAmB7kC,KAAnB,EAA0B,CAACE,OAA3B,EAAoCxd,mBAApC,EAAyDtQ,IAAzD,CAAhB;AACA,SAAKL,KAAL,CAAW+hD,0BAAX,GAAwCiP,6BAAxC;AACA,WAAO,KAAKr/C,UAAL,CAAgBtR,IAAhB,EAAsB8tB,OAAO,GAAG,iBAAH,GAAuB,iBAApD,CAAP;AACD;;AAEDyE,EAAAA,oBAAoB,CAACvyB,IAAD,EAAOoM,MAAP,EAAeyC,OAAf,EAAwB0e,gBAAxB,EAA0C;AAC5D,SAAKxS,KAAL,CAAWF,KAAX,CAAiB7D,cAAc,GAAGC,WAAlC;AACA,QAAI1J,KAAK,GAAGi9B,aAAa,CAAC37B,OAAD,EAAU,KAAV,CAAzB;;AAEA,QAAI,CAAC,KAAKtQ,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,CAAD,IAAiC,KAAK4/C,SAAL,CAAerN,KAApD,EAA2D;AACzDh9B,MAAAA,KAAK,IAAIy8B,QAAT;AACD;;AAED,SAAK4N,SAAL,CAAe/8B,KAAf,CAAqBtN,KAArB;AACA,SAAKqB,YAAL,CAAkB5O,IAAlB,EAAwB6O,OAAxB;AACA,UAAM0qC,yBAAyB,GAAG,KAAK55C,KAAL,CAAWouB,sBAA7C;;AAEA,QAAI3hB,MAAJ,EAAY;AACV,WAAKzM,KAAL,CAAWouB,sBAAX,GAAoC,IAApC;AACA,WAAK2D,0BAAL,CAAgC1xB,IAAhC,EAAsCoM,MAAtC,EAA8CmhB,gBAA9C;AACD;;AAED,SAAK5tB,KAAL,CAAWouB,sBAAX,GAAoC,KAApC;AACA,SAAKld,iBAAL,CAAuB7Q,IAAvB,EAA6B,IAA7B;AACA,SAAK43C,SAAL,CAAe98B,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACA,SAAKnb,KAAL,CAAWouB,sBAAX,GAAoCwrB,yBAApC;AACA,WAAO,KAAKjoC,UAAL,CAAgBtR,IAAhB,EAAsB,yBAAtB,CAAP;AACD;;AAED0xB,EAAAA,0BAA0B,CAAC1xB,IAAD,EAAOoM,MAAP,EAAemhB,gBAAf,EAAiC;AACzDvtB,IAAAA,IAAI,CAACoM,MAAL,GAAc,KAAKmf,gBAAL,CAAsBnf,MAAtB,EAA8BmhB,gBAA9B,EAAgD,KAAhD,CAAd;AACD;;AAEDjE,EAAAA,0BAA0B,CAACtpB,IAAD,EAAOY,IAAP,EAAamQ,QAAQ,GAAG,KAAxB,EAA+B;AACvD,SAAKF,iBAAL,CAAuB7Q,IAAvB,EAA6B,KAA7B,EAAoC+Q,QAApC;AACA,SAAKO,UAAL,CAAgBtR,IAAhB,EAAsBY,IAAtB;AACD;;AAEDiQ,EAAAA,iBAAiB,CAAC7Q,IAAD,EAAO8Q,eAAP,EAAwBC,QAAQ,GAAG,KAAnC,EAA0C;AACzD,UAAMyiD,YAAY,GAAG1iD,eAAe,IAAI,CAAC,KAAKvS,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAzC;AACA,SAAKozD,eAAL,CAAqB5wC,KAArB,CAA2BovC,kBAAkB,EAA7C;;AAEA,QAAIuJ,YAAJ,EAAkB;AAChBxzD,MAAAA,IAAI,CAACa,IAAL,GAAY,KAAKiqB,gBAAL,EAAZ;AACA,WAAKW,WAAL,CAAiBzrB,IAAjB,EAAuB,KAAvB,EAA8B8Q,eAA9B,EAA+C,KAA/C;AACD,KAHD,MAGO;AACL,YAAMytC,SAAS,GAAG,KAAK5+C,KAAL,CAAWkW,MAA7B;AACA,YAAMs1C,SAAS,GAAG,KAAKxrD,KAAL,CAAWgiD,MAA7B;AACA,WAAKhiD,KAAL,CAAWgiD,MAAX,GAAoB,EAApB;AACA,WAAK/J,SAAL,CAAe/8B,KAAf,CAAqB,KAAK+8B,SAAL,CAAezN,YAAf,KAAgCJ,YAArD;AACA/pC,MAAAA,IAAI,CAACa,IAAL,GAAY,KAAKu9C,UAAL,CAAgB,IAAhB,EAAsB,KAAtB,EAA6BqV,sBAAsB,IAAI;AACjE,cAAMC,SAAS,GAAG,CAAC,KAAKC,iBAAL,CAAuB3zD,IAAI,CAACoM,MAA5B,CAAnB;;AAEA,YAAIqnD,sBAAsB,IAAIC,SAA9B,EAAyC;AACvC,gBAAME,QAAQ,GAAG,CAAC5zD,IAAI,CAACoR,IAAL,KAAc,QAAd,IAA0BpR,IAAI,CAACoR,IAAL,KAAc,aAAzC,KAA2D,CAAC,CAACpR,IAAI,CAACmS,GAAlE,GAAwEnS,IAAI,CAACmS,GAAL,CAASnU,GAAjF,GAAuFgC,IAAI,CAACjC,KAA7G;AACA,eAAKoO,KAAL,CAAWynD,QAAX,EAAqB/xD,aAAa,CAACwC,4BAAnC;AACD;;AAED,cAAMmpD,iBAAiB,GAAG,CAACjP,SAAD,IAAc,KAAK5+C,KAAL,CAAWkW,MAAnD;AACA,aAAK4V,WAAL,CAAiBzrB,IAAjB,EAAuB,CAAC,KAAKL,KAAL,CAAWkW,MAAZ,IAAsB,CAAC/E,eAAvB,IAA0C,CAACC,QAA3C,IAAuD,CAAC2iD,SAA/E,EAA0F5iD,eAA1F,EAA2G08C,iBAA3G;;AAEA,YAAI,KAAK7tD,KAAL,CAAWkW,MAAX,IAAqB7V,IAAI,CAAC0Q,EAA9B,EAAkC;AAChC,eAAKsd,SAAL,CAAehuB,IAAI,CAAC0Q,EAApB,EAAwB,eAAxB,EAAyCmI,YAAzC,EAAuDnY,SAAvD,EAAkEA,SAAlE,EAA6E8sD,iBAA7E;AACD;AACF,OAdW,CAAZ;AAeA,WAAK5V,SAAL,CAAe98B,IAAf;AACA,WAAK2wC,eAAL,CAAqB3wC,IAArB;AACA,WAAKnb,KAAL,CAAWgiD,MAAX,GAAoBwJ,SAApB;AACD;AACF;;AAEDwI,EAAAA,iBAAiB,CAACvnD,MAAD,EAAS;AACxB,SAAK,IAAIhM,CAAC,GAAG,CAAR,EAAWqlD,GAAG,GAAGr5C,MAAM,CAAC9M,MAA7B,EAAqCc,CAAC,GAAGqlD,GAAzC,EAA8CrlD,CAAC,EAA/C,EAAmD;AACjD,UAAIgM,MAAM,CAAChM,CAAD,CAAN,CAAUQ,IAAV,KAAmB,YAAvB,EAAqC,OAAO,KAAP;AACtC;;AAED,WAAO,IAAP;AACD;;AAED6qB,EAAAA,WAAW,CAACzrB,IAAD,EAAO2xB,eAAP,EAAwBC,eAAxB,EAAyC47B,iBAAiB,GAAG,IAA7D,EAAmE;AAC5E,UAAMF,YAAY,GAAG,IAAIt3C,GAAJ,EAArB;;AAEA,SAAK,MAAM+S,KAAX,IAAoB/oB,IAAI,CAACoM,MAAzB,EAAiC;AAC/B,WAAK4hB,SAAL,CAAejF,KAAf,EAAsB,yBAAtB,EAAiDzQ,QAAjD,EAA2DqZ,eAAe,GAAG,IAAH,GAAU27B,YAApF,EAAkG5sD,SAAlG,EAA6G8sD,iBAA7G;AACD;AACF;;AAEDiF,EAAAA,aAAa,CAAC7kC,KAAD,EAAQo/B,UAAR,EAAoB18C,mBAApB,EAAyCogD,YAAzC,EAAuD;AAClE,UAAMzD,IAAI,GAAG,EAAb;AACA,QAAIjlC,KAAK,GAAG,IAAZ;;AAEA,WAAO,CAAC,KAAKlH,GAAL,CAAS8M,KAAT,CAAR,EAAyB;AACvB,UAAI5F,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKvH,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;;AAEA,YAAI,KAAK2F,KAAL,CAAWqvB,KAAX,CAAJ,EAAuB;AACrB,cAAI8iC,YAAJ,EAAkB;AAChB,iBAAKphD,QAAL,CAAcohD,YAAd,EAA4B,eAA5B,EAA6C,KAAK/wD,KAAL,CAAWmM,YAAxD;AACD;;AAED,eAAK+K,IAAL;AACA;AACD;AACF;;AAEDo2C,MAAAA,IAAI,CAACptD,IAAL,CAAU,KAAK+wD,iBAAL,CAAuB5D,UAAvB,EAAmC18C,mBAAnC,CAAV;AACD;;AAED,WAAO28C,IAAP;AACD;;AAED2D,EAAAA,iBAAiB,CAAC5D,UAAD,EAAa18C,mBAAb,EAAkC0Z,gBAAlC,EAAoDymC,gBAApD,EAAsE;AACrF,QAAI7W,GAAJ;;AAEA,QAAI,KAAKr7C,KAAL,CAAW/G,OAAO,CAACoB,KAAnB,CAAJ,EAA+B;AAC7B,UAAI,CAACo0D,UAAL,EAAiB;AACf,aAAK7gD,KAAL,CAAW,KAAKxM,KAAL,CAAWiM,GAAtB,EAA2B/J,aAAa,CAACmI,eAAzC,EAA0D,GAA1D;AACD;;AAED4vC,MAAAA,GAAG,GAAG,IAAN;AACD,KAND,MAMO,IAAI,KAAKr7C,KAAL,CAAW/G,OAAO,CAAC6B,QAAnB,CAAJ,EAAkC;AACvC,YAAM64D,kBAAkB,GAAG,KAAKvyD,KAAL,CAAW5B,KAAtC;AACA,YAAMo0D,kBAAkB,GAAG,KAAKxyD,KAAL,CAAWkM,QAAtC;AACA+tC,MAAAA,GAAG,GAAG,KAAKjuB,cAAL,CAAoB,KAAKihC,WAAL,CAAiBt8C,mBAAjB,EAAsC0Z,gBAAtC,CAApB,EAA6EkoC,kBAA7E,EAAiGC,kBAAjG,CAAN;AACD,KAJM,MAIA,IAAI,KAAK5zD,KAAL,CAAW/G,OAAO,CAACyB,QAAnB,CAAJ,EAAkC;AACvC,WAAKwlD,YAAL,CAAkB,oBAAlB;;AAEA,UAAI,CAACgS,gBAAL,EAAuB;AACrB,aAAKtkD,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACuH,6BAA3C;AACD;;AAED,YAAMpJ,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,WAAK0F,IAAL;AACA+iC,MAAAA,GAAG,GAAG,KAAKtoC,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAN;AACD,KAVM,MAUA;AACL45C,MAAAA,GAAG,GAAG,KAAK5uB,uBAAL,CAA6B1a,mBAA7B,EAAkD,KAAKqb,cAAvD,EAAuE3B,gBAAvE,CAAN;AACD;;AAED,WAAO4vB,GAAP;AACD;;AAEDv4B,EAAAA,eAAe,CAACqD,OAAD,EAAU;AACvB,UAAM1kB,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,UAAMha,IAAI,GAAG,KAAKy5C,mBAAL,CAAyB5wC,IAAI,CAACjC,KAA9B,EAAqC2mB,OAArC,CAAb;AACA,WAAO,KAAK4D,gBAAL,CAAsBtoB,IAAtB,EAA4B7I,IAA5B,CAAP;AACD;;AAEDmxB,EAAAA,gBAAgB,CAACtoB,IAAD,EAAO7I,IAAP,EAAa;AAC3B6I,IAAAA,IAAI,CAAC7I,IAAL,GAAYA,IAAZ;AACA6I,IAAAA,IAAI,CAACN,GAAL,CAASxB,cAAT,GAA0B/G,IAA1B;AACA,WAAO,KAAKma,UAAL,CAAgBtR,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAED4wC,EAAAA,mBAAmB,CAAChlC,GAAD,EAAM8Y,OAAN,EAAe;AAChC,QAAIvtB,IAAJ;AACA,UAAM;AACJ4G,MAAAA,KADI;AAEJ6C,MAAAA;AAFI,QAGF,KAAKjB,KAHT;;AAKA,QAAIiB,IAAI,KAAKpJ,OAAO,CAACL,IAArB,EAA2B;AACzBA,MAAAA,IAAI,GAAG,KAAKwI,KAAL,CAAW1J,KAAlB;AACD,KAFD,MAEO,IAAI2K,IAAI,CAAChK,OAAT,EAAkB;AACvBO,MAAAA,IAAI,GAAGyJ,IAAI,CAAChK,OAAZ;AACA,YAAM8d,UAAU,GAAG,KAAKA,UAAL,EAAnB;;AAEA,UAAI,CAAC9T,IAAI,KAAKpJ,OAAO,CAAC8E,MAAjB,IAA2BsE,IAAI,KAAKpJ,OAAO,CAACiE,SAA7C,MAA4DiZ,UAAU,KAAKd,KAAK,CAACU,iBAArB,IAA0CI,UAAU,KAAKd,KAAK,CAACS,kBAA3H,CAAJ,EAAoJ;AAClJ,aAAK1U,KAAL,CAAW4U,OAAX,CAAmBrT,GAAnB;AACD;AACF,KAPM,MAOA;AACL,YAAM,KAAK2hB,UAAL,EAAN;AACD;;AAED,QAAI6B,OAAJ,EAAa;AACX,WAAK/kB,KAAL,CAAWiB,IAAX,GAAkBpJ,OAAO,CAACL,IAA1B;AACD,KAFD,MAEO;AACL,WAAK84B,iBAAL,CAAuB94B,IAAvB,EAA6B4G,KAA7B,EAAoC,CAAC,CAAC6C,IAAI,CAAChK,OAA3C,EAAoD,KAApD;AACD;;AAED,SAAKigB,IAAL;AACA,WAAO1f,IAAP;AACD;;AAED84B,EAAAA,iBAAiB,CAAC7Z,IAAD,EAAOvK,QAAP,EAAiBivC,aAAjB,EAAgC3tB,SAAhC,EAA2C;AAC1D,QAAI,KAAKyqB,SAAL,CAAevN,QAAf,IAA2Bj0B,IAAI,KAAK,OAAxC,EAAiD;AAC/C,WAAKjK,KAAL,CAAWN,QAAX,EAAqBhK,aAAa,CAACkJ,sBAAnC;AACA;AACD;;AAED,QAAIqL,IAAI,KAAK,OAAb,EAAsB;AACpB,UAAI,KAAKwhC,SAAL,CAAexN,QAAnB,EAA6B;AAC3B,aAAKj+B,KAAL,CAAWN,QAAX,EAAqBhK,aAAa,CAACK,sBAAnC;AACA;AACD,OAHD,MAGO,IAAI,KAAK6Y,KAAL,CAAWR,aAAX,IAA4B,CAAC,KAAKQ,KAAL,CAAWP,kBAA5C,EAAgE;AACrE,aAAKrO,KAAL,CAAWN,QAAX,EAAqBhK,aAAa,CAACM,mCAAnC;AACA;AACD,OAHM,MAGA;AACL,aAAKspD,eAAL,CAAqB7B,+BAArB,CAAqD/9C,QAArD,EAA+DhK,aAAa,CAACK,sBAA7E;AACD;AACF;;AAED,QAAI,KAAK6Y,KAAL,CAAWT,OAAX,IAAsB,CAAC,KAAKS,KAAL,CAAWP,kBAAlC,IAAwDpE,IAAI,KAAK,WAArE,EAAkF;AAChF,WAAKjK,KAAL,CAAWN,QAAX,EAAqBhK,aAAa,CAACG,gBAAnC;AACA;AACD;;AAED,QAAI84C,aAAa,IAAIrkC,SAAS,CAACL,IAAD,CAA9B,EAAsC;AACpC,WAAKjK,KAAL,CAAWN,QAAX,EAAqBhK,aAAa,CAAC2H,iBAAnC,EAAsD4M,IAAtD;AACA;AACD;;AAED,UAAMy9C,YAAY,GAAG,CAAC,KAAKl0D,KAAL,CAAWkW,MAAZ,GAAqBM,cAArB,GAAsCgX,SAAS,GAAG3W,wBAAH,GAA8BF,oBAAlG;;AAEA,QAAIu9C,YAAY,CAACz9C,IAAD,EAAO,KAAKC,QAAZ,CAAhB,EAAuC;AACrC,WAAKlK,KAAL,CAAWN,QAAX,EAAqBhK,aAAa,CAACiI,sBAAnC,EAA2DsM,IAA3D;AACD;AACF;;AAEDo5C,EAAAA,cAAc,GAAG;AACf,QAAI,KAAK5X,SAAL,CAAexN,QAAnB,EAA6B,OAAO,IAAP;;AAE7B,QAAI,KAAKhzC,OAAL,CAAaopD,yBAAb,IAA0C,CAAC,KAAKzlC,KAAL,CAAWb,UAA1D,EAAsE;AACpE,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDu1C,EAAAA,UAAU,CAAC7+C,QAAD,EAAW/E,QAAX,EAAqB;AAC7B,UAAM7L,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA,SAAK4/C,eAAL,CAAqB/B,+BAArB,CAAqD1pD,IAAI,CAACjC,KAA1D,EAAiE8D,aAAa,CAACO,8BAA/E;;AAEA,QAAI,KAAK0e,GAAL,CAAStpB,OAAO,CAACoD,IAAjB,CAAJ,EAA4B;AAC1B,WAAKuR,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAACoF,iBAArC;AACD;;AAED,QAAI,CAAC,KAAK8T,KAAL,CAAWb,UAAZ,IAA0B,CAAC,KAAK9iB,OAAL,CAAaopD,yBAA5C,EAAuE;AACrE,UAAI,KAAKqP,gBAAL,EAAJ,EAA6B;AAC3B,aAAKhxD,2BAAL,GAAmC,IAAnC;AACD,OAFD,MAEO;AACL,aAAKD,iBAAL,GAAyB,IAAzB;AACD;AACF;;AAED,QAAI,CAAC,KAAKe,KAAL,CAAW8hD,SAAhB,EAA2B;AACzBzhD,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKktB,eAAL,CAAqB,IAArB,EAA2B,IAA3B,CAAhB;AACD;;AAED,WAAO,KAAKjjC,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED6vD,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAK96C,qBAAL,MAAgC,KAAKxW,KAAL,CAAW/G,OAAO,CAACkD,OAAnB,CAAhC,IAA+D,KAAK6D,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAA/D,IAA6F,KAAK6F,KAAL,CAAW/G,OAAO,CAACQ,QAAnB,CAA7F,IAA6H,KAAKuG,KAAL,CAAW/G,OAAO,CAAC8B,SAAnB,CAA7H,IAA8J,KAAKiF,KAAL,CAAW/G,OAAO,CAACI,MAAnB,CAA9J,IAA4L,KAAK2G,KAAL,CAAW/G,OAAO,CAACqD,KAAnB,CAA5L,IAAyN,KAAKiE,SAAL,CAAe,aAAf,KAAiC,KAAKP,KAAL,CAAW/G,OAAO,CAACmD,MAAnB,CAAjQ;AACD;;AAED2zD,EAAAA,UAAU,GAAG;AACX,UAAMtuD,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAKs6C,eAAL,CAAqB/B,+BAArB,CAAqD1pD,IAAI,CAACjC,KAA1D,EAAiE8D,aAAa,CAACmJ,gBAA/E;AACA,SAAK6L,IAAL;;AAEA,QAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACqB,IAAnB,KAA4B,CAAC,KAAK0F,KAAL,CAAW/G,OAAO,CAACoD,IAAnB,CAAD,IAA6B,CAAC,KAAK+E,KAAL,CAAWiB,IAAX,CAAgBzK,UAA1E,IAAwF,KAAK4e,qBAAL,EAA5F,EAA0H;AACxH/U,MAAAA,IAAI,CAAC8zD,QAAL,GAAgB,KAAhB;AACA9zD,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,IAAhB;AACD,KAHD,MAGO;AACLrnB,MAAAA,IAAI,CAAC8zD,QAAL,GAAgB,KAAKhzC,GAAL,CAAStpB,OAAO,CAACoD,IAAjB,CAAhB;AACAoF,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKyD,gBAAL,EAAhB;AACD;;AAED,WAAO,KAAKxZ,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED2uD,EAAAA,4BAA4B,CAAC5/B,IAAD,EAAO2rB,YAAP,EAAqB;AAC/C,QAAI,KAAKz7C,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OAA7D,EAAsE;AACpE,UAAI8vB,IAAI,CAACnuB,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAKuL,KAAL,CAAWuuC,YAAX,EAAyB74C,aAAa,CAAC6F,8BAAvC;AACD;AACF;AACF;;AAEDunD,EAAAA,sBAAsB,CAAC8E,eAAD,EAAkBnjD,QAAlB,EAA4B/E,QAA5B,EAAsC;AAC1D,SAAKmoD,iCAAL,CAAuCD,eAAvC,EAAwDnjD,QAAxD;AACA,WAAO,KAAKqjD,6BAAL,CAAmCF,eAAnC,EAAoDnjD,QAApD,EAA8D/E,QAA9D,CAAP;AACD;;AAEDmoD,EAAAA,iCAAiC,CAACD,eAAD,EAAkBnjD,QAAlB,EAA4B;AAC3D,QAAI,KAAKrS,KAAL,CAAW/G,OAAO,CAAC2B,KAAnB,CAAJ,EAA+B;AAC7B,YAAM,KAAKgT,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAAC2F,mBAA3C,CAAN;AACD,KAFD,MAEO,IAAIusD,eAAe,CAACnzD,IAAhB,KAAyB,oBAA7B,EAAmD;AACxD,WAAKuL,KAAL,CAAWyE,QAAX,EAAqB/O,aAAa,CAAC4F,8BAAnC;AACD;AACF;;AAEDwsD,EAAAA,6BAA6B,CAACF,eAAD,EAAkBnjD,QAAlB,EAA4B/E,QAA5B,EAAsC;AACjE,UAAMkX,QAAQ,GAAG,KAAKzU,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAjB;AACA,UAAMqoD,iBAAiB,GAAG,KAAKA,iBAAL,CAAuBH,eAAvB,CAA1B;;AAEA,QAAIG,iBAAJ,EAAuB;AACrBnxC,MAAAA,QAAQ,CAACzQ,MAAT,GAAkByhD,eAAlB;AACD,KAFD,MAEO;AACL,UAAI,CAAC,KAAKI,0CAAL,EAAL,EAAwD;AACtD,aAAKhoD,KAAL,CAAWyE,QAAX,EAAqB/O,aAAa,CAAC8F,mBAAnC;AACD;;AAEDob,MAAAA,QAAQ,CAACxU,UAAT,GAAsBwlD,eAAtB;AACD;;AAED,WAAO,KAAKziD,UAAL,CAAgByR,QAAhB,EAA0BmxC,iBAAiB,GAAG,sBAAH,GAA4B,yBAAvE,CAAP;AACD;;AAEDA,EAAAA,iBAAiB,CAAC3lD,UAAD,EAAa;AAC5B,YAAQA,UAAU,CAAC3N,IAAnB;AACE,WAAK,kBAAL;AACE,eAAO,CAAC2N,UAAU,CAAC8C,QAAZ,IAAwB,KAAK6iD,iBAAL,CAAuB3lD,UAAU,CAACo4B,MAAlC,CAA/B;;AAEF,WAAK,YAAL;AACE,eAAO,IAAP;;AAEF;AACE,eAAO,KAAP;AARJ;AAUD;;AAEDqoB,EAAAA,0BAA0B,CAACoF,QAAD,EAAW;AACnC,UAAMC,sBAAsB,GAAG,KAAK10D,KAAL,CAAW2hD,YAA1C;AACA,SAAK3hD,KAAL,CAAW2hD,YAAX,GAA0B;AACxBC,MAAAA,wBAAwB,EAAE,CADF;AAExBC,MAAAA,aAAa,EAAE;AAFS,KAA1B;;AAKA,QAAI;AACF,aAAO4S,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAKz0D,KAAL,CAAW2hD,YAAX,GAA0B+S,sBAA1B;AACD;AACF;;AAEDC,EAAAA,0BAA0B,CAACF,QAAD,EAAW;AACnC,UAAMC,sBAAsB,GAAG,KAAK10D,KAAL,CAAW2hD,YAA1C;AACA,SAAK3hD,KAAL,CAAW2hD,YAAX,GAA0B;AACxBC,MAAAA,wBAAwB,EAAE,CADF;AAExBC,MAAAA,aAAa,EAAE;AAFS,KAA1B;;AAKA,QAAI;AACF,aAAO4S,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAKz0D,KAAL,CAAW2hD,YAAX,GAA0B+S,sBAA1B;AACD;AACF;;AAEDlF,EAAAA,8BAA8B,CAACiF,QAAD,EAAW;AACvC,UAAMG,0BAA0B,GAAG,KAAK50D,KAAL,CAAW8hD,SAA9C;AACA,SAAK9hD,KAAL,CAAW8hD,SAAX,GAAuB,IAAvB;;AAEA,QAAI;AACF,aAAO2S,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAKz0D,KAAL,CAAW8hD,SAAX,GAAuB8S,0BAAvB;AACD;AACF;;AAEDpG,EAAAA,UAAU,CAACiG,QAAD,EAAW;AACnB,UAAM7mD,KAAK,GAAG,KAAKqqC,SAAL,CAAezN,YAAf,EAAd;AACA,UAAMqqB,cAAc,GAAGxqB,QAAQ,GAAG,CAACz8B,KAAnC;;AAEA,QAAIinD,cAAJ,EAAoB;AAClB,WAAK5c,SAAL,CAAe/8B,KAAf,CAAqBtN,KAAK,GAAGy8B,QAA7B;;AAEA,UAAI;AACF,eAAOoqB,QAAQ,EAAf;AACD,OAFD,SAEU;AACR,aAAKxc,SAAL,CAAe98B,IAAf;AACD;AACF;;AAED,WAAOs5C,QAAQ,EAAf;AACD;;AAEDnG,EAAAA,aAAa,CAACmG,QAAD,EAAW;AACtB,UAAM7mD,KAAK,GAAG,KAAKqqC,SAAL,CAAezN,YAAf,EAAd;AACA,UAAMsqB,gBAAgB,GAAGzqB,QAAQ,GAAGz8B,KAApC;;AAEA,QAAIknD,gBAAJ,EAAsB;AACpB,WAAK7c,SAAL,CAAe/8B,KAAf,CAAqBtN,KAAK,GAAG,CAACy8B,QAA9B;;AAEA,UAAI;AACF,eAAOoqB,QAAQ,EAAf;AACD,OAFD,SAEU;AACR,aAAKxc,SAAL,CAAe98B,IAAf;AACD;AACF;;AAED,WAAOs5C,QAAQ,EAAf;AACD;;AAED7C,EAAAA,sBAAsB,GAAG;AACvB,SAAK5xD,KAAL,CAAW2hD,YAAX,CAAwBE,aAAxB,GAAwC,CAAxC;AACD;;AAED8P,EAAAA,mDAAmD,GAAG;AACpD,WAAO,KAAK3xD,KAAL,CAAW2hD,YAAX,CAAwBC,wBAAxB,IAAoD,CAA3D;AACD;;AAED4S,EAAAA,0CAA0C,GAAG;AAC3C,WAAO,KAAKx0D,KAAL,CAAW2hD,YAAX,CAAwBE,aAAxB,IAAyC,IAAzC,IAAiD,KAAK7hD,KAAL,CAAW2hD,YAAX,CAAwBE,aAAxB,IAAyC,CAAjG;AACD;;AAED4N,EAAAA,uBAAuB,CAACV,IAAD,EAAO;AAC5B,UAAM99C,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,UAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,SAAKlM,KAAL,CAAWyhD,gBAAX,GAA8B,KAAKzhD,KAAL,CAAW5B,KAAzC;AACA,UAAM4yD,6BAA6B,GAAG,KAAKhxD,KAAL,CAAW+hD,0BAAjD;AACA,SAAK/hD,KAAL,CAAW+hD,0BAAX,GAAwC,IAAxC;AACA,UAAMgT,GAAG,GAAG,KAAKja,WAAL,CAAiB,KAAKlG,eAAL,EAAjB,EAAyC3jC,QAAzC,EAAmD/E,QAAnD,EAA6D6iD,IAA7D,CAAZ;AACA,SAAK/uD,KAAL,CAAW+hD,0BAAX,GAAwCiP,6BAAxC;AACA,WAAO+D,GAAP;AACD;;AAEDhF,EAAAA,qBAAqB,GAAG;AACtB,SAAKjR,YAAL,CAAkB,cAAlB;AACA,UAAMz+C,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0F,IAAL;AACA,SAAKiK,GAAL,CAAStpB,OAAO,CAACa,MAAjB;AACA,UAAMs8D,YAAY,GAAG,KAAKzJ,gBAAL,CAAsB,IAAtB,CAArB;AACA,SAAKQ,kBAAL;AACA,UAAM54B,OAAO,GAAG,KAAK3hB,SAAL,EAAhB;;AAEA,QAAI;AACFnR,MAAAA,IAAI,CAACa,IAAL,GAAY,KAAK+zD,YAAL,CAAkB9hC,OAAlB,EAA2Bt7B,OAAO,CAACgB,MAAnC,EAA2C,QAA3C,CAAZ;AACD,KAFD,SAEU;AACRm8D,MAAAA,YAAY;AACb;;AAED,SAAK7zC,GAAL,CAAStpB,OAAO,CAACgB,MAAjB;AACA,WAAO,KAAK8Y,UAAL,CAAgBtR,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAxzDuC;;AA4zD1C,MAAM60D,SAAS,GAAG;AAChBzjD,EAAAA,IAAI,EAAE;AADU,CAAlB;AAAA,MAGM0jD,WAAW,GAAG;AAClB1jD,EAAAA,IAAI,EAAE;AADY,CAHpB;AAMA,MAAM2jD,aAAa,GAAG,KAAtB;AAAA,MACMC,cAAc,GAAG,KADvB;AAAA,MAEMC,sBAAsB,GAAG,KAF/B;AAAA,MAGMC,gBAAgB,GAAG,KAHzB;AAIA,MAAMC,aAAa,GAAG,kBAAtB;;AAEA,SAASC,kBAAT,CAA4BrU,MAA5B,EAAoC;AAClC;AACE,SAAK,IAAI3gD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2gD,MAAM,CAACzhD,MAA3B,EAAmCc,CAAC,EAApC,EAAwC;AACtC,YAAM/I,KAAK,GAAG0pD,MAAM,CAAC3gD,CAAD,CAApB;;AAEA,UAAI/I,KAAK,CAACuJ,IAAN,KAAepJ,OAAO,CAACM,WAA3B,EAAwC;AACtC,cAAM;AACJ4H,UAAAA,GADI;AAEJ3B,UAAAA,KAFI;AAGJ9H,UAAAA,KAHI;AAIJ+H,UAAAA;AAJI,YAKF3G,KALJ;AAMA,cAAMg+D,UAAU,GAAGt3D,KAAK,GAAG,CAA3B;AACA,cAAMu3D,UAAU,GAAG,IAAI53D,QAAJ,CAAagC,GAAG,CAAC3B,KAAJ,CAAUJ,IAAvB,EAA6B+B,GAAG,CAAC3B,KAAJ,CAAUF,MAAV,GAAmB,CAAhD,CAAnB;AACAkjD,QAAAA,MAAM,CAACxgD,MAAP,CAAcH,CAAd,EAAiB,CAAjB,EAAoB,IAAIyiD,KAAJ,CAAU;AAC5BjiD,UAAAA,IAAI,EAAEpJ,OAAO,CAACiC,IADc;AAE5BxD,UAAAA,KAAK,EAAE,GAFqB;AAG5B8H,UAAAA,KAAK,EAAEA,KAHqB;AAI5BC,UAAAA,GAAG,EAAEq3D,UAJuB;AAK5BxpD,UAAAA,QAAQ,EAAEnM,GAAG,CAAC3B,KALc;AAM5BiO,UAAAA,MAAM,EAAEspD;AANoB,SAAV,CAApB,EAOI,IAAIzS,KAAJ,CAAU;AACZjiD,UAAAA,IAAI,EAAEpJ,OAAO,CAACL,IADF;AAEZlB,UAAAA,KAAK,EAAEA,KAFK;AAGZ8H,UAAAA,KAAK,EAAEs3D,UAHK;AAIZr3D,UAAAA,GAAG,EAAEA,GAJO;AAKZ6N,UAAAA,QAAQ,EAAEypD,UALE;AAMZtpD,UAAAA,MAAM,EAAEtM,GAAG,CAAC1B;AANA,SAAV,CAPJ;AAeD;AACF;AACF;AACD,SAAO+iD,MAAP;AACD;;AAED,MAAMwU,eAAN,SAA8B7H,gBAA9B,CAA+C;AAC7C96B,EAAAA,aAAa,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAC3BD,IAAAA,IAAI,CAACC,OAAL,GAAe,KAAK8hC,YAAL,CAAkB9hC,OAAlB,CAAf;AACAD,IAAAA,IAAI,CAACgvB,QAAL,GAAgB,KAAKliD,KAAL,CAAWkiD,QAA3B;AACA,QAAI,KAAKzqD,OAAL,CAAa2pD,MAAjB,EAAyBluB,IAAI,CAACkuB,MAAL,GAAcqU,kBAAkB,CAAC,KAAKrU,MAAN,CAAhC;AACzB,WAAO,KAAKzvC,UAAL,CAAgBuhB,IAAhB,EAAsB,MAAtB,CAAP;AACD;;AAED+hC,EAAAA,YAAY,CAAC9hC,OAAD,EAAU90B,GAAG,GAAGxG,OAAO,CAACO,GAAxB,EAA6BsoD,UAAU,GAAG,KAAKjpD,OAAL,CAAaipD,UAAvD,EAAmE;AAC7EvtB,IAAAA,OAAO,CAACutB,UAAR,GAAqBA,UAArB;AACAvtB,IAAAA,OAAO,CAAC0iC,WAAR,GAAsB,KAAKC,yBAAL,EAAtB;AACA,SAAKlmD,cAAL,CAAoBujB,OAApB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyC90B,GAAzC;;AAEA,QAAI,KAAKqY,QAAL,IAAiB,CAAC,KAAKjf,OAAL,CAAawpD,sBAA/B,IAAyD,KAAK7lC,KAAL,CAAWf,gBAAX,CAA4B0qC,IAA5B,GAAmC,CAAhG,EAAmG;AACjG,WAAK,MAAM,CAACvtD,IAAD,CAAX,IAAqBqoD,KAAK,CAAC2I,IAAN,CAAW,KAAKptC,KAAL,CAAWf,gBAAtB,CAArB,EAA8D;AAC5D,cAAMpO,GAAG,GAAG,KAAKmP,KAAL,CAAWf,gBAAX,CAA4B7a,GAA5B,CAAgChI,IAAhC,CAAZ;AACA,aAAKgV,KAAL,CAAWP,GAAX,EAAgB/J,aAAa,CAAC8E,qBAA9B,EAAqDxP,IAArD;AACD;AACF;;AAED,WAAO,KAAKma,UAAL,CAAgBwhB,OAAhB,EAAyB,SAAzB,CAAP;AACD;;AAEDzjB,EAAAA,eAAe,CAAChB,IAAD,EAAO;AACpB,UAAMsb,IAAI,GAAGtb,IAAI,CAACE,UAAlB;AACA,UAAMH,gBAAgB,GAAG,KAAKE,WAAL,CAAiBqb,IAAI,CAAC5rB,KAAtB,EAA6B4rB,IAAI,CAACjqB,GAAL,CAAS3B,KAAtC,CAAzB;AACA,UAAMoQ,SAAS,GAAG,KAAKG,WAAL,CAAiBD,IAAI,CAACtQ,KAAtB,EAA6BsQ,IAAI,CAAC3O,GAAL,CAAS3B,KAAtC,CAAlB;AACA,UAAM2Q,GAAG,GAAG,KAAKtQ,KAAL,CAAWiD,KAAX,CAAiBsoB,IAAI,CAAC5rB,KAAtB,EAA6B4rB,IAAI,CAAC3rB,GAAlC,CAAZ;AACA,UAAMkiB,GAAG,GAAG9R,gBAAgB,CAACnY,KAAjB,GAAyByY,GAAG,CAACrN,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAArC;AACA,SAAKiO,QAAL,CAAclB,gBAAd,EAAgC,KAAhC,EAAuCM,GAAvC;AACA,SAAKY,QAAL,CAAclB,gBAAd,EAAgC,UAAhC,EAA4C8R,GAA5C;AACA/R,IAAAA,SAAS,CAAClY,KAAV,GAAkB,KAAK0Y,YAAL,CAAkBP,gBAAlB,EAAoC,kBAApC,EAAwDub,IAAI,CAAC3rB,GAA7D,EAAkE2rB,IAAI,CAACjqB,GAAL,CAAS1B,GAA3E,CAAlB;AACA,WAAO,KAAK2Q,YAAL,CAAkBR,SAAlB,EAA6B,WAA7B,EAA0CE,IAAI,CAACrQ,GAA/C,EAAoDqQ,IAAI,CAAC3O,GAAL,CAAS1B,GAA7D,CAAP;AACD;;AAEDy3D,EAAAA,yBAAyB,GAAG;AAC1B,QAAI,CAAC,KAAKl3D,KAAL,CAAW/G,OAAO,CAACkC,oBAAnB,CAAL,EAA+C;AAC7C,aAAO,IAAP;AACD;;AAED,UAAMsG,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,IAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAK0J,KAAL,CAAW1J,KAAxB;AACA,SAAK4gB,IAAL;AACA,WAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDmjB,EAAAA,KAAK,CAAC5O,OAAD,EAAU;AACb,QAAI,CAAC,KAAKiO,YAAL,CAAkB,KAAlB,CAAL,EAA+B;AAC7B,aAAO,KAAP;AACD;;AAED,WAAO,KAAKkzC,YAAL,CAAkBnhD,OAAlB,CAAP;AACD;;AAEDmhD,EAAAA,YAAY,CAACnhD,OAAD,EAAU;AACpB,UAAMsC,IAAI,GAAG,KAAKkf,cAAL,EAAb;AACA,UAAM4/B,MAAM,GAAG,KAAKv3D,KAAL,CAAW6uB,UAAX,CAAsBpW,IAAtB,CAAf;;AAEA,QAAI8+C,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAK,EAAhC,EAAoC;AAClC,aAAO,IAAP;AACD;;AAED,QAAIphD,OAAJ,EAAa,OAAO,KAAP;AACb,QAAIohD,MAAM,KAAK,GAAf,EAAoB,OAAO,IAAP;;AAEpB,QAAIngD,iBAAiB,CAACmgD,MAAD,CAArB,EAA+B;AAC7B,UAAI/pD,GAAG,GAAGiL,IAAI,GAAG,CAAjB;;AAEA,aAAOlB,gBAAgB,CAAC,KAAKvX,KAAL,CAAW6uB,UAAX,CAAsBrhB,GAAtB,CAAD,CAAvB,EAAqD;AACnD,UAAEA,GAAF;AACD;;AAED,YAAMwZ,KAAK,GAAG,KAAKhnB,KAAL,CAAWiD,KAAX,CAAiBwV,IAAjB,EAAuBjL,GAAvB,CAAd;AACA,UAAI,CAAC8K,yBAAyB,CAACjB,IAA1B,CAA+B2P,KAA/B,CAAL,EAA4C,OAAO,IAAP;AAC7C;;AAED,WAAO,KAAP;AACD;;AAEDmE,EAAAA,cAAc,CAAChV,OAAD,EAAUiV,QAAV,EAAoB;AAChC,QAAI,KAAKjrB,KAAL,CAAW/G,OAAO,CAACgC,EAAnB,CAAJ,EAA4B;AAC1B,WAAK43D,eAAL,CAAqB,IAArB;AACD;;AAED,WAAO,KAAKhW,qBAAL,CAA2B7mC,OAA3B,EAAoCiV,QAApC,CAAP;AACD;;AAED4xB,EAAAA,qBAAqB,CAAC7mC,OAAD,EAAUiV,QAAV,EAAoB;AACvC,QAAIkvB,SAAS,GAAG,KAAK/4C,KAAL,CAAWiB,IAA3B;AACA,UAAMZ,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,QAAIC,IAAJ;;AAEA,QAAI,KAAK+R,KAAL,CAAW5O,OAAX,CAAJ,EAAyB;AACvBmkC,MAAAA,SAAS,GAAGlhD,OAAO,CAACuE,IAApB;AACAqV,MAAAA,IAAI,GAAG,KAAP;AACD;;AAED,YAAQsnC,SAAR;AACE,WAAKlhD,OAAO,CAACuD,MAAb;AACA,WAAKvD,OAAO,CAAC0D,SAAb;AACE,eAAO,KAAK06D,2BAAL,CAAiC51D,IAAjC,EAAuC04C,SAAS,CAAC9hD,OAAjD,CAAP;;AAEF,WAAKY,OAAO,CAAC2D,SAAb;AACE,eAAO,KAAK06D,sBAAL,CAA4B71D,IAA5B,CAAP;;AAEF,WAAKxI,OAAO,CAAC6D,GAAb;AACE,eAAO,KAAKy6D,gBAAL,CAAsB91D,IAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAACgE,IAAb;AACE,eAAO,KAAKu6D,iBAAL,CAAuB/1D,IAAvB,CAAP;;AAEF,WAAKxI,OAAO,CAACiE,SAAb;AACE,YAAI,KAAK64C,iBAAL,OAA6B,EAAjC,EAAqC;;AAErC,YAAI//B,OAAJ,EAAa;AACX,cAAI,KAAK5U,KAAL,CAAWkW,MAAf,EAAuB;AACrB,iBAAK1J,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAAC6G,cAA3C;AACD,WAFD,MAEO,IAAI6L,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,OAApC,EAA6C;AAClD,iBAAKpI,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACwG,cAA3C;AACD;AACF;;AAED,eAAO,KAAKuwC,sBAAL,CAA4B54C,IAA5B,EAAkC,KAAlC,EAAyC,CAACuU,OAA1C,CAAP;;AAEF,WAAK/c,OAAO,CAAC8E,MAAb;AACE,YAAIiY,OAAJ,EAAa,KAAKsO,UAAL;AACb,eAAO,KAAKg2B,UAAL,CAAgB74C,IAAhB,EAAsB,IAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAACkE,GAAb;AACE,eAAO,KAAKs6D,gBAAL,CAAsBh2D,IAAtB,CAAP;;AAEF,WAAKxI,OAAO,CAACmE,OAAb;AACE,eAAO,KAAKs6D,oBAAL,CAA0Bj2D,IAA1B,CAAP;;AAEF,WAAKxI,OAAO,CAACoE,OAAb;AACE,eAAO,KAAKs6D,oBAAL,CAA0Bl2D,IAA1B,CAAP;;AAEF,WAAKxI,OAAO,CAACqE,MAAb;AACE,eAAO,KAAKs6D,mBAAL,CAAyBn2D,IAAzB,CAAP;;AAEF,WAAKxI,OAAO,CAACsE,IAAb;AACE,eAAO,KAAKs6D,iBAAL,CAAuBp2D,IAAvB,CAAP;;AAEF,WAAKxI,OAAO,CAACwE,MAAb;AACA,WAAKxE,OAAO,CAACuE,IAAb;AACEqV,QAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKzR,KAAL,CAAW1J,KAA1B;;AAEA,YAAIse,OAAO,IAAInD,IAAI,KAAK,KAAxB,EAA+B;AAC7B,eAAKjF,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAAC6H,4BAA3C;AACD;;AAED,eAAO,KAAKovC,iBAAL,CAAuB94C,IAAvB,EAA6BoR,IAA7B,CAAP;;AAEF,WAAK5Z,OAAO,CAACyE,MAAb;AACE,eAAO,KAAKo6D,mBAAL,CAAyBr2D,IAAzB,CAAP;;AAEF,WAAKxI,OAAO,CAAC0E,KAAb;AACE,eAAO,KAAKo6D,kBAAL,CAAwBt2D,IAAxB,CAAP;;AAEF,WAAKxI,OAAO,CAACa,MAAb;AACE,eAAO,KAAK+lD,UAAL,EAAP;;AAEF,WAAK5mD,OAAO,CAACqB,IAAb;AACE,eAAO,KAAK09D,mBAAL,CAAyBv2D,IAAzB,CAAP;;AAEF,WAAKxI,OAAO,CAACiF,OAAb;AACE;AACE,gBAAM+5D,iBAAiB,GAAG,KAAKliB,iBAAL,EAA1B;;AAEA,cAAIkiB,iBAAiB,KAAK,EAAtB,IAA4BA,iBAAiB,KAAK,EAAtD,EAA0D;AACtD;AACD;AACJ;;AAEH,WAAKh/D,OAAO,CAACgF,OAAb;AACE;AACE,cAAI,CAAC,KAAKpF,OAAL,CAAaspD,2BAAd,IAA6C,CAACl3B,QAAlD,EAA4D;AAC1D,iBAAKrd,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAAC0H,sBAA3C;AACD;;AAED,eAAKsN,IAAL;AACA,cAAIoT,MAAJ;;AAEA,cAAIyuB,SAAS,KAAKlhD,OAAO,CAACiF,OAA1B,EAAmC;AACjCwtB,YAAAA,MAAM,GAAG,KAAKjH,WAAL,CAAiBhjB,IAAjB,CAAT;;AAEA,gBAAIiqB,MAAM,CAACrpB,IAAP,KAAgB,mBAAhB,KAAwC,CAACqpB,MAAM,CAAChL,UAAR,IAAsBgL,MAAM,CAAChL,UAAP,KAAsB,OAApF,CAAJ,EAAkG;AAChG,mBAAKrgB,iBAAL,GAAyB,IAAzB;AACD;AACF,WAND,MAMO;AACLqrB,YAAAA,MAAM,GAAG,KAAKvX,WAAL,CAAiB1S,IAAjB,CAAT;;AAEA,gBAAIiqB,MAAM,CAACrpB,IAAP,KAAgB,wBAAhB,KAA6C,CAACqpB,MAAM,CAAC5G,UAAR,IAAsB4G,MAAM,CAAC5G,UAAP,KAAsB,OAAzF,KAAqG4G,MAAM,CAACrpB,IAAP,KAAgB,sBAAhB,KAA2C,CAACqpB,MAAM,CAAC5G,UAAR,IAAsB4G,MAAM,CAAC5G,UAAP,KAAsB,OAAvF,CAArG,IAAwM4G,MAAM,CAACrpB,IAAP,KAAgB,0BAA5N,EAAwP;AACtP,mBAAKhC,iBAAL,GAAyB,IAAzB;AACD;AACF;;AAED,eAAKitB,uBAAL,CAA6B7rB,IAA7B;AACA,iBAAOiqB,MAAP;AACD;;AAEH;AACE;AACE,cAAI,KAAKwsC,eAAL,EAAJ,EAA4B;AAC1B,gBAAIliD,OAAJ,EAAa;AACX,mBAAKpI,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACI,qCAA3C;AACD;;AAED,iBAAK4U,IAAL;AACA,mBAAO,KAAK+hC,sBAAL,CAA4B54C,IAA5B,EAAkC,IAAlC,EAAwC,CAACuU,OAAzC,CAAP;AACD;AACF;AAlHL;;AAqHA,UAAMmiD,SAAS,GAAG,KAAK/2D,KAAL,CAAW1J,KAA7B;AACA,UAAM0zB,IAAI,GAAG,KAAK5I,eAAL,EAAb;;AAEA,QAAI23B,SAAS,KAAKlhD,OAAO,CAACL,IAAtB,IAA8BwyB,IAAI,CAAC/oB,IAAL,KAAc,YAA5C,IAA4D,KAAKkgB,GAAL,CAAStpB,OAAO,CAACsB,KAAjB,CAAhE,EAAyF;AACvF,aAAO,KAAK69D,qBAAL,CAA2B32D,IAA3B,EAAiC02D,SAAjC,EAA4C/sC,IAA5C,EAAkDpV,OAAlD,CAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAKmV,wBAAL,CAA8B1pB,IAA9B,EAAoC2pB,IAApC,CAAP;AACD;AACF;;AAEDkC,EAAAA,uBAAuB,CAAC7rB,IAAD,EAAO;AAC5B,QAAI,CAAC,KAAK5I,OAAL,CAAaspD,2BAAd,IAA6C,CAAC,KAAKrqC,QAAvD,EAAiE;AAC/D,WAAKlK,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuBmN,6BAA6B,CAACE,mBAArD;AACD;AACF;;AAEDkzC,EAAAA,cAAc,CAACt+C,IAAD,EAAO;AACnB,UAAM05C,UAAU,GAAG,KAAK/5C,KAAL,CAAWiiD,cAAX,CAA0B,KAAKjiD,KAAL,CAAWiiD,cAAX,CAA0BtiD,MAA1B,GAAmC,CAA7D,CAAnB;;AAEA,QAAIo6C,UAAU,CAACp6C,MAAf,EAAuB;AACrBU,MAAAA,IAAI,CAAC05C,UAAL,GAAkBA,UAAlB;AACA,WAAKvoB,0BAAL,CAAgCnxB,IAAhC,EAAsC05C,UAAU,CAAC,CAAD,CAAhD;AACA,WAAK/5C,KAAL,CAAWiiD,cAAX,CAA0B,KAAKjiD,KAAL,CAAWiiD,cAAX,CAA0BtiD,MAA1B,GAAmC,CAA7D,IAAkE,EAAlE;AACD;AACF;;AAEDy9C,EAAAA,uBAAuB,GAAG;AACxB,WAAO,KAAKx+C,KAAL,CAAW/G,OAAO,CAAC8E,MAAnB,CAAP;AACD;;AAED80D,EAAAA,eAAe,CAACwF,WAAD,EAAc;AAC3B,UAAMC,wBAAwB,GAAG,KAAKl3D,KAAL,CAAWiiD,cAAX,CAA0B,KAAKjiD,KAAL,CAAWiiD,cAAX,CAA0BtiD,MAA1B,GAAmC,CAA7D,CAAjC;;AAEA,WAAO,KAAKf,KAAL,CAAW/G,OAAO,CAACgC,EAAnB,CAAP,EAA+B;AAC7B,YAAMs9D,SAAS,GAAG,KAAK5J,cAAL,EAAlB;AACA2J,MAAAA,wBAAwB,CAACh3D,IAAzB,CAA8Bi3D,SAA9B;AACD;;AAED,QAAI,KAAKv4D,KAAL,CAAW/G,OAAO,CAACgF,OAAnB,CAAJ,EAAiC;AAC/B,UAAI,CAACo6D,WAAL,EAAkB;AAChB,aAAK/zC,UAAL;AACD;;AAED,UAAI,KAAK/jB,SAAL,CAAe,YAAf,KAAgC,CAAC,KAAKG,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAArC,EAAmG;AACjG,aAAKkN,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACqB,oBAA3C;AACD;AACF,KARD,MAQO,IAAI,CAAC,KAAK65C,uBAAL,EAAL,EAAqC;AAC1C,YAAM,KAAK5wC,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAAC4H,0BAA3C,CAAN;AACD;AACF;;AAEDyjD,EAAAA,cAAc,GAAG;AACf,SAAKzC,eAAL,CAAqB,CAAC,mBAAD,EAAsB,YAAtB,CAArB;AACA,UAAMzqD,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,SAAK0F,IAAL;;AAEA,QAAI,KAAK/X,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,WAAKa,KAAL,CAAWiiD,cAAX,CAA0B/hD,IAA1B,CAA+B,EAA/B;AACA,YAAM+Q,QAAQ,GAAG,KAAKjR,KAAL,CAAW5B,KAA5B;AACA,YAAM8N,QAAQ,GAAG,KAAKlM,KAAL,CAAWkM,QAA5B;AACA,UAAI8d,IAAJ;;AAEA,UAAI,KAAK7I,GAAL,CAAStpB,OAAO,CAACkB,MAAjB,CAAJ,EAA8B;AAC5BixB,QAAAA,IAAI,GAAG,KAAK5I,eAAL,EAAP;AACA,aAAKN,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACD,OAHD,MAGO;AACLgxB,QAAAA,IAAI,GAAG,KAAKtI,eAAL,CAAqB,KAArB,CAAP;;AAEA,eAAO,KAAKP,GAAL,CAAStpB,OAAO,CAACwB,GAAjB,CAAP,EAA8B;AAC5B,gBAAMgH,IAAI,GAAG,KAAKsO,WAAL,CAAiBsC,QAAjB,EAA2B/E,QAA3B,CAAb;AACA7L,UAAAA,IAAI,CAAC2mC,MAAL,GAAchd,IAAd;AACA3pB,UAAAA,IAAI,CAACwnB,QAAL,GAAgB,KAAKnG,eAAL,CAAqB,IAArB,CAAhB;AACArhB,UAAAA,IAAI,CAACqR,QAAL,GAAgB,KAAhB;AACAsY,UAAAA,IAAI,GAAG,KAAKrY,UAAL,CAAgBtR,IAAhB,EAAsB,kBAAtB,CAAP;AACD;AACF;;AAEDA,MAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAKquC,4BAAL,CAAkCjzB,IAAlC,CAAlB;AACA,WAAKhqB,KAAL,CAAWiiD,cAAX,CAA0B1gD,GAA1B;AACD,KAvBD,MAuBO;AACLlB,MAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAKuhD,mBAAL,EAAlB;AACD;;AAED,WAAO,KAAKx+C,UAAL,CAAgBtR,IAAhB,EAAsB,WAAtB,CAAP;AACD;;AAED48C,EAAAA,4BAA4B,CAACjzB,IAAD,EAAO;AACjC,QAAI,KAAK7I,GAAL,CAAStpB,OAAO,CAACkB,MAAjB,CAAJ,EAA8B;AAC5B,YAAMsH,IAAI,GAAG,KAAKoT,eAAL,CAAqBuW,IAArB,CAAb;AACA3pB,MAAAA,IAAI,CAACsS,MAAL,GAAcqX,IAAd;AACA3pB,MAAAA,IAAI,CAACoB,SAAL,GAAiB,KAAK4wB,4BAAL,CAAkCx6B,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACA,WAAK60B,gBAAL,CAAsBxtB,IAAI,CAACoB,SAA3B;AACA,aAAO,KAAKkQ,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED,WAAO2pB,IAAP;AACD;;AAEDisC,EAAAA,2BAA2B,CAAC51D,IAAD,EAAOpJ,OAAP,EAAgB;AACzC,UAAMmgE,OAAO,GAAGngE,OAAO,KAAK,OAA5B;AACA,SAAKigB,IAAL;;AAEA,QAAI,KAAK86B,gBAAL,EAAJ,EAA6B;AAC3B3xC,MAAAA,IAAI,CAACtJ,KAAL,GAAa,IAAb;AACD,KAFD,MAEO;AACLsJ,MAAAA,IAAI,CAACtJ,KAAL,GAAa,KAAK2qB,eAAL,EAAb;AACA,WAAKY,SAAL;AACD;;AAED,SAAKk8B,mBAAL,CAAyBn+C,IAAzB,EAA+BpJ,OAA/B;AACA,WAAO,KAAK0a,UAAL,CAAgBtR,IAAhB,EAAsB+2D,OAAO,GAAG,gBAAH,GAAsB,mBAAnD,CAAP;AACD;;AAED5Y,EAAAA,mBAAmB,CAACn+C,IAAD,EAAOpJ,OAAP,EAAgB;AACjC,UAAMmgE,OAAO,GAAGngE,OAAO,KAAK,OAA5B;AACA,QAAIwJ,CAAJ;;AAEA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKT,KAAL,CAAWgiD,MAAX,CAAkBriD,MAAlC,EAA0C,EAAEc,CAA5C,EAA+C;AAC7C,YAAM42D,GAAG,GAAG,KAAKr3D,KAAL,CAAWgiD,MAAX,CAAkBvhD,CAAlB,CAAZ;;AAEA,UAAIJ,IAAI,CAACtJ,KAAL,IAAc,IAAd,IAAsBsgE,GAAG,CAAC7/D,IAAJ,KAAa6I,IAAI,CAACtJ,KAAL,CAAWS,IAAlD,EAAwD;AACtD,YAAI6/D,GAAG,CAAC5lD,IAAJ,IAAY,IAAZ,KAAqB2lD,OAAO,IAAIC,GAAG,CAAC5lD,IAAJ,KAAa,MAA7C,CAAJ,EAA0D;AAC1D,YAAIpR,IAAI,CAACtJ,KAAL,IAAcqgE,OAAlB,EAA2B;AAC5B;AACF;;AAED,QAAI32D,CAAC,KAAK,KAAKT,KAAL,CAAWgiD,MAAX,CAAkBriD,MAA5B,EAAoC;AAClC,WAAK6M,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAACuC,oBAArC,EAA2DxN,OAA3D;AACD;AACF;;AAEDi/D,EAAAA,sBAAsB,CAAC71D,IAAD,EAAO;AAC3B,SAAK6W,IAAL;AACA,SAAKoL,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDi3D,EAAAA,qBAAqB,GAAG;AACtB,SAAKx2C,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;AACA,UAAMwnB,GAAG,GAAG,KAAKa,eAAL,EAAZ;AACA,SAAKN,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACA,WAAOunB,GAAP;AACD;;AAED41C,EAAAA,gBAAgB,CAAC91D,IAAD,EAAO;AACrB,SAAK6W,IAAL;AACA,SAAKlX,KAAL,CAAWgiD,MAAX,CAAkB9hD,IAAlB,CAAuBg1D,SAAvB;AACA70D,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAKyzD,0BAAL,CAAgC,MAAM,KAAK/qC,cAAL,CAAoB,IAApB,CAAtC,CAAZ;AACA,SAAK5pB,KAAL,CAAWgiD,MAAX,CAAkBzgD,GAAlB;AACA,SAAKuf,MAAL,CAAYjpB,OAAO,CAACyE,MAApB;AACA+D,IAAAA,IAAI,CAACyV,IAAL,GAAY,KAAKwhD,qBAAL,EAAZ;AACA,SAAKn2C,GAAL,CAAStpB,OAAO,CAACqB,IAAjB;AACA,WAAO,KAAKyY,UAAL,CAAgBtR,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED+1D,EAAAA,iBAAiB,CAAC/1D,IAAD,EAAO;AACtB,SAAK6W,IAAL;AACA,SAAKlX,KAAL,CAAWgiD,MAAX,CAAkB9hD,IAAlB,CAAuBg1D,SAAvB;AACA,QAAIqC,OAAO,GAAG,CAAC,CAAf;;AAEA,QAAI,KAAK1H,cAAL,MAAyB,KAAKntC,aAAL,CAAmB,OAAnB,CAA7B,EAA0D;AACxD60C,MAAAA,OAAO,GAAG,KAAKv3D,KAAL,CAAWmM,YAArB;AACD;;AAED,SAAKiP,KAAL,CAAWF,KAAX,CAAiB/D,WAAjB;AACA,SAAK2J,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;;AAEA,QAAI,KAAK6F,KAAL,CAAW/G,OAAO,CAACqB,IAAnB,CAAJ,EAA8B;AAC5B,UAAIq+D,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,aAAKr0C,UAAL,CAAgBq0C,OAAhB;AACD;;AAED,aAAO,KAAKC,QAAL,CAAcn3D,IAAd,EAAoB,IAApB,CAAP;AACD;;AAED,UAAMo3D,aAAa,GAAG,KAAK50C,YAAL,CAAkB,KAAlB,CAAtB;AACA,UAAMW,KAAK,GAAGi0C,aAAa,IAAI,KAAK1B,YAAL,EAA/B;;AAEA,QAAI,KAAKn3D,KAAL,CAAW/G,OAAO,CAACuE,IAAnB,KAA4B,KAAKwC,KAAL,CAAW/G,OAAO,CAACwE,MAAnB,CAA5B,IAA0DmnB,KAA9D,EAAqE;AACnE,YAAMqR,IAAI,GAAG,KAAKrjB,SAAL,EAAb;AACA,YAAMC,IAAI,GAAG+R,KAAK,GAAG,KAAH,GAAW,KAAKxjB,KAAL,CAAW1J,KAAxC;AACA,WAAK4gB,IAAL;AACA,WAAKwgD,QAAL,CAAc7iC,IAAd,EAAoB,IAApB,EAA0BpjB,IAA1B;AACA,WAAKE,UAAL,CAAgBkjB,IAAhB,EAAsB,qBAAtB;;AAEA,UAAI,CAAC,KAAKj2B,KAAL,CAAW/G,OAAO,CAACqF,GAAnB,KAA2B,KAAK2lB,YAAL,CAAkB,IAAlB,CAA5B,KAAwDgS,IAAI,CAAC8iC,YAAL,CAAkBh4D,MAAlB,KAA6B,CAAzF,EAA4F;AAC1F,eAAO,KAAKi4D,UAAL,CAAgBv3D,IAAhB,EAAsBw0B,IAAtB,EAA4B0iC,OAA5B,CAAP;AACD;;AAED,UAAIA,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,aAAKr0C,UAAL,CAAgBq0C,OAAhB;AACD;;AAED,aAAO,KAAKC,QAAL,CAAcn3D,IAAd,EAAoBw0B,IAApB,CAAP;AACD;;AAED,UAAMgjC,uBAAuB,GAAG,KAAKj5D,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4B,CAAC,KAAKwI,KAAL,CAAWo2C,WAAxE;AACA,UAAMzlC,mBAAmB,GAAG,IAAIs7C,gBAAJ,EAA5B;AACA,UAAMp3B,IAAI,GAAG,KAAKzT,eAAL,CAAqB,IAArB,EAA2BzQ,mBAA3B,CAAb;AACA,UAAMmnD,OAAO,GAAG,KAAKj1C,YAAL,CAAkB,IAAlB,CAAhB;;AAEA,QAAIi1C,OAAJ,EAAa;AACX,UAAIL,aAAJ,EAAmB;AACjB,aAAKjrD,KAAL,CAAWqoB,IAAI,CAACz2B,KAAhB,EAAuB8D,aAAa,CAACqC,QAArC;AACD,OAFD,MAEO,IAAIgzD,OAAO,KAAK,CAAC,CAAb,IAAkBM,uBAAlB,IAA6ChjC,IAAI,CAAC5zB,IAAL,KAAc,YAA3D,IAA2E4zB,IAAI,CAACr9B,IAAL,KAAc,OAA7F,EAAsG;AAC3G,aAAKgV,KAAL,CAAWqoB,IAAI,CAACz2B,KAAhB,EAAuB8D,aAAa,CAACoC,UAArC;AACD;AACF;;AAED,QAAIwzD,OAAO,IAAI,KAAKl5D,KAAL,CAAW/G,OAAO,CAACqF,GAAnB,CAAf,EAAwC;AACtC,WAAKmV,YAAL,CAAkBwiB,IAAlB,EAAwB,IAAxB;AACA,YAAMkjC,WAAW,GAAGD,OAAO,GAAG,kBAAH,GAAwB,kBAAnD;AACA,WAAKzpC,SAAL,CAAewG,IAAf,EAAqBkjC,WAArB;AACA,aAAO,KAAKH,UAAL,CAAgBv3D,IAAhB,EAAsBw0B,IAAtB,EAA4B0iC,OAA5B,CAAP;AACD,KALD,MAKO;AACL,WAAKpM,qBAAL,CAA2Bx6C,mBAA3B,EAAgD,IAAhD;AACD;;AAED,QAAI4mD,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,WAAKr0C,UAAL,CAAgBq0C,OAAhB;AACD;;AAED,WAAO,KAAKC,QAAL,CAAcn3D,IAAd,EAAoBw0B,IAApB,CAAP;AACD;;AAEDokB,EAAAA,sBAAsB,CAAC54C,IAAD,EAAO6O,OAAP,EAAgB8oD,mBAAhB,EAAqC;AACzD,SAAK9gD,IAAL;AACA,WAAO,KAAKm6C,aAAL,CAAmBhxD,IAAnB,EAAyBg1D,cAAc,IAAI2C,mBAAmB,GAAG,CAAH,GAAO1C,sBAA9B,CAAvC,EAA8FpmD,OAA9F,CAAP;AACD;;AAEDmnD,EAAAA,gBAAgB,CAACh2D,IAAD,EAAO;AACrB,SAAK6W,IAAL;AACA7W,IAAAA,IAAI,CAACyV,IAAL,GAAY,KAAKwhD,qBAAL,EAAZ;AACAj3D,IAAAA,IAAI,CAACuqB,UAAL,GAAkB,KAAKhB,cAAL,CAAoB,IAApB,CAAlB;AACAvpB,IAAAA,IAAI,CAAC6qB,SAAL,GAAiB,KAAK/J,GAAL,CAAStpB,OAAO,CAAC8D,KAAjB,IAA0B,KAAKiuB,cAAL,CAAoB,IAApB,CAA1B,GAAsD,IAAvE;AACA,WAAO,KAAKjY,UAAL,CAAgBtR,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDi2D,EAAAA,oBAAoB,CAACj2D,IAAD,EAAO;AACzB,QAAI,CAAC,KAAK43C,SAAL,CAAetN,SAAhB,IAA6B,CAAC,KAAKlzC,OAAL,CAAaqpD,0BAA/C,EAA2E;AACzE,WAAKt0C,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACyC,aAA3C;AACD;;AAED,SAAKuS,IAAL;;AAEA,QAAI,KAAK86B,gBAAL,EAAJ,EAA6B;AAC3B3xC,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,IAAhB;AACD,KAFD,MAEO;AACLrnB,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKtG,eAAL,EAAhB;AACA,WAAKkB,SAAL;AACD;;AAED,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDk2D,EAAAA,oBAAoB,CAACl2D,IAAD,EAAO;AACzB,SAAK6W,IAAL;AACA7W,IAAAA,IAAI,CAAC43D,YAAL,GAAoB,KAAKX,qBAAL,EAApB;AACA,UAAMY,KAAK,GAAG73D,IAAI,CAAC63D,KAAL,GAAa,EAA3B;AACA,SAAKp3C,MAAL,CAAYjpB,OAAO,CAACa,MAApB;AACA,SAAKsH,KAAL,CAAWgiD,MAAX,CAAkB9hD,IAAlB,CAAuBi1D,WAAvB;AACA,SAAK/5C,KAAL,CAAWF,KAAX,CAAiB/D,WAAjB;AACA,QAAIghD,GAAJ;;AAEA,SAAK,IAAIC,UAAT,EAAqB,CAAC,KAAKx5D,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAtB,GAAmD;AACjD,UAAI,KAAK+F,KAAL,CAAW/G,OAAO,CAACwD,KAAnB,KAA6B,KAAKuD,KAAL,CAAW/G,OAAO,CAAC4D,QAAnB,CAAjC,EAA+D;AAC7D,cAAM48D,MAAM,GAAG,KAAKz5D,KAAL,CAAW/G,OAAO,CAACwD,KAAnB,CAAf;AACA,YAAI88D,GAAJ,EAAS,KAAKxmD,UAAL,CAAgBwmD,GAAhB,EAAqB,YAArB;AACTD,QAAAA,KAAK,CAACh4D,IAAN,CAAWi4D,GAAG,GAAG,KAAK3mD,SAAL,EAAjB;AACA2mD,QAAAA,GAAG,CAACvtC,UAAJ,GAAiB,EAAjB;AACA,aAAK1T,IAAL;;AAEA,YAAImhD,MAAJ,EAAY;AACVF,UAAAA,GAAG,CAACriD,IAAJ,GAAW,KAAKsL,eAAL,EAAX;AACD,SAFD,MAEO;AACL,cAAIg3C,UAAJ,EAAgB;AACd,iBAAK5rD,KAAL,CAAW,KAAKxM,KAAL,CAAWmM,YAAtB,EAAoCjK,aAAa,CAAC+E,wBAAlD;AACD;;AAEDmxD,UAAAA,UAAU,GAAG,IAAb;AACAD,UAAAA,GAAG,CAACriD,IAAJ,GAAW,IAAX;AACD;;AAED,aAAKgL,MAAL,CAAYjpB,OAAO,CAACsB,KAApB;AACD,OAnBD,MAmBO;AACL,YAAIg/D,GAAJ,EAAS;AACPA,UAAAA,GAAG,CAACvtC,UAAJ,CAAe1qB,IAAf,CAAoB,KAAK0pB,cAAL,CAAoB,IAApB,CAApB;AACD,SAFD,MAEO;AACL,eAAK1G,UAAL;AACD;AACF;AACF;;AAED,SAAK9H,KAAL,CAAWD,IAAX;AACA,QAAIg9C,GAAJ,EAAS,KAAKxmD,UAAL,CAAgBwmD,GAAhB,EAAqB,YAArB;AACT,SAAKjhD,IAAL;AACA,SAAKlX,KAAL,CAAWgiD,MAAX,CAAkBzgD,GAAlB;AACA,WAAO,KAAKoQ,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDm2D,EAAAA,mBAAmB,CAACn2D,IAAD,EAAO;AACxB,SAAK6W,IAAL;;AAEA,QAAI,KAAK9B,qBAAL,EAAJ,EAAkC;AAChC,WAAK5I,KAAL,CAAW,KAAKxM,KAAL,CAAWsM,UAAtB,EAAkCpK,aAAa,CAACgF,iBAAhD;AACD;;AAED7G,IAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKtG,eAAL,EAAhB;AACA,SAAKkB,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDo9C,EAAAA,qBAAqB,GAAG;AACtB,UAAMr0B,KAAK,GAAG,KAAKmH,gBAAL,EAAd;AACA,UAAM+nC,MAAM,GAAGlvC,KAAK,CAACnoB,IAAN,KAAe,YAA9B;AACA,SAAKma,KAAL,CAAWF,KAAX,CAAiBo9C,MAAM,GAAG/gD,kBAAH,GAAwB,CAA/C;AACA,SAAK8W,SAAL,CAAejF,KAAf,EAAsB,cAAtB,EAAsC1Q,YAAtC;AACA,WAAO0Q,KAAP;AACD;;AAEDqtC,EAAAA,iBAAiB,CAACp2D,IAAD,EAAO;AACtB,SAAK6W,IAAL;AACA7W,IAAAA,IAAI,CAAC2jD,KAAL,GAAa,KAAKvF,UAAL,EAAb;AACAp+C,IAAAA,IAAI,CAACk4D,OAAL,GAAe,IAAf;;AAEA,QAAI,KAAK35D,KAAL,CAAW/G,OAAO,CAACyD,MAAnB,CAAJ,EAAgC;AAC9B,YAAMk9D,MAAM,GAAG,KAAKhnD,SAAL,EAAf;AACA,WAAK0F,IAAL;;AAEA,UAAI,KAAKtY,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAAJ,EAAgC;AAC9B,aAAK+nB,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;AACAy/D,QAAAA,MAAM,CAACpvC,KAAP,GAAe,KAAKq0B,qBAAL,EAAf;AACA,aAAK38B,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACD,OAJD,MAIO;AACLw/D,QAAAA,MAAM,CAACpvC,KAAP,GAAe,IAAf;AACA,aAAKhO,KAAL,CAAWF,KAAX,CAAiB/D,WAAjB;AACD;;AAEDqhD,MAAAA,MAAM,CAACt3D,IAAP,GAAc,KAAKyzD,0BAAL,CAAgC,MAAM,KAAKlW,UAAL,CAAgB,KAAhB,EAAuB,KAAvB,CAAtC,CAAd;AACA,WAAKrjC,KAAL,CAAWD,IAAX;AACA9a,MAAAA,IAAI,CAACk4D,OAAL,GAAe,KAAK5mD,UAAL,CAAgB6mD,MAAhB,EAAwB,aAAxB,CAAf;AACD;;AAEDn4D,IAAAA,IAAI,CAACo4D,SAAL,GAAiB,KAAKt3C,GAAL,CAAStpB,OAAO,CAAC+D,QAAjB,IAA6B,KAAK6iD,UAAL,EAA7B,GAAiD,IAAlE;;AAEA,QAAI,CAACp+C,IAAI,CAACk4D,OAAN,IAAiB,CAACl4D,IAAI,CAACo4D,SAA3B,EAAsC;AACpC,WAAKjsD,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAACiF,gBAArC;AACD;;AAED,WAAO,KAAKwK,UAAL,CAAgBtR,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED84C,EAAAA,iBAAiB,CAAC94C,IAAD,EAAOoR,IAAP,EAAa;AAC5B,SAAKyF,IAAL;AACA,SAAKwgD,QAAL,CAAcr3D,IAAd,EAAoB,KAApB,EAA2BoR,IAA3B;AACA,SAAK6Q,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDq2D,EAAAA,mBAAmB,CAACr2D,IAAD,EAAO;AACxB,SAAK6W,IAAL;AACA7W,IAAAA,IAAI,CAACyV,IAAL,GAAY,KAAKwhD,qBAAL,EAAZ;AACA,SAAKt3D,KAAL,CAAWgiD,MAAX,CAAkB9hD,IAAlB,CAAuBg1D,SAAvB;AACA70D,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAKyzD,0BAAL,CAAgC,MAAM,KAAK/qC,cAAL,CAAoB,OAApB,CAAtC,CAAZ;AACA,SAAK5pB,KAAL,CAAWgiD,MAAX,CAAkBzgD,GAAlB;AACA,WAAO,KAAKoQ,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDs2D,EAAAA,kBAAkB,CAACt2D,IAAD,EAAO;AACvB,QAAI,KAAKL,KAAL,CAAWkW,MAAf,EAAuB;AACrB,WAAK1J,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACgH,UAA3C;AACD;;AAED,SAAKgO,IAAL;AACA7W,IAAAA,IAAI,CAAC2mC,MAAL,GAAc,KAAKswB,qBAAL,EAAd;AACAj3D,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAKyzD,0BAAL,CAAgC,MAAM,KAAK/qC,cAAL,CAAoB,MAApB,CAAtC,CAAZ;AACA,WAAO,KAAKjY,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDu2D,EAAAA,mBAAmB,CAACv2D,IAAD,EAAO;AACxB,SAAK6W,IAAL;AACA,WAAO,KAAKvF,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED22D,EAAAA,qBAAqB,CAAC32D,IAAD,EAAO02D,SAAP,EAAkB/sC,IAAlB,EAAwBpV,OAAxB,EAAiC;AACpD,SAAK,MAAM7d,KAAX,IAAoB,KAAKiJ,KAAL,CAAWgiD,MAA/B,EAAuC;AACrC,UAAIjrD,KAAK,CAACS,IAAN,KAAeu/D,SAAnB,EAA8B;AAC5B,aAAKvqD,KAAL,CAAWwd,IAAI,CAAC5rB,KAAhB,EAAuB8D,aAAa,CAACiE,kBAArC,EAAyD4wD,SAAzD;AACD;AACF;;AAED,UAAMtlD,IAAI,GAAG,KAAKzR,KAAL,CAAWiB,IAAX,CAAgBxK,MAAhB,GAAyB,MAAzB,GAAkC,KAAKmI,KAAL,CAAW/G,OAAO,CAACoE,OAAnB,IAA8B,QAA9B,GAAyC,IAAxF;;AAEA,SAAK,IAAIwE,CAAC,GAAG,KAAKT,KAAL,CAAWgiD,MAAX,CAAkBriD,MAAlB,GAA2B,CAAxC,EAA2Cc,CAAC,IAAI,CAAhD,EAAmDA,CAAC,EAApD,EAAwD;AACtD,YAAM1J,KAAK,GAAG,KAAKiJ,KAAL,CAAWgiD,MAAX,CAAkBvhD,CAAlB,CAAd;;AAEA,UAAI1J,KAAK,CAAC2hE,cAAN,KAAyBr4D,IAAI,CAACjC,KAAlC,EAAyC;AACvCrH,QAAAA,KAAK,CAAC2hE,cAAN,GAAuB,KAAK14D,KAAL,CAAW5B,KAAlC;AACArH,QAAAA,KAAK,CAAC0a,IAAN,GAAaA,IAAb;AACD,OAHD,MAGO;AACL;AACD;AACF;;AAED,SAAKzR,KAAL,CAAWgiD,MAAX,CAAkB9hD,IAAlB,CAAuB;AACrB1I,MAAAA,IAAI,EAAEu/D,SADe;AAErBtlD,MAAAA,IAAI,EAAEA,IAFe;AAGrBinD,MAAAA,cAAc,EAAE,KAAK14D,KAAL,CAAW5B;AAHN,KAAvB;AAKAiC,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAK0oB,cAAL,CAAoBhV,OAAO,GAAGA,OAAO,CAAC+G,OAAR,CAAgB,OAAhB,MAA6B,CAAC,CAA9B,GAAkC/G,OAAO,GAAG,OAA5C,GAAsDA,OAAzD,GAAmE,OAA9F,CAAZ;AACA,SAAK5U,KAAL,CAAWgiD,MAAX,CAAkBzgD,GAAlB;AACAlB,IAAAA,IAAI,CAACtJ,KAAL,GAAaizB,IAAb;AACA,WAAO,KAAKrY,UAAL,CAAgBtR,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED0pB,EAAAA,wBAAwB,CAAC1pB,IAAD,EAAO2pB,IAAP,EAAa;AACnC3pB,IAAAA,IAAI,CAACuO,UAAL,GAAkBob,IAAlB;AACA,SAAK1H,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDo+C,EAAAA,UAAU,CAACka,eAAe,GAAG,KAAnB,EAA0BC,qBAAqB,GAAG,IAAlD,EAAwDC,eAAxD,EAAyE;AACjF,UAAMx4D,IAAI,GAAG,KAAKmR,SAAL,EAAb;;AAEA,QAAImnD,eAAJ,EAAqB;AACnB,WAAK34D,KAAL,CAAWmiD,YAAX,CAAwB0B,KAAxB;AACD;;AAED,SAAK/iC,MAAL,CAAYjpB,OAAO,CAACa,MAApB;;AAEA,QAAIkgE,qBAAJ,EAA2B;AACzB,WAAKx9C,KAAL,CAAWF,KAAX,CAAiB/D,WAAjB;AACD;;AAED,SAAKvH,cAAL,CAAoBvP,IAApB,EAA0Bs4D,eAA1B,EAA2C,KAA3C,EAAkD9gE,OAAO,CAACgB,MAA1D,EAAkEggE,eAAlE;;AAEA,QAAID,qBAAJ,EAA2B;AACzB,WAAKx9C,KAAL,CAAWD,IAAX;AACD;;AAED,WAAO,KAAKxJ,UAAL,CAAgBtR,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDkP,EAAAA,gBAAgB,CAACb,IAAD,EAAO;AACrB,WAAOA,IAAI,CAACzN,IAAL,KAAc,qBAAd,IAAuCyN,IAAI,CAACE,UAAL,CAAgB3N,IAAhB,KAAyB,eAAhE,IAAmF,CAACyN,IAAI,CAACE,UAAL,CAAgBC,KAAhB,CAAsBY,aAAjH;AACD;;AAEDG,EAAAA,cAAc,CAACvP,IAAD,EAAOs4D,eAAP,EAAwB9uC,QAAxB,EAAkCxrB,GAAlC,EAAuCw6D,eAAvC,EAAwD;AACpE,UAAM33D,IAAI,GAAGb,IAAI,CAACa,IAAL,GAAY,EAAzB;AACA,UAAM6O,UAAU,GAAG1P,IAAI,CAAC0P,UAAL,GAAkB,EAArC;AACA,SAAK8nC,2BAAL,CAAiC32C,IAAjC,EAAuCy3D,eAAe,GAAG5oD,UAAH,GAAgBhP,SAAtE,EAAiF8oB,QAAjF,EAA2FxrB,GAA3F,EAAgGw6D,eAAhG;AACD;;AAEDhhB,EAAAA,2BAA2B,CAAC32C,IAAD,EAAO6O,UAAP,EAAmB8Z,QAAnB,EAA6BxrB,GAA7B,EAAkCw6D,eAAlC,EAAmD;AAC5E,UAAMja,SAAS,GAAG,KAAK5+C,KAAL,CAAWkW,MAA7B;AACA,QAAI49C,sBAAsB,GAAG,KAA7B;AACA,QAAIgF,kBAAkB,GAAG,KAAzB;;AAEA,WAAO,CAAC,KAAKl6D,KAAL,CAAWP,GAAX,CAAR,EAAyB;AACvB,YAAMqQ,IAAI,GAAG,KAAKkb,cAAL,CAAoB,IAApB,EAA0BC,QAA1B,CAAb;;AAEA,UAAI9Z,UAAU,IAAI,CAAC+oD,kBAAnB,EAAuC;AACrC,YAAI,KAAKvpD,gBAAL,CAAsBb,IAAtB,CAAJ,EAAiC;AAC/B,gBAAMF,SAAS,GAAG,KAAKkB,eAAL,CAAqBhB,IAArB,CAAlB;AACAqB,UAAAA,UAAU,CAAC7P,IAAX,CAAgBsO,SAAhB;;AAEA,cAAI,CAACslD,sBAAD,IAA2BtlD,SAAS,CAAClY,KAAV,CAAgBA,KAAhB,KAA0B,YAAzD,EAAuE;AACrEw9D,YAAAA,sBAAsB,GAAG,IAAzB;AACA,iBAAKlQ,SAAL,CAAe,IAAf;AACD;;AAED;AACD;;AAEDkV,QAAAA,kBAAkB,GAAG,IAArB;AACA,aAAK94D,KAAL,CAAWmiD,YAAX,CAAwB0B,KAAxB;AACD;;AAED3iD,MAAAA,IAAI,CAAChB,IAAL,CAAUwO,IAAV;AACD;;AAED,QAAImqD,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACjoC,IAAhB,CAAqB,IAArB,EAA2BkjC,sBAA3B;AACD;;AAED,QAAI,CAAClV,SAAL,EAAgB;AACd,WAAKgF,SAAL,CAAe,KAAf;AACD;;AAED,SAAK1sC,IAAL;AACD;;AAEDsgD,EAAAA,QAAQ,CAACn3D,IAAD,EAAOw0B,IAAP,EAAa;AACnBx0B,IAAAA,IAAI,CAACw0B,IAAL,GAAYA,IAAZ;AACA,SAAKvS,SAAL,CAAe,KAAf;AACAjiB,IAAAA,IAAI,CAACyV,IAAL,GAAY,KAAKlX,KAAL,CAAW/G,OAAO,CAACqB,IAAnB,IAA2B,IAA3B,GAAkC,KAAKkoB,eAAL,EAA9C;AACA,SAAKkB,SAAL,CAAe,KAAf;AACAjiB,IAAAA,IAAI,CAAC6nD,MAAL,GAAc,KAAKtpD,KAAL,CAAW/G,OAAO,CAACmB,MAAnB,IAA6B,IAA7B,GAAoC,KAAKooB,eAAL,EAAlD;AACA,SAAKN,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACAqH,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAKyzD,0BAAL,CAAgC,MAAM,KAAK/qC,cAAL,CAAoB,KAApB,CAAtC,CAAZ;AACA,SAAKxO,KAAL,CAAWD,IAAX;AACA,SAAKnb,KAAL,CAAWgiD,MAAX,CAAkBzgD,GAAlB;AACA,WAAO,KAAKoQ,UAAL,CAAgBtR,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDu3D,EAAAA,UAAU,CAACv3D,IAAD,EAAOw0B,IAAP,EAAa0iC,OAAb,EAAsB;AAC9B,UAAMwB,OAAO,GAAG,KAAKn6D,KAAL,CAAW/G,OAAO,CAACqF,GAAnB,CAAhB;AACA,SAAKga,IAAL;;AAEA,QAAI6hD,OAAJ,EAAa;AACX,UAAIxB,OAAO,GAAG,CAAC,CAAf,EAAkB,KAAKr0C,UAAL,CAAgBq0C,OAAhB;AACnB,KAFD,MAEO;AACLl3D,MAAAA,IAAI,CAAC24D,KAAL,GAAazB,OAAO,GAAG,CAAC,CAAxB;AACD;;AAED,QAAI1iC,IAAI,CAAC5zB,IAAL,KAAc,qBAAd,IAAuC4zB,IAAI,CAAC8iC,YAAL,CAAkB,CAAlB,EAAqB9iC,IAArB,IAA6B,IAApE,KAA6E,CAACkkC,OAAD,IAAY,KAAK/4D,KAAL,CAAWkW,MAAvB,IAAiC2e,IAAI,CAACpjB,IAAL,KAAc,KAA/C,IAAwDojB,IAAI,CAAC8iC,YAAL,CAAkB,CAAlB,EAAqB5mD,EAArB,CAAwB9P,IAAxB,KAAiC,YAAtK,CAAJ,EAAyL;AACvL,WAAKuL,KAAL,CAAWqoB,IAAI,CAACz2B,KAAhB,EAAuB8D,aAAa,CAACmC,sBAArC,EAA6D00D,OAAO,GAAG,QAAH,GAAc,QAAlF;AACD,KAFD,MAEO,IAAIlkC,IAAI,CAAC5zB,IAAL,KAAc,mBAAlB,EAAuC;AAC5C,WAAKuL,KAAL,CAAWqoB,IAAI,CAACz2B,KAAhB,EAAuB8D,aAAa,CAACuD,UAArC,EAAiD,UAAjD;AACD;;AAEDpF,IAAAA,IAAI,CAAC+uB,IAAL,GAAYyF,IAAZ;AACAx0B,IAAAA,IAAI,CAAC2kB,KAAL,GAAa+zC,OAAO,GAAG,KAAK33C,eAAL,EAAH,GAA4B,KAAKiK,uBAAL,EAAhD;AACA,SAAKvK,MAAL,CAAYjpB,OAAO,CAACmB,MAApB;AACAqH,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAKyzD,0BAAL,CAAgC,MAAM,KAAK/qC,cAAL,CAAoB,KAApB,CAAtC,CAAZ;AACA,SAAKxO,KAAL,CAAWD,IAAX;AACA,SAAKnb,KAAL,CAAWgiD,MAAX,CAAkBzgD,GAAlB;AACA,WAAO,KAAKoQ,UAAL,CAAgBtR,IAAhB,EAAsB04D,OAAO,GAAG,gBAAH,GAAsB,gBAAnD,CAAP;AACD;;AAEDrB,EAAAA,QAAQ,CAACr3D,IAAD,EAAO44D,KAAP,EAAcxnD,IAAd,EAAoB;AAC1B,UAAMkmD,YAAY,GAAGt3D,IAAI,CAACs3D,YAAL,GAAoB,EAAzC;AACA,UAAMuB,YAAY,GAAG,KAAK/5D,SAAL,CAAe,YAAf,CAArB;AACAkB,IAAAA,IAAI,CAACoR,IAAL,GAAYA,IAAZ;;AAEA,aAAS;AACP,YAAM0a,IAAI,GAAG,KAAK3a,SAAL,EAAb;AACA,WAAKkf,UAAL,CAAgBvE,IAAhB,EAAsB1a,IAAtB;;AAEA,UAAI,KAAK0P,GAAL,CAAStpB,OAAO,CAACmC,EAAjB,CAAJ,EAA0B;AACxBmyB,QAAAA,IAAI,CAAC0I,IAAL,GAAYokC,KAAK,GAAG,KAAKvK,0BAAL,EAAH,GAAuC,KAAKrjC,uBAAL,EAAxD;AACD,OAFD,MAEO;AACL,YAAI5Z,IAAI,KAAK,OAAT,IAAoB,EAAE,KAAK7S,KAAL,CAAW/G,OAAO,CAACqF,GAAnB,KAA2B,KAAK2lB,YAAL,CAAkB,IAAlB,CAA7B,CAAxB,EAA+E;AAC7E,cAAI,CAACq2C,YAAL,EAAmB;AACjB,iBAAK1sD,KAAL,CAAW,KAAKxM,KAAL,CAAWsM,UAAtB,EAAkCpK,aAAa,CAACkB,6BAAhD,EAA+E,oBAA/E;AACD;AACF,SAJD,MAIO,IAAI+oB,IAAI,CAACpb,EAAL,CAAQ9P,IAAR,KAAiB,YAAjB,IAAiC,EAAEg4D,KAAK,KAAK,KAAKr6D,KAAL,CAAW/G,OAAO,CAACqF,GAAnB,KAA2B,KAAK2lB,YAAL,CAAkB,IAAlB,CAAhC,CAAP,CAArC,EAAuG;AAC5G,eAAKrW,KAAL,CAAW,KAAKxM,KAAL,CAAWsM,UAAtB,EAAkCpK,aAAa,CAACkB,6BAAhD,EAA+E,0BAA/E;AACD;;AAED+oB,QAAAA,IAAI,CAAC0I,IAAL,GAAY,IAAZ;AACD;;AAED8iC,MAAAA,YAAY,CAACz3D,IAAb,CAAkB,KAAKyR,UAAL,CAAgBwa,IAAhB,EAAsB,oBAAtB,CAAlB;AACA,UAAI,CAAC,KAAKhL,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAAL,EAA8B;AAC/B;;AAED,WAAOoH,IAAP;AACD;;AAEDqwB,EAAAA,UAAU,CAACvE,IAAD,EAAO1a,IAAP,EAAa;AACrB0a,IAAAA,IAAI,CAACpb,EAAL,GAAU,KAAKwf,gBAAL,EAAV;AACA,SAAKlC,SAAL,CAAelC,IAAI,CAACpb,EAApB,EAAwB,sBAAxB,EAAgDU,IAAI,KAAK,KAAT,GAAiBkH,QAAjB,GAA4BD,YAA5E,EAA0F3X,SAA1F,EAAqG0Q,IAAI,KAAK,KAA9G;AACD;;AAED4/C,EAAAA,aAAa,CAAChxD,IAAD,EAAO84D,SAAS,GAAG/D,aAAnB,EAAkClmD,OAAO,GAAG,KAA5C,EAAmD;AAC9D,UAAM0d,WAAW,GAAGusC,SAAS,GAAG9D,cAAhC;AACA,UAAM+D,kBAAkB,GAAGD,SAAS,GAAG7D,sBAAvC;AACA,UAAM+D,SAAS,GAAG,CAAC,CAACzsC,WAAF,IAAiB,EAAEusC,SAAS,GAAG5D,gBAAd,CAAnC;AACA,SAAKtmD,YAAL,CAAkB5O,IAAlB,EAAwB6O,OAAxB;;AAEA,QAAI,KAAKtQ,KAAL,CAAW/G,OAAO,CAACoD,IAAnB,KAA4Bm+D,kBAAhC,EAAoD;AAClD,WAAK5sD,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACsC,iCAA3C;AACD;;AAEDnE,IAAAA,IAAI,CAACuzD,SAAL,GAAiB,KAAKzyC,GAAL,CAAStpB,OAAO,CAACoD,IAAjB,CAAjB;;AAEA,QAAI2xB,WAAJ,EAAiB;AACfvsB,MAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2tC,eAAL,CAAqB2a,SAArB,CAAV;AACD;;AAED,UAAMzf,yBAAyB,GAAG,KAAK55C,KAAL,CAAWouB,sBAA7C;AACA,SAAKpuB,KAAL,CAAWouB,sBAAX,GAAoC,KAApC;AACA,SAAKhT,KAAL,CAAWF,KAAX,CAAiB7D,cAAjB;AACA,SAAK4gC,SAAL,CAAe/8B,KAAf,CAAqB2vB,aAAa,CAAC37B,OAAD,EAAU7O,IAAI,CAACuzD,SAAf,CAAlC;;AAEA,QAAI,CAAChnC,WAAL,EAAkB;AAChBvsB,MAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2tC,eAAL,EAAV;AACD;;AAED,SAAKluB,mBAAL,CAAyBnwB,IAAzB,EAA+B,KAA/B;AACA,SAAKs0D,0BAAL,CAAgC,MAAM;AACpC,WAAKhrC,0BAAL,CAAgCtpB,IAAhC,EAAsCusB,WAAW,GAAG,qBAAH,GAA2B,oBAA5E;AACD,KAFD;AAGA,SAAKqrB,SAAL,CAAe98B,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;;AAEA,QAAIyR,WAAW,IAAI,CAACwsC,kBAApB,EAAwC;AACtC,WAAK9e,2BAAL,CAAiCj6C,IAAjC;AACD;;AAED,SAAKL,KAAL,CAAWouB,sBAAX,GAAoCwrB,yBAApC;AACA,WAAOv5C,IAAP;AACD;;AAEDq+C,EAAAA,eAAe,CAAC2a,SAAD,EAAY;AACzB,WAAOA,SAAS,IAAI,KAAKz6D,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAb,GAAwC,KAAKkqB,eAAL,EAAxC,GAAiE,IAAxE;AACD;;AAED8O,EAAAA,mBAAmB,CAACnwB,IAAD,EAAOowB,cAAP,EAAuB;AACxC,SAAK3P,MAAL,CAAYjpB,OAAO,CAACkB,MAApB;AACA,SAAK+yD,eAAL,CAAqB5wC,KAArB,CAA2BivC,4BAA4B,EAAvD;AACA9pD,IAAAA,IAAI,CAACoM,MAAL,GAAc,KAAKqlC,gBAAL,CAAsBj6C,OAAO,CAACmB,MAA9B,EAAsC,EAAtC,EAA0C,KAA1C,EAAiDy3B,cAAjD,CAAd;AACA,SAAKq7B,eAAL,CAAqB3wC,IAArB;AACD;;AAEDm/B,EAAAA,2BAA2B,CAACj6C,IAAD,EAAO;AAChC,QAAI,CAACA,IAAI,CAAC0Q,EAAV,EAAc;AACd,SAAKqK,KAAL,CAAWC,WAAX,CAAuBhb,IAAI,CAAC0Q,EAAL,CAAQvZ,IAA/B,EAAqC,KAAKwI,KAAL,CAAWkW,MAAX,IAAqB7V,IAAI,CAACuzD,SAA1B,IAAuCvzD,IAAI,CAACsxB,KAA5C,GAAoD,KAAKvW,KAAL,CAAWN,mBAAX,GAAiCnC,QAAjC,GAA4CD,YAAhG,GAA+GE,aAApJ,EAAmKvY,IAAI,CAAC0Q,EAAL,CAAQ3S,KAA3K;AACD;;AAED86C,EAAAA,UAAU,CAAC74C,IAAD,EAAOusB,WAAP,EAAoBC,UAApB,EAAgC;AACxC,SAAK3V,IAAL;AACA,SAAKynC,cAAL,CAAoBt+C,IAApB;AACA,UAAMu+C,SAAS,GAAG,KAAK5+C,KAAL,CAAWkW,MAA7B;AACA,SAAKlW,KAAL,CAAWkW,MAAX,GAAoB,IAApB;AACA,SAAKyW,YAAL,CAAkBtsB,IAAlB,EAAwBusB,WAAxB,EAAqCC,UAArC;AACA,SAAK8B,eAAL,CAAqBtuB,IAArB;AACAA,IAAAA,IAAI,CAACa,IAAL,GAAY,KAAK29C,cAAL,CAAoB,CAAC,CAACx+C,IAAI,CAACoN,UAA3B,EAAuCmxC,SAAvC,CAAZ;AACA,WAAO,KAAKjtC,UAAL,CAAgBtR,IAAhB,EAAsBusB,WAAW,GAAG,kBAAH,GAAwB,iBAAzD,CAAP;AACD;;AAED2B,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAK3vB,KAAL,CAAW/G,OAAO,CAACmC,EAAnB,KAA0B,KAAK4E,KAAL,CAAW/G,OAAO,CAACqB,IAAnB,CAA1B,IAAsD,KAAK0F,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAA7D;AACD;;AAEDy1B,EAAAA,aAAa,GAAG;AACd,WAAO,KAAK1vB,KAAL,CAAW/G,OAAO,CAACkB,MAAnB,CAAP;AACD;;AAEDy1B,EAAAA,sBAAsB,CAAClf,MAAD,EAAS;AAC7B,WAAO,CAACA,MAAM,CAACoC,QAAR,IAAoB,CAACpC,MAAM,CAACiX,MAA5B,KAAuCjX,MAAM,CAACkD,GAAP,CAAWhb,IAAX,KAAoB,aAApB,IAAqC8X,MAAM,CAACkD,GAAP,CAAWlc,KAAX,KAAqB,aAAjG,CAAP;AACD;;AAEDuoD,EAAAA,cAAc,CAAC3C,aAAD,EAAgB0C,SAAhB,EAA2B;AACvC,SAAK8J,UAAL,CAAgBxtC,KAAhB;AACA,UAAMlb,KAAK,GAAG;AACZs5D,MAAAA,cAAc,EAAE,KADJ;AAEZpd,MAAAA;AAFY,KAAd;AAIA,QAAInC,UAAU,GAAG,EAAjB;AACA,UAAM3pC,SAAS,GAAG,KAAKoB,SAAL,EAAlB;AACApB,IAAAA,SAAS,CAAClP,IAAV,GAAiB,EAAjB;AACA,SAAK4f,MAAL,CAAYjpB,OAAO,CAACa,MAApB;AACA,SAAKi8D,0BAAL,CAAgC,MAAM;AACpC,aAAO,CAAC,KAAK/1D,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAR,EAAoC;AAClC,YAAI,KAAKsoB,GAAL,CAAStpB,OAAO,CAACqB,IAAjB,CAAJ,EAA4B;AAC1B,cAAI6gD,UAAU,CAACp6C,MAAX,GAAoB,CAAxB,EAA2B;AACzB,kBAAM,KAAK6M,KAAL,CAAW,KAAKxM,KAAL,CAAWsM,UAAtB,EAAkCpK,aAAa,CAACsB,kBAAhD,CAAN;AACD;;AAED;AACD;;AAED,YAAI,KAAK5E,KAAL,CAAW/G,OAAO,CAACgC,EAAnB,CAAJ,EAA4B;AAC1BkgD,UAAAA,UAAU,CAAC75C,IAAX,CAAgB,KAAKqtD,cAAL,EAAhB;AACA;AACD;;AAED,cAAMxgC,MAAM,GAAG,KAAKvb,SAAL,EAAf;;AAEA,YAAIuoC,UAAU,CAACp6C,MAAf,EAAuB;AACrBotB,UAAAA,MAAM,CAACgtB,UAAP,GAAoBA,UAApB;AACA,eAAKvoB,0BAAL,CAAgCzE,MAAhC,EAAwCgtB,UAAU,CAAC,CAAD,CAAlD;AACAA,UAAAA,UAAU,GAAG,EAAb;AACD;;AAED,aAAKjtB,gBAAL,CAAsB1c,SAAtB,EAAiC2c,MAAjC,EAAyC/sB,KAAzC;;AAEA,YAAI+sB,MAAM,CAACtb,IAAP,KAAgB,aAAhB,IAAiCsb,MAAM,CAACgtB,UAAxC,IAAsDhtB,MAAM,CAACgtB,UAAP,CAAkBp6C,MAAlB,GAA2B,CAArF,EAAwF;AACtF,eAAK6M,KAAL,CAAWugB,MAAM,CAAC3uB,KAAlB,EAAyB8D,aAAa,CAACoB,oBAAvC;AACD;AACF;AACF,KA7BD;AA8BA,SAAKtD,KAAL,CAAWkW,MAAX,GAAoB0oC,SAApB;AACA,SAAK1nC,IAAL;;AAEA,QAAI6iC,UAAU,CAACp6C,MAAf,EAAuB;AACrB,YAAM,KAAK6M,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACmH,iBAA3C,CAAN;AACD;;AAED,SAAKq/C,UAAL,CAAgBvtC,IAAhB;AACA,WAAO,KAAKxJ,UAAL,CAAgBvB,SAAhB,EAA2B,WAA3B,CAAP;AACD;;AAED4c,EAAAA,4BAA4B,CAAC5c,SAAD,EAAY2c,MAAZ,EAAoB;AAC9C,UAAMva,GAAG,GAAG,KAAKkP,eAAL,CAAqB,IAArB,CAAZ;;AAEA,QAAI,KAAK4M,aAAL,EAAJ,EAA0B;AACxB,YAAMhf,MAAM,GAAGyd,MAAf;AACAzd,MAAAA,MAAM,CAACmC,IAAP,GAAc,QAAd;AACAnC,MAAAA,MAAM,CAACoC,QAAP,GAAkB,KAAlB;AACApC,MAAAA,MAAM,CAACkD,GAAP,GAAaA,GAAb;AACAlD,MAAAA,MAAM,CAACiX,MAAP,GAAgB,KAAhB;AACA,WAAKpW,eAAL,CAAqBC,SAArB,EAAgCd,MAAhC,EAAwC,KAAxC,EAA+C,KAA/C,EAAsD,KAAtD,EAA6D,KAA7D;AACA,aAAO,IAAP;AACD,KARD,MAQO,IAAI,KAAKif,eAAL,EAAJ,EAA4B;AACjC,YAAMvc,IAAI,GAAG+a,MAAb;AACA/a,MAAAA,IAAI,CAACN,QAAL,GAAgB,KAAhB;AACAM,MAAAA,IAAI,CAACQ,GAAL,GAAWA,GAAX;AACAR,MAAAA,IAAI,CAACuU,MAAL,GAAc,KAAd;AACAnW,MAAAA,SAAS,CAAClP,IAAV,CAAehB,IAAf,CAAoB,KAAK0R,kBAAL,CAAwBI,IAAxB,CAApB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED8a,EAAAA,gBAAgB,CAAC1c,SAAD,EAAY2c,MAAZ,EAAoB/sB,KAApB,EAA2B;AACzC,UAAMsmB,QAAQ,GAAG,KAAKzD,YAAL,CAAkB,QAAlB,CAAjB;;AAEA,QAAIyD,QAAJ,EAAc;AACZ,UAAI,KAAK0G,4BAAL,CAAkC5c,SAAlC,EAA6C2c,MAA7C,CAAJ,EAA0D;AACxD;AACD;;AAED,UAAI,KAAK5L,GAAL,CAAStpB,OAAO,CAACa,MAAjB,CAAJ,EAA8B;AAC5B,aAAKqjD,qBAAL,CAA2B3rC,SAA3B,EAAsC2c,MAAtC;AACA;AACD;AACF;;AAED,SAAKivB,4BAAL,CAAkC5rC,SAAlC,EAA6C2c,MAA7C,EAAqD/sB,KAArD,EAA4DsmB,QAA5D;AACD;;AAED01B,EAAAA,4BAA4B,CAAC5rC,SAAD,EAAY2c,MAAZ,EAAoB/sB,KAApB,EAA2BsmB,QAA3B,EAAqC;AAC/D,UAAMizC,YAAY,GAAGxsC,MAArB;AACA,UAAMysC,aAAa,GAAGzsC,MAAtB;AACA,UAAM0sC,UAAU,GAAG1sC,MAAnB;AACA,UAAM2sC,WAAW,GAAG3sC,MAApB;AACA,UAAMzd,MAAM,GAAGiqD,YAAf;AACA,UAAMI,YAAY,GAAGJ,YAArB;AACAxsC,IAAAA,MAAM,CAACxG,MAAP,GAAgBD,QAAhB;;AAEA,QAAI,KAAKnF,GAAL,CAAStpB,OAAO,CAACoD,IAAjB,CAAJ,EAA4B;AAC1BqU,MAAAA,MAAM,CAACmC,IAAP,GAAc,QAAd;AACA,YAAMT,aAAa,GAAG,KAAKpS,KAAL,CAAW/G,OAAO,CAACM,WAAnB,CAAtB;AACA,WAAKyhE,qBAAL,CAA2BtqD,MAA3B;;AAEA,UAAI0B,aAAJ,EAAmB;AACjB,aAAK0d,sBAAL,CAA4Bte,SAA5B,EAAuCopD,aAAvC,EAAsD,IAAtD,EAA4D,KAA5D;AACA;AACD;;AAED,UAAI,KAAKhrC,sBAAL,CAA4B+qC,YAA5B,CAAJ,EAA+C;AAC7C,aAAK/sD,KAAL,CAAW+sD,YAAY,CAAC/mD,GAAb,CAAiBpU,KAA5B,EAAmC8D,aAAa,CAACiB,sBAAjD;AACD;;AAED,WAAKgN,eAAL,CAAqBC,SAArB,EAAgCmpD,YAAhC,EAA8C,IAA9C,EAAoD,KAApD,EAA2D,KAA3D,EAAkE,KAAlE;AACA;AACD;;AAED,UAAMnjB,WAAW,GAAG,KAAKp2C,KAAL,CAAWo2C,WAA/B;AACA,UAAM2b,SAAS,GAAG,KAAKnzD,KAAL,CAAW/G,OAAO,CAACM,WAAnB,CAAlB;AACA,UAAMqa,GAAG,GAAG,KAAKonD,qBAAL,CAA2B7sC,MAA3B,CAAZ;AACA,UAAM8sC,QAAQ,GAAGrnD,GAAG,CAACvR,IAAJ,KAAa,YAA9B;AACA,UAAM64D,uBAAuB,GAAG,KAAK95D,KAAL,CAAW5B,KAA3C;AACA,SAAK+9C,4BAAL,CAAkCwd,YAAlC;;AAEA,QAAI,KAAKrrC,aAAL,EAAJ,EAA0B;AACxBhf,MAAAA,MAAM,CAACmC,IAAP,GAAc,QAAd;;AAEA,UAAIsgD,SAAJ,EAAe;AACb,aAAKrjC,sBAAL,CAA4Bte,SAA5B,EAAuCopD,aAAvC,EAAsD,KAAtD,EAA6D,KAA7D;AACA;AACD;;AAED,YAAMlpD,aAAa,GAAG,KAAKke,sBAAL,CAA4B+qC,YAA5B,CAAtB;AACA,UAAIhpD,iBAAiB,GAAG,KAAxB;;AAEA,UAAID,aAAJ,EAAmB;AACjBipD,QAAAA,YAAY,CAAC9nD,IAAb,GAAoB,aAApB;;AAEA,YAAIzR,KAAK,CAACs5D,cAAN,IAAwB,CAAC,KAAKn6D,SAAL,CAAe,YAAf,CAA7B,EAA2D;AACzD,eAAKqN,KAAL,CAAWgG,GAAG,CAACpU,KAAf,EAAsB8D,aAAa,CAAC0B,oBAApC;AACD;;AAED,YAAI0M,aAAa,IAAI,KAAKnR,SAAL,CAAe,YAAf,CAAjB,IAAiD4tB,MAAM,CAAC/Y,QAA5D,EAAsE;AACpE,eAAKxH,KAAL,CAAWgG,GAAG,CAACpU,KAAf,EAAsB8D,aAAa,CAACuF,qBAApC;AACD;;AAEDzH,QAAAA,KAAK,CAACs5D,cAAN,GAAuB,IAAvB;AACA/oD,QAAAA,iBAAiB,GAAGvQ,KAAK,CAACk8C,aAA1B;AACD;;AAED,WAAK/rC,eAAL,CAAqBC,SAArB,EAAgCmpD,YAAhC,EAA8C,KAA9C,EAAqD,KAArD,EAA4DjpD,aAA5D,EAA2EC,iBAA3E;AACD,KA3BD,MA2BO,IAAI,KAAKge,eAAL,EAAJ,EAA4B;AACjC,UAAIwjC,SAAJ,EAAe;AACb,aAAKgI,wBAAL,CAA8B3pD,SAA9B,EAAyCspD,WAAzC;AACD,OAFD,MAEO;AACL,aAAKM,iBAAL,CAAuB5pD,SAAvB,EAAkCqpD,UAAlC;AACD;AACF,KANM,MAMA,IAAII,QAAQ,IAAIrnD,GAAG,CAAChb,IAAJ,KAAa,OAAzB,IAAoC,CAAC4+C,WAArC,IAAoD,CAAC,KAAKpE,gBAAL,EAAzD,EAAkF;AACvF,YAAM3hC,WAAW,GAAG,KAAK8Q,GAAL,CAAStpB,OAAO,CAACoD,IAAjB,CAApB;;AAEA,UAAI0+D,YAAY,CAACjnD,QAAjB,EAA2B;AACzB,aAAKwQ,UAAL,CAAgB42C,uBAAhB;AACD;;AAEDxqD,MAAAA,MAAM,CAACmC,IAAP,GAAc,QAAd;AACA,YAAMsgD,SAAS,GAAG,KAAKnzD,KAAL,CAAW/G,OAAO,CAACM,WAAnB,CAAlB;AACA,WAAKyhE,qBAAL,CAA2BtqD,MAA3B;AACA,WAAK6sC,4BAAL,CAAkCwd,YAAlC;;AAEA,UAAI5H,SAAJ,EAAe;AACb,aAAKrjC,sBAAL,CAA4Bte,SAA5B,EAAuCopD,aAAvC,EAAsDnpD,WAAtD,EAAmE,IAAnE;AACD,OAFD,MAEO;AACL,YAAI,KAAKme,sBAAL,CAA4B+qC,YAA5B,CAAJ,EAA+C;AAC7C,eAAK/sD,KAAL,CAAW+sD,YAAY,CAAC/mD,GAAb,CAAiBpU,KAA5B,EAAmC8D,aAAa,CAACgB,kBAAjD;AACD;;AAED,aAAKiN,eAAL,CAAqBC,SAArB,EAAgCmpD,YAAhC,EAA8ClpD,WAA9C,EAA2D,IAA3D,EAAiE,KAAjE,EAAwE,KAAxE;AACD;AACF,KArBM,MAqBA,IAAIwpD,QAAQ,KAAKrnD,GAAG,CAAChb,IAAJ,KAAa,KAAb,IAAsBgb,GAAG,CAAChb,IAAJ,KAAa,KAAxC,CAAR,IAA0D,CAAC4+C,WAA3D,IAA0E,EAAE,KAAKx3C,KAAL,CAAW/G,OAAO,CAACoD,IAAnB,KAA4B,KAAK+2C,gBAAL,EAA9B,CAA9E,EAAsI;AAC3I1iC,MAAAA,MAAM,CAACmC,IAAP,GAAce,GAAG,CAAChb,IAAlB;AACA,YAAMu6D,SAAS,GAAG,KAAKnzD,KAAL,CAAW/G,OAAO,CAACM,WAAnB,CAAlB;AACA,WAAKyhE,qBAAL,CAA2BL,YAA3B;;AAEA,UAAIxH,SAAJ,EAAe;AACb,aAAKrjC,sBAAL,CAA4Bte,SAA5B,EAAuCopD,aAAvC,EAAsD,KAAtD,EAA6D,KAA7D;AACD,OAFD,MAEO;AACL,YAAI,KAAKhrC,sBAAL,CAA4B+qC,YAA5B,CAAJ,EAA+C;AAC7C,eAAK/sD,KAAL,CAAW+sD,YAAY,CAAC/mD,GAAb,CAAiBpU,KAA5B,EAAmC8D,aAAa,CAACe,qBAAjD;AACD;;AAED,aAAKkN,eAAL,CAAqBC,SAArB,EAAgCmpD,YAAhC,EAA8C,KAA9C,EAAqD,KAArD,EAA4D,KAA5D,EAAmE,KAAnE;AACD;;AAED,WAAKzqC,uBAAL,CAA6ByqC,YAA7B;AACD,KAhBM,MAgBA,IAAI,KAAKvnB,gBAAL,EAAJ,EAA6B;AAClC,UAAI+f,SAAJ,EAAe;AACb,aAAKgI,wBAAL,CAA8B3pD,SAA9B,EAAyCspD,WAAzC;AACD,OAFD,MAEO;AACL,aAAKM,iBAAL,CAAuB5pD,SAAvB,EAAkCqpD,UAAlC;AACD;AACF,KANM,MAMA;AACL,WAAKv2C,UAAL;AACD;AACF;;AAED02C,EAAAA,qBAAqB,CAAC7sC,MAAD,EAAS;AAC5B,UAAM;AACJ9rB,MAAAA,IADI;AAEJ3K,MAAAA,KAFI;AAGJ8H,MAAAA;AAHI,QAIF,KAAK4B,KAJT;;AAMA,QAAI,CAACiB,IAAI,KAAKpJ,OAAO,CAACL,IAAjB,IAAyByJ,IAAI,KAAKpJ,OAAO,CAACK,MAA3C,KAAsD60B,MAAM,CAACxG,MAA7D,IAAuEjwB,KAAK,KAAK,WAArF,EAAkG;AAChG,WAAKkW,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACyG,eAAhC;AACD;;AAED,QAAI1H,IAAI,KAAKpJ,OAAO,CAACM,WAAjB,IAAgC7B,KAAK,KAAK,aAA9C,EAA6D;AAC3D,WAAKkW,KAAL,CAAWpO,KAAX,EAAkB8D,aAAa,CAACc,4BAAhC;AACD;;AAED,WAAO,KAAK+rB,iBAAL,CAAuBhC,MAAvB,EAA+B,IAA/B,CAAP;AACD;;AAEDgvB,EAAAA,qBAAqB,CAAC3rC,SAAD,EAAY2c,MAAZ,EAAoB;AACvC,QAAIktC,kBAAJ;;AAEA,SAAKnb,YAAL,CAAkB,kBAAlB,EAAsC/xB,MAAM,CAAC3uB,KAA7C;AACA,SAAKgd,KAAL,CAAWF,KAAX,CAAiBxD,WAAW,GAAGC,kBAAd,GAAmCH,WAApD;AACA,UAAMg0C,SAAS,GAAG,KAAKxrD,KAAL,CAAWgiD,MAA7B;AACA,SAAKhiD,KAAL,CAAWgiD,MAAX,GAAoB,EAApB;AACA,SAAK/J,SAAL,CAAe/8B,KAAf,CAAqB+uB,KAArB;AACA,UAAM/oC,IAAI,GAAG6rB,MAAM,CAAC7rB,IAAP,GAAc,EAA3B;AACA,SAAK22C,2BAAL,CAAiC32C,IAAjC,EAAuCH,SAAvC,EAAkD,KAAlD,EAAyDlJ,OAAO,CAACgB,MAAjE;AACA,SAAKo/C,SAAL,CAAe98B,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACA,SAAKnb,KAAL,CAAWgiD,MAAX,GAAoBwJ,SAApB;AACAp7C,IAAAA,SAAS,CAAClP,IAAV,CAAehB,IAAf,CAAoB,KAAKyR,UAAL,CAAgBob,MAAhB,EAAwB,aAAxB,CAApB;;AAEA,QAAI,CAACktC,kBAAkB,GAAGltC,MAAM,CAACgtB,UAA7B,KAA4C,IAA5C,IAAoDkgB,kBAAkB,CAACt6D,MAA3E,EAAmF;AACjF,WAAK6M,KAAL,CAAWugB,MAAM,CAAC3uB,KAAlB,EAAyB8D,aAAa,CAACuB,oBAAvC;AACD;AACF;;AAEDu2D,EAAAA,iBAAiB,CAAC5pD,SAAD,EAAY4B,IAAZ,EAAkB;AACjC,QAAI,CAACA,IAAI,CAACN,QAAN,KAAmBM,IAAI,CAACQ,GAAL,CAAShb,IAAT,KAAkB,aAAlB,IAAmCwa,IAAI,CAACQ,GAAL,CAASlc,KAAT,KAAmB,aAAzE,CAAJ,EAA6F;AAC3F,WAAKkW,KAAL,CAAWwF,IAAI,CAACQ,GAAL,CAASpU,KAApB,EAA2B8D,aAAa,CAACa,qBAAzC;AACD;;AAEDqN,IAAAA,SAAS,CAAClP,IAAV,CAAehB,IAAf,CAAoB,KAAK0R,kBAAL,CAAwBI,IAAxB,CAApB;AACD;;AAED+nD,EAAAA,wBAAwB,CAAC3pD,SAAD,EAAY4B,IAAZ,EAAkB;AACxC,UAAM3R,IAAI,GAAG,KAAKyR,yBAAL,CAA+BE,IAA/B,CAAb;AACA5B,IAAAA,SAAS,CAAClP,IAAV,CAAehB,IAAf,CAAoBG,IAApB;AACA,SAAKqoD,UAAL,CAAgBD,kBAAhB,CAAmC,KAAK33C,gBAAL,CAAsBzQ,IAAI,CAACmS,GAA3B,CAAnC,EAAoEsH,mBAApE,EAAyFzZ,IAAI,CAACmS,GAAL,CAASpU,KAAlG;AACD;;AAED+R,EAAAA,eAAe,CAACC,SAAD,EAAYd,MAAZ,EAAoBe,WAApB,EAAiCnB,OAAjC,EAA0CoB,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzFH,IAAAA,SAAS,CAAClP,IAAV,CAAehB,IAAf,CAAoB,KAAKsQ,WAAL,CAAiBlB,MAAjB,EAAyBe,WAAzB,EAAsCnB,OAAtC,EAA+CoB,aAA/C,EAA8DC,iBAA9D,EAAiF,aAAjF,EAAgG,IAAhG,CAApB;AACD;;AAEDme,EAAAA,sBAAsB,CAACte,SAAD,EAAYd,MAAZ,EAAoBe,WAApB,EAAiCnB,OAAjC,EAA0C;AAC9D,UAAM7O,IAAI,GAAG,KAAKmQ,WAAL,CAAiBlB,MAAjB,EAAyBe,WAAzB,EAAsCnB,OAAtC,EAA+C,KAA/C,EAAsD,KAAtD,EAA6D,oBAA7D,EAAmF,IAAnF,CAAb;AACAkB,IAAAA,SAAS,CAAClP,IAAV,CAAehB,IAAf,CAAoBG,IAApB;AACA,UAAMoR,IAAI,GAAGpR,IAAI,CAACoR,IAAL,KAAc,KAAd,GAAsBpR,IAAI,CAACkmB,MAAL,GAAc7M,2BAAd,GAA4CE,6BAAlE,GAAkGvZ,IAAI,CAACoR,IAAL,KAAc,KAAd,GAAsBpR,IAAI,CAACkmB,MAAL,GAAc5M,2BAAd,GAA4CE,6BAAlE,GAAkGC,mBAAjN;AACA,SAAK4uC,UAAL,CAAgBD,kBAAhB,CAAmC,KAAK33C,gBAAL,CAAsBzQ,IAAI,CAACmS,GAA3B,CAAnC,EAAoEf,IAApE,EAA0EpR,IAAI,CAACmS,GAAL,CAASpU,KAAnF;AACD;;AAED+9C,EAAAA,4BAA4B,CAACC,YAAD,EAAe,CAAE;;AAE7CtqC,EAAAA,yBAAyB,CAACzR,IAAD,EAAO;AAC9B,SAAK65D,gBAAL,CAAsB75D,IAAtB;AACA,SAAKiiB,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDuR,EAAAA,kBAAkB,CAACvR,IAAD,EAAO;AACvB,SAAK65D,gBAAL,CAAsB75D,IAAtB;AACA,SAAKiiB,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED65D,EAAAA,gBAAgB,CAAC75D,IAAD,EAAO;AACrB,SAAK+a,KAAL,CAAWF,KAAX,CAAiBxD,WAAW,GAAGF,WAA/B;AACA,SAAKs0C,eAAL,CAAqB5wC,KAArB,CAA2BovC,kBAAkB,EAA7C;AACA,SAAKrS,SAAL,CAAe/8B,KAAf,CAAqB+uB,KAArB;AACA5pC,IAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAK6qB,GAAL,CAAStpB,OAAO,CAACmC,EAAjB,IAAuB,KAAKqxB,uBAAL,EAAvB,GAAwD,IAArE;AACA,SAAKygC,eAAL,CAAqB3wC,IAArB;AACA,SAAK88B,SAAL,CAAe98B,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACD;;AAEDwR,EAAAA,YAAY,CAACtsB,IAAD,EAAOusB,WAAP,EAAoBC,UAApB,EAAgCvR,WAAW,GAAG7C,UAA9C,EAA0D;AACpE,QAAI,KAAK7Z,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5B6I,MAAAA,IAAI,CAAC0Q,EAAL,GAAU,KAAK2Q,eAAL,EAAV;;AAEA,UAAIkL,WAAJ,EAAiB;AACf,aAAKyB,SAAL,CAAehuB,IAAI,CAAC0Q,EAApB,EAAwB,YAAxB,EAAsCuK,WAAtC;AACD;AACF,KAND,MAMO;AACL,UAAIuR,UAAU,IAAI,CAACD,WAAnB,EAAgC;AAC9BvsB,QAAAA,IAAI,CAAC0Q,EAAL,GAAU,IAAV;AACD,OAFD,MAEO;AACL,aAAKmS,UAAL,CAAgB,IAAhB,EAAsBhhB,aAAa,CAACqE,gBAApC;AACD;AACF;AACF;;AAEDooB,EAAAA,eAAe,CAACtuB,IAAD,EAAO;AACpBA,IAAAA,IAAI,CAACoN,UAAL,GAAkB,KAAK0T,GAAL,CAAStpB,OAAO,CAAC+E,QAAjB,IAA6B,KAAKuzD,mBAAL,EAA7B,GAA0D,IAA5E;AACD;;AAEDp9C,EAAAA,WAAW,CAAC1S,IAAD,EAAO;AAChB,UAAM85D,UAAU,GAAG,KAAKjb,gCAAL,CAAsC7+C,IAAtC,CAAnB;AACA,UAAM+5D,iBAAiB,GAAG,CAACD,UAAD,IAAe,KAAKh5C,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAAzC;AACA,UAAMohE,OAAO,GAAGD,iBAAiB,IAAI,KAAK5tC,aAAL,CAAmBnsB,IAAnB,CAArC;AACA,UAAMqsB,YAAY,GAAG2tC,OAAO,IAAI,KAAK5tC,kCAAL,CAAwCpsB,IAAxC,CAAhC;AACA,UAAMi6D,mBAAmB,GAAGF,iBAAiB,KAAK,CAAC1tC,YAAD,IAAiB,KAAKvL,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAAtB,CAA7C;AACA,UAAMshE,cAAc,GAAGJ,UAAU,IAAIE,OAArC;;AAEA,QAAIA,OAAO,IAAI,CAAC3tC,YAAhB,EAA8B;AAC5B,UAAIytC,UAAJ,EAAgB,KAAKj3C,UAAL;AAChB,WAAKqJ,eAAL,CAAqBlsB,IAArB,EAA2B,IAA3B;AACA,aAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED,UAAMm6D,aAAa,GAAG,KAAKC,+BAAL,CAAqCp6D,IAArC,CAAtB;;AAEA,QAAI85D,UAAU,IAAIC,iBAAd,IAAmC,CAACC,OAApC,IAA+C,CAACG,aAAhD,IAAiE9tC,YAAY,IAAI4tC,mBAAhB,IAAuC,CAACE,aAA7G,EAA4H;AAC1H,YAAM,KAAKt3C,UAAL,CAAgB,IAAhB,EAAsBrrB,OAAO,CAACa,MAA9B,CAAN;AACD;;AAED,QAAIgiE,cAAJ;;AAEA,QAAIH,cAAc,IAAIC,aAAtB,EAAqC;AACnCE,MAAAA,cAAc,GAAG,KAAjB;AACA,WAAKnuC,eAAL,CAAqBlsB,IAArB,EAA2Bk6D,cAA3B;AACD,KAHD,MAGO;AACLG,MAAAA,cAAc,GAAG,KAAKC,2BAAL,CAAiCt6D,IAAjC,CAAjB;AACD;;AAED,QAAIk6D,cAAc,IAAIC,aAAlB,IAAmCE,cAAvC,EAAuD;AACrD,WAAKvb,WAAL,CAAiB9+C,IAAjB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,CAAC,CAACA,IAAI,CAAC3C,MAA3C;AACA,aAAO,KAAKiU,UAAL,CAAgBtR,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED,QAAI,KAAK8gB,GAAL,CAAStpB,OAAO,CAAC4D,QAAjB,CAAJ,EAAgC;AAC9B4E,MAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAK+K,4BAAL,EAAnB;AACA,WAAKg1B,WAAL,CAAiB9+C,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B;AACA,aAAO,KAAKsR,UAAL,CAAgBtR,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAED,UAAM,KAAK6iB,UAAL,CAAgB,IAAhB,EAAsBrrB,OAAO,CAACa,MAA9B,CAAN;AACD;;AAED8zB,EAAAA,aAAa,CAACnsB,IAAD,EAAO;AAClB,WAAO,KAAK8gB,GAAL,CAAStpB,OAAO,CAACoD,IAAjB,CAAP;AACD;;AAEDikD,EAAAA,gCAAgC,CAAC7+C,IAAD,EAAO;AACrC,QAAI,KAAK6pB,wBAAL,EAAJ,EAAqC;AACnC,WAAK40B,YAAL,CAAkB,mBAAlB;AACA,YAAMvvB,SAAS,GAAG,KAAK/d,SAAL,EAAlB;AACA+d,MAAAA,SAAS,CAACvc,QAAV,GAAqB,KAAK0O,eAAL,CAAqB,IAArB,CAArB;AACArhB,MAAAA,IAAI,CAAC4S,UAAL,GAAkB,CAAC,KAAKtB,UAAL,CAAgB4d,SAAhB,EAA2B,wBAA3B,CAAD,CAAlB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED9C,EAAAA,kCAAkC,CAACpsB,IAAD,EAAO;AACvC,QAAI,KAAKwiB,YAAL,CAAkB,IAAlB,CAAJ,EAA6B;AAC3B,UAAI,CAACxiB,IAAI,CAAC4S,UAAV,EAAsB5S,IAAI,CAAC4S,UAAL,GAAkB,EAAlB;AACtB,YAAMsc,SAAS,GAAG,KAAK5gB,WAAL,CAAiB,KAAK3O,KAAL,CAAWmM,YAA5B,EAA0C,KAAKnM,KAAL,CAAWoM,eAArD,CAAlB;AACA,WAAK8K,IAAL;AACAqY,MAAAA,SAAS,CAACvc,QAAV,GAAqB,KAAK8c,qBAAL,EAArB;AACAzvB,MAAAA,IAAI,CAAC4S,UAAL,CAAgB/S,IAAhB,CAAqB,KAAKyR,UAAL,CAAgB4d,SAAhB,EAA2B,0BAA3B,CAArB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDkrC,EAAAA,+BAA+B,CAACp6D,IAAD,EAAO;AACpC,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,UAAI,CAAC2H,IAAI,CAAC4S,UAAV,EAAsB5S,IAAI,CAAC4S,UAAL,GAAkB,EAAlB;AACtB5S,MAAAA,IAAI,CAAC4S,UAAL,CAAgB/S,IAAhB,CAAqB,GAAG,KAAKosB,qBAAL,EAAxB;AACAjsB,MAAAA,IAAI,CAAC3C,MAAL,GAAc,IAAd;AACA2C,MAAAA,IAAI,CAAC+e,WAAL,GAAmB,IAAnB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDu7C,EAAAA,2BAA2B,CAACt6D,IAAD,EAAO;AAChC,QAAI,KAAK4pB,4BAAL,EAAJ,EAAyC;AACvC5pB,MAAAA,IAAI,CAAC4S,UAAL,GAAkB,EAAlB;AACA5S,MAAAA,IAAI,CAAC3C,MAAL,GAAc,IAAd;AACA2C,MAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAKgN,sBAAL,CAA4B/rB,IAA5B,CAAnB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDy2D,EAAAA,eAAe,GAAG;AAChB,QAAI,CAAC,KAAKj0C,YAAL,CAAkB,OAAlB,CAAL,EAAiC,OAAO,KAAP;AACjC,UAAM3L,IAAI,GAAG,KAAKkf,cAAL,EAAb;AACA,WAAO,CAAC74B,SAAS,CAACuY,IAAV,CAAe,KAAKrX,KAAL,CAAWiD,KAAX,CAAiB,KAAK1B,KAAL,CAAWiM,GAA5B,EAAiCiL,IAAjC,CAAf,CAAD,IAA2D,KAAK6nC,oBAAL,CAA0B7nC,IAA1B,EAAgC,UAAhC,CAAlE;AACD;;AAEDiT,EAAAA,4BAA4B,GAAG;AAC7B,UAAMH,IAAI,GAAG,KAAKxY,SAAL,EAAb;AACA,UAAMtC,OAAO,GAAG,KAAK4nD,eAAL,EAAhB;;AAEA,QAAI,KAAKl4D,KAAL,CAAW/G,OAAO,CAACiE,SAAnB,KAAiCoT,OAArC,EAA8C;AAC5C,WAAKgI,IAAL;;AAEA,UAAIhI,OAAJ,EAAa;AACX,aAAKgI,IAAL;AACD;;AAED,aAAO,KAAKm6C,aAAL,CAAmBrnC,IAAnB,EAAyBqrC,cAAc,GAAGE,gBAA1C,EAA4DrmD,OAA5D,CAAP;AACD,KARD,MAQO,IAAI,KAAKtQ,KAAL,CAAW/G,OAAO,CAAC8E,MAAnB,CAAJ,EAAgC;AACrC,aAAO,KAAKu8C,UAAL,CAAgBlvB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKprB,KAAL,CAAW/G,OAAO,CAACgC,EAAnB,CAAJ,EAA4B;AACjC,UAAI,KAAKsF,SAAL,CAAe,YAAf,KAAgC,KAAKG,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAApC,EAAkG;AAChG,aAAKkN,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACmB,qBAA3C;AACD;;AAED,WAAKouD,eAAL,CAAqB,KAArB;AACA,aAAO,KAAKvY,UAAL,CAAgBlvB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAAP;AACD,KAPM,MAOA,IAAI,KAAKprB,KAAL,CAAW/G,OAAO,CAACwE,MAAnB,KAA8B,KAAKuC,KAAL,CAAW/G,OAAO,CAACuE,IAAnB,CAA9B,IAA0D,KAAKonB,KAAL,EAA9D,EAA4E;AACjF,YAAM,KAAKhX,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACuI,wBAA3C,CAAN;AACD,KAFM,MAEA;AACL,YAAMkuC,GAAG,GAAG,KAAKttB,uBAAL,EAAZ;AACA,WAAK/I,SAAL;AACA,aAAOq2B,GAAP;AACD;AACF;;AAEDvsB,EAAAA,sBAAsB,CAAC/rB,IAAD,EAAO;AAC3B,WAAO,KAAKupB,cAAL,CAAoB,IAApB,CAAP;AACD;;AAEDM,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAKtrB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5B,YAAMlB,KAAK,GAAG,KAAK0J,KAAL,CAAW1J,KAAzB;;AAEA,UAAIA,KAAK,KAAK,OAAV,IAAqB,CAAC,KAAK0J,KAAL,CAAWo2C,WAAjC,IAAgD9/C,KAAK,KAAK,KAA9D,EAAqE;AACnE,eAAO,KAAP;AACD;;AAED,UAAI,CAACA,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,WAA/B,KAA+C,CAAC,KAAK0J,KAAL,CAAWo2C,WAA/D,EAA4E;AAC1E,cAAMwkB,CAAC,GAAG,KAAKp0C,SAAL,EAAV;;AAEA,YAAIo0C,CAAC,CAAC35D,IAAF,KAAWpJ,OAAO,CAACL,IAAnB,IAA2BojE,CAAC,CAACtkE,KAAF,KAAY,MAAvC,IAAiDskE,CAAC,CAAC35D,IAAF,KAAWpJ,OAAO,CAACa,MAAxE,EAAgF;AAC9E,eAAKoyD,eAAL,CAAqB,CAAC,MAAD,EAAS,YAAT,CAArB;AACA,iBAAO,KAAP;AACD;AACF;AACF,KAfD,MAeO,IAAI,CAAC,KAAKlsD,KAAL,CAAW/G,OAAO,CAAC4D,QAAnB,CAAL,EAAmC;AACxC,aAAO,KAAP;AACD;;AAED,UAAMyb,IAAI,GAAG,KAAKkf,cAAL,EAAb;AACA,UAAMykC,OAAO,GAAG,KAAK9b,oBAAL,CAA0B7nC,IAA1B,EAAgC,MAAhC,CAAhB;;AAEA,QAAI,KAAKzY,KAAL,CAAW6uB,UAAX,CAAsBpW,IAAtB,MAAgC,EAAhC,IAAsC,KAAKtY,KAAL,CAAW/G,OAAO,CAACL,IAAnB,KAA4BqjE,OAAtE,EAA+E;AAC7E,aAAO,IAAP;AACD;;AAED,QAAI,KAAKj8D,KAAL,CAAW/G,OAAO,CAAC4D,QAAnB,KAAgCo/D,OAApC,EAA6C;AAC3C,YAAMC,aAAa,GAAG,KAAKr8D,KAAL,CAAW6uB,UAAX,CAAsB,KAAK2xB,mBAAL,CAAyB/nC,IAAI,GAAG,CAAhC,CAAtB,CAAtB;AACA,aAAO4jD,aAAa,KAAK,EAAlB,IAAwBA,aAAa,KAAK,EAAjD;AACD;;AAED,WAAO,KAAP;AACD;;AAEDvuC,EAAAA,eAAe,CAAClsB,IAAD,EAAOygB,MAAP,EAAe;AAC5B,QAAI,KAAK4B,aAAL,CAAmB,MAAnB,CAAJ,EAAgC;AAC9BriB,MAAAA,IAAI,CAAC3C,MAAL,GAAc,KAAK8hD,iBAAL,EAAd;AACA,WAAKL,WAAL,CAAiB9+C,IAAjB;AACA,YAAM06D,UAAU,GAAG,KAAKC,0BAAL,EAAnB;;AAEA,UAAID,UAAJ,EAAgB;AACd16D,QAAAA,IAAI,CAAC06D,UAAL,GAAkBA,UAAlB;AACD;AACF,KARD,MAQO;AACL,UAAIj6C,MAAJ,EAAY;AACV,aAAKoC,UAAL;AACD,OAFD,MAEO;AACL7iB,QAAAA,IAAI,CAAC3C,MAAL,GAAc,IAAd;AACD;AACF;;AAED,SAAK4kB,SAAL;AACD;;AAED2H,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAKrrB,KAAL,CAAW/G,OAAO,CAACgC,EAAnB,CAAJ,EAA4B;AAC1B,WAAKixD,eAAL,CAAqB,CAAC,YAAD,EAAe,mBAAf,CAArB;;AAEA,UAAI,KAAK3rD,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,YAAI,KAAKG,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAAJ,EAAkE;AAChE,eAAK4jB,UAAL,CAAgB,KAAKljB,KAAL,CAAW5B,KAA3B,EAAkC8D,aAAa,CAACmB,qBAAhD;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WAAO,KAAKrD,KAAL,CAAWiB,IAAX,CAAgBhK,OAAhB,KAA4B,KAA5B,IAAqC,KAAK+I,KAAL,CAAWiB,IAAX,CAAgBhK,OAAhB,KAA4B,OAAjE,IAA4E,KAAK+I,KAAL,CAAWiB,IAAX,CAAgBhK,OAAhB,KAA4B,UAAxG,IAAsH,KAAK+I,KAAL,CAAWiB,IAAX,CAAgBhK,OAAhB,KAA4B,OAAlJ,IAA6J,KAAKusB,KAAL,EAA7J,IAA6K,KAAKszC,eAAL,EAApL;AACD;;AAED3X,EAAAA,WAAW,CAAC9+C,IAAD,EAAO46D,UAAP,EAAmBC,SAAnB,EAA8BC,MAA9B,EAAsC;AAC/C,QAAIF,UAAJ,EAAgB;AACd,UAAIC,SAAJ,EAAe;AACb,aAAK9f,qBAAL,CAA2B/6C,IAA3B,EAAiC,SAAjC;;AAEA,YAAI,KAAKlB,SAAL,CAAe,mBAAf,CAAJ,EAAyC;AACvC,cAAIi8D,kBAAJ;;AAEA,gBAAMh8C,WAAW,GAAG/e,IAAI,CAAC+e,WAAzB;;AAEA,cAAIA,WAAW,CAACne,IAAZ,KAAqB,YAArB,IAAqCme,WAAW,CAAC5nB,IAAZ,KAAqB,MAA1D,IAAoE4nB,WAAW,CAAC/gB,GAAZ,GAAkB+gB,WAAW,CAAChhB,KAA9B,KAAwC,CAA5G,IAAiH,EAAE,CAACg9D,kBAAkB,GAAGh8C,WAAW,CAACvQ,KAAlC,KAA4C,IAA5C,IAAoDusD,kBAAkB,CAAC3rD,aAAzE,CAArH,EAA8M;AAC5M,iBAAKjD,KAAL,CAAW4S,WAAW,CAAChhB,KAAvB,EAA8B8D,aAAa,CAACkC,6BAA5C;AACD;AACF;AACF,OAZD,MAYO,IAAI/D,IAAI,CAAC4S,UAAL,IAAmB5S,IAAI,CAAC4S,UAAL,CAAgBtT,MAAvC,EAA+C;AACpD,aAAK,MAAM4vB,SAAX,IAAwBlvB,IAAI,CAAC4S,UAA7B,EAAyC;AACvC,gBAAM;AACJD,YAAAA;AADI,cAEFuc,SAFJ;AAGA,gBAAM8rC,YAAY,GAAGroD,QAAQ,CAAC/R,IAAT,KAAkB,YAAlB,GAAiC+R,QAAQ,CAACxb,IAA1C,GAAiDwb,QAAQ,CAAC1c,KAA/E;AACA,eAAK8kD,qBAAL,CAA2B7rB,SAA3B,EAAsC8rC,YAAtC;;AAEA,cAAI,CAACF,MAAD,IAAW5rC,SAAS,CAACE,KAAzB,EAAgC;AAC9B,kBAAM;AACJA,cAAAA;AADI,gBAEFF,SAFJ;;AAIA,gBAAIE,KAAK,CAACxuB,IAAN,KAAe,eAAnB,EAAoC;AAClC,mBAAKuL,KAAL,CAAW+iB,SAAS,CAACnxB,KAArB,EAA4B8D,aAAa,CAACiC,qBAA1C,EAAiEsrB,KAAK,CAACn5B,KAAvE,EAA8E+kE,YAA9E;AACD,aAFD,MAEO;AACL,mBAAK/qC,iBAAL,CAAuBb,KAAK,CAACj4B,IAA7B,EAAmCi4B,KAAK,CAACrxB,KAAzC,EAAgD,IAAhD,EAAsD,KAAtD;AACA,mBAAKgd,KAAL,CAAWQ,gBAAX,CAA4B6T,KAA5B;AACD;AACF;AACF;AACF,OArBM,MAqBA,IAAIpvB,IAAI,CAAC+e,WAAT,EAAsB;AAC3B,YAAI/e,IAAI,CAAC+e,WAAL,CAAiBne,IAAjB,KAA0B,qBAA1B,IAAmDZ,IAAI,CAAC+e,WAAL,CAAiBne,IAAjB,KAA0B,kBAAjF,EAAqG;AACnG,gBAAM8P,EAAE,GAAG1Q,IAAI,CAAC+e,WAAL,CAAiBrO,EAA5B;AACA,cAAI,CAACA,EAAL,EAAS,MAAM,IAAI0P,KAAJ,CAAU,mBAAV,CAAN;AACT,eAAK26B,qBAAL,CAA2B/6C,IAA3B,EAAiC0Q,EAAE,CAACvZ,IAApC;AACD,SAJD,MAIO,IAAI6I,IAAI,CAAC+e,WAAL,CAAiBne,IAAjB,KAA0B,qBAA9B,EAAqD;AAC1D,eAAK,MAAMme,WAAX,IAA0B/e,IAAI,CAAC+e,WAAL,CAAiBu4C,YAA3C,EAAyD;AACvD,iBAAKxoD,gBAAL,CAAsBiQ,WAAW,CAACrO,EAAlC;AACD;AACF;AACF;AACF;;AAED,UAAMmmD,wBAAwB,GAAG,KAAKl3D,KAAL,CAAWiiD,cAAX,CAA0B,KAAKjiD,KAAL,CAAWiiD,cAAX,CAA0BtiD,MAA1B,GAAmC,CAA7D,CAAjC;;AAEA,QAAIu3D,wBAAwB,CAACv3D,MAA7B,EAAqC;AACnC,YAAM,KAAK6M,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB8D,aAAa,CAACsI,0BAArC,CAAN;AACD;AACF;;AAED2E,EAAAA,gBAAgB,CAAC9O,IAAD,EAAO;AACrB,QAAIA,IAAI,CAACY,IAAL,KAAc,YAAlB,EAAgC;AAC9B,WAAKm6C,qBAAL,CAA2B/6C,IAA3B,EAAiCA,IAAI,CAAC7I,IAAtC;AACD,KAFD,MAEO,IAAI6I,IAAI,CAACY,IAAL,KAAc,eAAlB,EAAmC;AACxC,WAAK,MAAM+Q,IAAX,IAAmB3R,IAAI,CAACmB,UAAxB,EAAoC;AAClC,aAAK2N,gBAAL,CAAsB6C,IAAtB;AACD;AACF,KAJM,MAIA,IAAI3R,IAAI,CAACY,IAAL,KAAc,cAAlB,EAAkC;AACvC,WAAK,MAAM6sD,IAAX,IAAmBztD,IAAI,CAACC,QAAxB,EAAkC;AAChC,YAAIwtD,IAAJ,EAAU;AACR,eAAK3+C,gBAAL,CAAsB2+C,IAAtB;AACD;AACF;AACF,KANM,MAMA,IAAIztD,IAAI,CAACY,IAAL,KAAc,gBAAlB,EAAoC;AACzC,WAAKkO,gBAAL,CAAsB9O,IAAI,CAAC/J,KAA3B;AACD,KAFM,MAEA,IAAI+J,IAAI,CAACY,IAAL,KAAc,aAAlB,EAAiC;AACtC,WAAKkO,gBAAL,CAAsB9O,IAAI,CAACqnB,QAA3B;AACD,KAFM,MAEA,IAAIrnB,IAAI,CAACY,IAAL,KAAc,mBAAlB,EAAuC;AAC5C,WAAKkO,gBAAL,CAAsB9O,IAAI,CAAC+uB,IAA3B;AACD;AACF;;AAEDgsB,EAAAA,qBAAqB,CAAC/6C,IAAD,EAAO7I,IAAP,EAAa;AAChC,QAAI,KAAKwI,KAAL,CAAWoiD,mBAAX,CAA+BzmC,OAA/B,CAAuCnkB,IAAvC,IAA+C,CAAC,CAApD,EAAuD;AACrD,WAAKgV,KAAL,CAAWnM,IAAI,CAACjC,KAAhB,EAAuB5G,IAAI,KAAK,SAAT,GAAqB0K,aAAa,CAAC2B,sBAAnC,GAA4D3B,aAAa,CAAC4B,eAAjG,EAAkHtM,IAAlH;AACD;;AAED,SAAKwI,KAAL,CAAWoiD,mBAAX,CAA+BliD,IAA/B,CAAoC1I,IAApC;AACD;;AAED80B,EAAAA,qBAAqB,GAAG;AACtB,UAAMgvC,KAAK,GAAG,EAAd;AACA,QAAIjzC,KAAK,GAAG,IAAZ;AACA,SAAKvH,MAAL,CAAYjpB,OAAO,CAACa,MAApB;;AAEA,WAAO,CAAC,KAAKyoB,GAAL,CAAStpB,OAAO,CAACgB,MAAjB,CAAR,EAAkC;AAChC,UAAIwvB,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKvH,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACA,YAAI,KAAKkoB,GAAL,CAAStpB,OAAO,CAACgB,MAAjB,CAAJ,EAA8B;AAC/B;;AAED,YAAMwH,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,MAAAA,IAAI,CAACovB,KAAL,GAAa,KAAKK,qBAAL,EAAb;AACAzvB,MAAAA,IAAI,CAAC2S,QAAL,GAAgB,KAAK0P,aAAL,CAAmB,IAAnB,IAA2B,KAAKoN,qBAAL,EAA3B,GAA0DzvB,IAAI,CAACovB,KAAL,CAAWU,OAAX,EAA1E;AACAmrC,MAAAA,KAAK,CAACp7D,IAAN,CAAW,KAAKyR,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB,CAAX;AACD;;AAED,WAAOi7D,KAAP;AACD;;AAEDxrC,EAAAA,qBAAqB,GAAG;AACtB,QAAI,KAAKlxB,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAJ,EAAgC;AAC9B,YAAMoyB,MAAM,GAAG,KAAKhc,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,eAApC,CAAf;AACA,YAAMilE,SAAS,GAAGjxC,MAAM,CAACh0B,KAAP,CAAasI,KAAb,CAAmB42D,aAAnB,CAAlB;;AAEA,UAAI+F,SAAJ,EAAe;AACb,aAAK/uD,KAAL,CAAW8d,MAAM,CAAClsB,KAAlB,EAAyB8D,aAAa,CAAC6E,gCAAvC,EAAyEw0D,SAAS,CAAC,CAAD,CAAT,CAAajuC,UAAb,CAAwB,CAAxB,EAA2BkuC,QAA3B,CAAoC,EAApC,CAAzE;AACD;;AAED,aAAOlxC,MAAP;AACD;;AAED,WAAO,KAAK5I,eAAL,CAAqB,IAArB,CAAP;AACD;;AAED2B,EAAAA,WAAW,CAAChjB,IAAD,EAAO;AAChBA,IAAAA,IAAI,CAAC4S,UAAL,GAAkB,EAAlB;;AAEA,QAAI,CAAC,KAAKrU,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAL,EAAiC;AAC/B,YAAMiiE,UAAU,GAAG,KAAKzqC,gCAAL,CAAsCrvB,IAAtC,CAAnB;AACA,YAAMo7D,SAAS,GAAG,CAACtB,UAAD,IAAe,KAAKh5C,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAAjC;AACA,YAAMohE,OAAO,GAAGoB,SAAS,IAAI,KAAKnc,6BAAL,CAAmCj/C,IAAnC,CAA7B;AACA,UAAIo7D,SAAS,IAAI,CAACpB,OAAlB,EAA2B,KAAK9a,0BAAL,CAAgCl/C,IAAhC;AAC3B,WAAK6gB,gBAAL,CAAsB,MAAtB;AACD;;AAED7gB,IAAAA,IAAI,CAAC3C,MAAL,GAAc,KAAK8hD,iBAAL,EAAd;AACA,UAAMub,UAAU,GAAG,KAAKC,0BAAL,EAAnB;;AAEA,QAAID,UAAJ,EAAgB;AACd16D,MAAAA,IAAI,CAAC06D,UAAL,GAAkBA,UAAlB;AACD,KAFD,MAEO;AACL,YAAMloD,UAAU,GAAG,KAAK6oD,0BAAL,EAAnB;;AAEA,UAAI7oD,UAAJ,EAAgB;AACdxS,QAAAA,IAAI,CAACwS,UAAL,GAAkBA,UAAlB;AACD;AACF;;AAED,SAAKyP,SAAL;AACA,WAAO,KAAK3Q,UAAL,CAAgBtR,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDm/C,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAAC,KAAK5gD,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAL,EAAiC,KAAKgrB,UAAL;AACjC,WAAO,KAAKxS,aAAL,EAAP;AACD;;AAED2e,EAAAA,wBAAwB,CAAChvB,IAAD,EAAO;AAC7B,WAAO,KAAKzB,KAAL,CAAW/G,OAAO,CAACL,IAAnB,CAAP;AACD;;AAED83B,EAAAA,yBAAyB,CAACjvB,IAAD,EAAOkvB,SAAP,EAAkBtuB,IAAlB,EAAwBuuB,kBAAxB,EAA4C;AACnED,IAAAA,SAAS,CAACE,KAAV,GAAkB,KAAK/N,eAAL,EAAlB;AACA,SAAK2M,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgCD,kBAAhC,EAAoD9W,YAApD;AACArY,IAAAA,IAAI,CAAC4S,UAAL,CAAgB/S,IAAhB,CAAqB,KAAKyR,UAAL,CAAgB4d,SAAhB,EAA2BtuB,IAA3B,CAArB;AACD;;AAED06D,EAAAA,kBAAkB,GAAG;AACnB,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,SAAS,GAAG,IAAIxlD,GAAJ,EAAlB;;AAEA,OAAG;AACD,UAAI,KAAKzX,KAAL,CAAW/G,OAAO,CAACgB,MAAnB,CAAJ,EAAgC;AAC9B;AACD;;AAED,YAAMwH,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACA,YAAMiiD,OAAO,GAAG,KAAKzzD,KAAL,CAAW1J,KAA3B;;AAEA,UAAI,KAAKsI,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAJ,EAAgC;AAC9BmI,QAAAA,IAAI,CAACmS,GAAL,GAAW,KAAKlE,YAAL,CAAkBmlD,OAAlB,EAA2B,eAA3B,CAAX;AACD,OAFD,MAEO;AACLpzD,QAAAA,IAAI,CAACmS,GAAL,GAAW,KAAKkP,eAAL,CAAqB,IAArB,CAAX;AACD;;AAED,WAAKZ,MAAL,CAAYjpB,OAAO,CAACsB,KAApB;;AAEA,UAAIs6D,OAAO,KAAK,MAAhB,EAAwB;AACtB,aAAKjnD,KAAL,CAAWnM,IAAI,CAACmS,GAAL,CAASpU,KAApB,EAA2B8D,aAAa,CAAC0E,gCAAzC,EAA2E6sD,OAA3E;AACD;;AAED,UAAIoI,SAAS,CAACx8D,GAAV,CAAco0D,OAAd,CAAJ,EAA4B;AAC1B,aAAKjnD,KAAL,CAAWnM,IAAI,CAACmS,GAAL,CAASpU,KAApB,EAA2B8D,aAAa,CAAC4E,iCAAzC,EAA4E2sD,OAA5E;AACD;;AAEDoI,MAAAA,SAAS,CAACpmC,GAAV,CAAcg+B,OAAd;;AAEA,UAAI,CAAC,KAAK70D,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAL,EAAiC;AAC/B,cAAM,KAAKgrB,UAAL,CAAgB,KAAKljB,KAAL,CAAW5B,KAA3B,EAAkC8D,aAAa,CAAC2E,2BAAhD,CAAN;AACD;;AAEDxG,MAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAKgY,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,eAApC,CAAb;AACA,WAAKqb,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB;AACAu7D,MAAAA,KAAK,CAAC17D,IAAN,CAAWG,IAAX;AACD,KAjCD,QAiCS,KAAK8gB,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAjCT;;AAmCA,WAAO2iE,KAAP;AACD;;AAEDF,EAAAA,0BAA0B,GAAG;AAC3B,QAAI,KAAK98D,KAAL,CAAW/G,OAAO,CAAC0E,KAAnB,KAA6B,CAAC,KAAK6Y,qBAAL,EAAlC,EAAgE;AAC9D,WAAK0pC,YAAL,CAAkB,kBAAlB;AACA,WAAK5nC,IAAL;AACD,KAHD,MAGO;AACL,UAAI,KAAK/X,SAAL,CAAe,kBAAf,CAAJ,EAAwC,OAAO,EAAP;AACxC,aAAO,IAAP;AACD;;AAED,UAAMy8D,KAAK,GAAG,EAAd;AACA,UAAM/oD,UAAU,GAAG,IAAIwD,GAAJ,EAAnB;;AAEA,OAAG;AACD,YAAMhW,IAAI,GAAG,KAAKmR,SAAL,EAAb;AACAnR,MAAAA,IAAI,CAACmS,GAAL,GAAW,KAAKkP,eAAL,CAAqB,IAArB,CAAX;;AAEA,UAAIrhB,IAAI,CAACmS,GAAL,CAAShb,IAAT,KAAkB,MAAtB,EAA8B;AAC5B,aAAKgV,KAAL,CAAWnM,IAAI,CAACmS,GAAL,CAASpU,KAApB,EAA2B8D,aAAa,CAAC0E,gCAAzC,EAA2EvG,IAAI,CAACmS,GAAL,CAAShb,IAApF;AACD;;AAED,UAAIqb,UAAU,CAACxT,GAAX,CAAegB,IAAI,CAACmS,GAAL,CAAShb,IAAxB,CAAJ,EAAmC;AACjC,aAAKgV,KAAL,CAAWnM,IAAI,CAACmS,GAAL,CAASpU,KAApB,EAA2B8D,aAAa,CAAC4E,iCAAzC,EAA4EzG,IAAI,CAACmS,GAAL,CAAShb,IAArF;AACD;;AAEDqb,MAAAA,UAAU,CAAC4iB,GAAX,CAAep1B,IAAI,CAACmS,GAAL,CAAShb,IAAxB;AACA,WAAKspB,MAAL,CAAYjpB,OAAO,CAACsB,KAApB;;AAEA,UAAI,CAAC,KAAKyF,KAAL,CAAW/G,OAAO,CAACK,MAAnB,CAAL,EAAiC;AAC/B,cAAM,KAAKgrB,UAAL,CAAgB,KAAKljB,KAAL,CAAW5B,KAA3B,EAAkC8D,aAAa,CAAC2E,2BAAhD,CAAN;AACD;;AAEDxG,MAAAA,IAAI,CAAC/J,KAAL,GAAa,KAAKgY,YAAL,CAAkB,KAAKtO,KAAL,CAAW1J,KAA7B,EAAoC,eAApC,CAAb;AACA,WAAKqb,UAAL,CAAgBtR,IAAhB,EAAsB,iBAAtB;AACAu7D,MAAAA,KAAK,CAAC17D,IAAN,CAAWG,IAAX;AACD,KAtBD,QAsBS,KAAK8gB,GAAL,CAAStpB,OAAO,CAACoB,KAAjB,CAtBT;;AAwBA,WAAO2iE,KAAP;AACD;;AAEDZ,EAAAA,0BAA0B,GAAG;AAC3B,QAAI,KAAKn4C,YAAL,CAAkB,QAAlB,KAA+B,CAAC,KAAKzN,qBAAL,EAApC,EAAkE;AAChE,WAAK0pC,YAAL,CAAkB,kBAAlB;AACA,WAAK5nC,IAAL;AACD,KAHD,MAGO;AACL,UAAI,KAAK/X,SAAL,CAAe,kBAAf,CAAJ,EAAwC,OAAO,EAAP;AACxC,aAAO,IAAP;AACD;;AAED,SAAKgiB,GAAL,CAAStpB,OAAO,CAACa,MAAjB;AACA,UAAMkjE,KAAK,GAAG,KAAKD,kBAAL,EAAd;AACA,SAAKx6C,GAAL,CAAStpB,OAAO,CAACgB,MAAjB;AACA,WAAO+iE,KAAP;AACD;;AAEDlsC,EAAAA,gCAAgC,CAACrvB,IAAD,EAAO;AACrC,QAAI,KAAKgvB,wBAAL,CAA8BhvB,IAA9B,CAAJ,EAAyC;AACvC,WAAKivB,yBAAL,CAA+BjvB,IAA/B,EAAqC,KAAKmR,SAAL,EAArC,EAAuD,wBAAvD,EAAiF,0BAAjF;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED8tC,EAAAA,6BAA6B,CAACj/C,IAAD,EAAO;AAClC,QAAI,KAAKzB,KAAL,CAAW/G,OAAO,CAACoD,IAAnB,CAAJ,EAA8B;AAC5B,YAAMs0B,SAAS,GAAG,KAAK/d,SAAL,EAAlB;AACA,WAAK0F,IAAL;AACA,WAAKgK,gBAAL,CAAsB,IAAtB;AACA,WAAKoO,yBAAL,CAA+BjvB,IAA/B,EAAqCkvB,SAArC,EAAgD,0BAAhD,EAA4E,4BAA5E;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDgwB,EAAAA,0BAA0B,CAACl/C,IAAD,EAAO;AAC/B,QAAIgoB,KAAK,GAAG,IAAZ;AACA,SAAKvH,MAAL,CAAYjpB,OAAO,CAACa,MAApB;;AAEA,WAAO,CAAC,KAAKyoB,GAAL,CAAStpB,OAAO,CAACgB,MAAjB,CAAR,EAAkC;AAChC,UAAIwvB,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,YAAI,KAAKlH,GAAL,CAAStpB,OAAO,CAACsB,KAAjB,CAAJ,EAA6B;AAC3B,gBAAM,KAAKqT,KAAL,CAAW,KAAKxM,KAAL,CAAW5B,KAAtB,EAA6B8D,aAAa,CAACyB,sBAA3C,CAAN;AACD;;AAED,aAAKmd,MAAL,CAAYjpB,OAAO,CAACoB,KAApB;AACA,YAAI,KAAKkoB,GAAL,CAAStpB,OAAO,CAACgB,MAAjB,CAAJ,EAA8B;AAC/B;;AAED,WAAK82B,oBAAL,CAA0BtvB,IAA1B;AACD;AACF;;AAEDsvB,EAAAA,oBAAoB,CAACtvB,IAAD,EAAO;AACzB,UAAMkvB,SAAS,GAAG,KAAK/d,SAAL,EAAlB;AACA+d,IAAAA,SAAS,CAACW,QAAV,GAAqB,KAAKJ,qBAAL,EAArB;;AAEA,QAAI,KAAKpN,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B6M,MAAAA,SAAS,CAACE,KAAV,GAAkB,KAAK/N,eAAL,EAAlB;AACD,KAFD,MAEO;AACL,YAAM;AACJwO,QAAAA;AADI,UAEFX,SAFJ;;AAIA,UAAIW,QAAQ,CAACjvB,IAAT,KAAkB,eAAtB,EAAuC;AACrC,cAAM,KAAKuL,KAAL,CAAW+iB,SAAS,CAACnxB,KAArB,EAA4B8D,aAAa,CAAC0C,qBAA1C,EAAiEsrB,QAAQ,CAAC55B,KAA1E,CAAN;AACD;;AAED,WAAKg6B,iBAAL,CAAuBJ,QAAQ,CAAC14B,IAAhC,EAAsC+3B,SAAS,CAACnxB,KAAhD,EAAuD,IAAvD,EAA6D,IAA7D;AACAmxB,MAAAA,SAAS,CAACE,KAAV,GAAkBS,QAAQ,CAACC,OAAT,EAAlB;AACD;;AAED,SAAK9B,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgC,kBAAhC,EAAoD/W,YAApD;AACArY,IAAAA,IAAI,CAAC4S,UAAL,CAAgB/S,IAAhB,CAAqB,KAAKyR,UAAL,CAAgB4d,SAAhB,EAA2B,iBAA3B,CAArB;AACD;;AAEDd,EAAAA,WAAW,CAACrF,KAAD,EAAQ;AACjB,WAAOA,KAAK,CAACnoB,IAAN,KAAe,YAAf,IAA+BmoB,KAAK,CAAC5xB,IAAN,KAAe,MAArD;AACD;;AAxqD4C;;AA4qD/C,MAAMskE,MAAN,SAAqBlG,eAArB,CAAqC;AACnC9+D,EAAAA,WAAW,CAACW,OAAD,EAAUgH,KAAV,EAAiB;AAC1BhH,IAAAA,OAAO,GAAG6pD,UAAU,CAAC7pD,OAAD,CAApB;AACA,UAAMA,OAAN,EAAegH,KAAf;AACA,SAAKhH,OAAL,GAAeA,OAAf;AACA,SAAK8zD,gBAAL;AACA,SAAKnsD,OAAL,GAAe28D,UAAU,CAAC,KAAKtkE,OAAL,CAAa2H,OAAd,CAAzB;AACA,SAAKd,QAAL,GAAgB7G,OAAO,CAACkpD,cAAxB;AACD;;AAEDxgC,EAAAA,eAAe,GAAG;AAChB,WAAOhG,YAAP;AACD;;AAED4R,EAAAA,KAAK,GAAG;AACN,SAAKggC,kBAAL;AACA,UAAM74B,IAAI,GAAG,KAAK1hB,SAAL,EAAb;AACA,UAAM2hB,OAAO,GAAG,KAAK3hB,SAAL,EAAhB;AACA,SAAKuhB,SAAL;AACAG,IAAAA,IAAI,CAAClmB,MAAL,GAAc,IAAd;AACA,SAAKimB,aAAL,CAAmBC,IAAnB,EAAyBC,OAAzB;AACAD,IAAAA,IAAI,CAAClmB,MAAL,GAAc,KAAKhN,KAAL,CAAWgN,MAAzB;AACA,WAAOkmB,IAAP;AACD;;AAvBkC;;AA2BrC,SAAS6oC,UAAT,CAAoB38D,OAApB,EAA6B;AAC3B,QAAM48D,SAAS,GAAG,IAAI1kE,GAAJ,EAAlB;;AAEA,OAAK,MAAMiI,MAAX,IAAqBH,OAArB,EAA8B;AAC5B,UAAM,CAAC5H,IAAD,EAAOC,OAAP,IAAkBooD,KAAK,CAACC,OAAN,CAAcvgD,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,EAAS,EAAT,CAAzD;AACA,QAAI,CAACy8D,SAAS,CAAC38D,GAAV,CAAc7H,IAAd,CAAL,EAA0BwkE,SAAS,CAACrkE,GAAV,CAAcH,IAAd,EAAoBC,OAAO,IAAI,EAA/B;AAC3B;;AAED,SAAOukE,SAAP;AACD;;AAED,SAASjwC,KAAT,CAAettB,KAAf,EAAsBhH,OAAtB,EAA+B;AAC7B,MAAIwkE,QAAJ;;AAEA,MAAI,CAAC,CAACA,QAAQ,GAAGxkE,OAAZ,KAAwB,IAAxB,GAA+B,KAAK,CAApC,GAAwCwkE,QAAQ,CAACvb,UAAlD,MAAkE,aAAtE,EAAqF;AACnFjpD,IAAAA,OAAO,GAAGtB,MAAM,CAAC8D,MAAP,CAAc,EAAd,EAAkBxC,OAAlB,CAAV;;AAEA,QAAI;AACFA,MAAAA,OAAO,CAACipD,UAAR,GAAqB,QAArB;AACA,YAAMyL,MAAM,GAAG+P,SAAS,CAACzkE,OAAD,EAAUgH,KAAV,CAAxB;AACA,YAAM09D,GAAG,GAAGhQ,MAAM,CAACpgC,KAAP,EAAZ;;AAEA,UAAIogC,MAAM,CAACltD,iBAAX,EAA8B;AAC5B,eAAOk9D,GAAP;AACD;;AAED,UAAIhQ,MAAM,CAACjtD,2BAAX,EAAwC;AACtC,YAAI;AACFzH,UAAAA,OAAO,CAACipD,UAAR,GAAqB,QAArB;AACA,iBAAOwb,SAAS,CAACzkE,OAAD,EAAUgH,KAAV,CAAT,CAA0BstB,KAA1B,EAAP;AACD,SAHD,CAGE,OAAO5d,OAAP,EAAgB,CAAE;AACrB,OALD,MAKO;AACLguD,QAAAA,GAAG,CAAChpC,OAAJ,CAAYutB,UAAZ,GAAyB,QAAzB;AACD;;AAED,aAAOyb,GAAP;AACD,KAnBD,CAmBE,OAAOC,WAAP,EAAoB;AACpB,UAAI;AACF3kE,QAAAA,OAAO,CAACipD,UAAR,GAAqB,QAArB;AACA,eAAOwb,SAAS,CAACzkE,OAAD,EAAUgH,KAAV,CAAT,CAA0BstB,KAA1B,EAAP;AACD,OAHD,CAGE,OAAOswC,QAAP,EAAiB,CAAE;;AAErB,YAAMD,WAAN;AACD;AACF,GA9BD,MA8BO;AACL,WAAOF,SAAS,CAACzkE,OAAD,EAAUgH,KAAV,CAAT,CAA0BstB,KAA1B,EAAP;AACD;AACF;;AACD,SAAS3K,eAAT,CAAyB3iB,KAAzB,EAAgChH,OAAhC,EAAyC;AACvC,QAAM00D,MAAM,GAAG+P,SAAS,CAACzkE,OAAD,EAAUgH,KAAV,CAAxB;;AAEA,MAAI0tD,MAAM,CAAC10D,OAAP,CAAeypD,UAAnB,EAA+B;AAC7BiL,IAAAA,MAAM,CAACnsD,KAAP,CAAakW,MAAb,GAAsB,IAAtB;AACD;;AAED,SAAOi2C,MAAM,CAACrO,aAAP,EAAP;AACD;;AAED,SAASoe,SAAT,CAAmBzkE,OAAnB,EAA4BgH,KAA5B,EAAmC;AACjC,MAAI+8C,GAAG,GAAGsgB,MAAV;;AAEA,MAAIrkE,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAAC2H,OAA/B,EAAwC;AACtC8gD,IAAAA,eAAe,CAACzoD,OAAO,CAAC2H,OAAT,CAAf;AACAo8C,IAAAA,GAAG,GAAG8gB,cAAc,CAAC7kE,OAAO,CAAC2H,OAAT,CAApB;AACD;;AAED,SAAO,IAAIo8C,GAAJ,CAAQ/jD,OAAR,EAAiBgH,KAAjB,CAAP;AACD;;AAED,MAAM89D,gBAAgB,GAAG,EAAzB;;AAEA,SAASD,cAAT,CAAwBE,kBAAxB,EAA4C;AAC1C,QAAMC,UAAU,GAAGjc,gBAAgB,CAACpB,MAAjB,CAAwB5nD,IAAI,IAAI2H,SAAS,CAACq9D,kBAAD,EAAqBhlE,IAArB,CAAzC,CAAnB;AACA,QAAMgb,GAAG,GAAGiqD,UAAU,CAACrc,IAAX,CAAgB,GAAhB,CAAZ;AACA,MAAI5E,GAAG,GAAG+gB,gBAAgB,CAAC/pD,GAAD,CAA1B;;AAEA,MAAI,CAACgpC,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAGsgB,MAAN;;AAEA,SAAK,MAAMv8D,MAAX,IAAqBk9D,UAArB,EAAiC;AAC/BjhB,MAAAA,GAAG,GAAG+E,YAAY,CAAChhD,MAAD,CAAZ,CAAqBi8C,GAArB,CAAN;AACD;;AAED+gB,IAAAA,gBAAgB,CAAC/pD,GAAD,CAAhB,GAAwBgpC,GAAxB;AACD;;AAED,SAAOA,GAAP;AACD;;AAEDnlD,OAAO,CAAC01B,KAAR,GAAgBA,KAAhB;AACA11B,OAAO,CAAC+qB,eAAR,GAA0BA,eAA1B;AACA/qB,OAAO,CAACqmE,QAAR,GAAmB7kE,OAAnB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = (superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types$1.num:\n      case types$1.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types$1.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types$1.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types$1.decimal:\n        return this.estreeParseDecimalLiteral(this.state.value);\n\n      case types$1._null:\n        return this.estreeParseLiteral(null);\n\n      case types$1._true:\n        return this.estreeParseLiteral(true);\n\n      case types$1._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseMaybePrivateName(...args) {\n    const node = super.parseMaybePrivateName(...args);\n\n    if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    return node;\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n});\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = void 0;\n    this.isExpr = void 0;\n    this.preserveSpace = void 0;\n    this.override = void 0;\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\nconst types = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes$1.parenR.updateContext = types$1.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes$1.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types$1.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types$1._function && prevType !== types$1._class) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n};\n\ntypes$1.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.dollarBraceL.updateContext = function () {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n  this.state.context.push(statementParens ? types.parenStatement : types.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.incDec.updateContext = function () {};\n\ntypes$1._function.updateContext = types$1._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types$1.semi && prevType !== types$1._else && !(prevType === types$1._return && this.hasPrecedingLineBreak()) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes$1.backQuote.updateContext = function () {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes$1.braceHashL.updateContext = function () {\n  this.state.context.push(types.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.flags = void 0;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inStaticBlock() {\n    return (this.currentThisScope().flags & SCOPE_STATIC_BLOCK) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = [];\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.includes(name) && (scope.lexical.includes(name) || scope.functions.includes(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].declareFunctions.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types$1.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types$1.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types$1.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types$1.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types$1.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types$1.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types$1.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(types$1.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types$1._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types$1._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types$1._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types$1.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types$1._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types$1.braceL);\n\n    while (!this.match(types$1.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types$1._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types$1.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types$1._export);\n\n    if (this.eat(types$1._default)) {\n      if (this.match(types$1._function) || this.match(types$1._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n          node = this.parseExport(node);\n\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n          return node;\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types$1.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types$1.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types$1.eq)) {\n      this.eat(types$1.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types$1.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types$1.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types$1.bracketR);\n    this.expect(types$1.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types$1.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1._this)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(types$1.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types$1.braceBarL)) {\n      this.expect(types$1.braceBarL);\n      endDelim = types$1.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types$1.braceL);\n      endDelim = types$1.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types$1.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types$1.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types$1.ellipsis)) {\n      const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types$1.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types$1.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types$1.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types$1.bracketR)) break;\n      this.expect(types$1.comma);\n    }\n\n    this.expect(types$1.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === types$1._this;\n\n    if (lh.type === types$1.colon || lh.type === types$1.question) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(types$1.question)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(types$1._this)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types$1.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types$1.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types$1.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types$1.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types$1.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types$1.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(types$1.parenR);\n          this.expect(types$1.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types$1.parenL:\n        this.next();\n\n        if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          if (this.match(types$1.name) || this.match(types$1._this)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types$1.question && token !== types$1.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n            this.expect(types$1.parenR);\n            return type;\n          } else {\n            this.eat(types$1.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(types$1.parenR);\n        this.expect(types$1.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types$1._true:\n      case types$1._false:\n        node.value = this.match(types$1._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types$1.num)) {\n            return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          if (this.match(types$1.bigint)) {\n            return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types$1._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types$1._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types$1._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types$1.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(types$1.questionDot);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(types$1.bracketL);\n\n      if (!optional && this.match(types$1.bracketR)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(types$1.bracketR);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types$1.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types$1.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types$1.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types$1.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types$1.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types$1.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types$1.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types$1.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types$1.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(types$1.name, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types$1.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(types$1.questionDot, 2);\n      }\n\n      return this.finishOp(types$1.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types$1.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types$1.comma));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types$1.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types$1.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(types$1.eq) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types$1._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types$1.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentLoc = this.state.start;\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      if (firstIdent.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n      }\n\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types$1.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n\n        if (arrowExpression.type !== \"ArrowFunctionExpression\" && (_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) {\n          abort();\n        }\n\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types$1.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types$1.parenL);\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types$1.parenL);\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types$1.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types$1.comma) || this.match(types$1.braceR);\n\n    switch (this.state.type) {\n      case types$1.num:\n        {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1.string:\n        {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1._true:\n      case types$1._false:\n        {\n          const literal = this.parseBooleanLiteral();\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(types$1.braceR)) {\n      if (this.eat(types$1.ellipsis)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types$1.braceR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types$1.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types$1.braceL);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  updateContext(prevType) {\n    if (this.match(types$1.name) && this.state.value === \"of\" && prevType === types$1.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n      this.state.exprAllowed = false;\n    } else {\n      super.updateContext(prevType);\n    }\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\", false);\ntypes.j_cTag = new TokContext(\"</tag\", false);\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = function () {\n  this.state.context.push(types.j_expr);\n  this.state.context.push(types.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes$1.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types$1.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types$1.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types$1.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types$1.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types$1.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types$1.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types$1.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types$1.jsxTagStart:\n      case types$1.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types$1.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.braceL)) {\n      this.expect(types$1.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types$1.slash);\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types$1.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types$1.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types$1.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types$1.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types$1.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types$1.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types$1.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types$1.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types$1.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types$1.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types$1.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types.j_oTag) {\n        this.state.context.push(types.braceExpression);\n      } else if (curContext === types.j_expr) {\n        this.state.context.push(types.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types$1.slash) && prevType === types$1.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n});\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types$1.name);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types$1.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types$1.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types$1.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types$1.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types$1.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types$1.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types$1.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types$1.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types$1._import);\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types$1.parenR);\n\n    if (this.eat(types$1.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types$1.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n\n    if (this.match(types$1._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types$1._extends);\n    node.default = this.tsEatThenParseType(types$1.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types$1._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types$1.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types$1.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types$1.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n      this.expect(types$1.semi);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types$1.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types$1.name) && this.match(types$1.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types$1.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types$1.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types$1.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(types$1.colon, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types$1._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types$1.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types$1.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types$1.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types$1.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types$1._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types$1._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types$1.braceL);\n\n    if (this.match(types$1.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types$1.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types$1.bracketR);\n\n    if (this.match(types$1.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types$1.question);\n    } else if (this.eat(types$1.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types$1.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types$1.question);\n    const labeled = this.eat(types$1.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types$1.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(types$1.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types$1.num:\n        case types$1.bigint:\n        case types$1.string:\n        case types$1._true:\n        case types$1._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types$1.name:\n      case types$1._void:\n      case types$1._null:\n        {\n          const type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types$1.string:\n      case types$1.num:\n      case types$1.bigint:\n      case types$1._true:\n      case types$1._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types$1._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types$1._typeof:\n        return this.tsParseTypeQuery();\n\n      case types$1._import:\n        return this.tsParseImportType();\n\n      case types$1.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types$1.bracketL:\n        return this.tsParseTupleType();\n\n      case types$1.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types$1.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n      if (this.match(types$1.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types$1.name) || this.match(types$1._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types$1.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types$1.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n        return true;\n      }\n\n      if (this.match(types$1.parenR)) {\n        this.next();\n\n        if (this.match(types$1.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types$1._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types$1.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types$1.name) && !this.match(types$1._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types$1.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types$1.question);\n    node.trueType = this.tsParseType();\n    this.expect(types$1.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types$1._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types$1._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types$1.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types$1.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types$1.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types$1.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types$1.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types$1.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types$1.eq);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case types$1._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types$1._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types$1._const:\n          if (this.match(types$1._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types$1._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types$1.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types$1.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types$1.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types$1.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types$1.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types$1.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers !== undefined) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      if (allowModifiers === false && (accessibility || readonly)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types$1.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = false;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types$1.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types$1.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(types$1.name) && ahead.type === types$1.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types$1._import)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types$1.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types$1._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types$1.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types$1._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  parseClassMember(classBody, member, state) {\n    const invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n    const callParseClassMemberWithIsStatic = () => {\n      const isStatic = !!member.static;\n\n      if (isStatic && this.eat(types$1.braceL)) {\n        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types$1.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types$1.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types$1.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types$1.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(types$1.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types$1.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types$1.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types$1.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types$1._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types$1._class);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n});\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types$1.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types$1.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types$1.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types$1.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types$1.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types$1.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types$1.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types$1.modulo);\n\n      if (this.match(types$1.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types$1.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext != null && curContext.preserveSpace)) this.skipSpace();\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types$1.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types$1.braceHashL);\n      } else {\n        this.finishToken(types$1.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1());\n    } else {\n      this.finishOp(types$1.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types$1.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types$1.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types$1.star : types$1.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types$1.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types$1.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types$1.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types$1.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types$1.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types$1.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types$1.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types$1.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types$1.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types$1.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(types$1.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types$1.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types$1.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types$1.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types$1.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types$1.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types$1.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types$1.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types$1.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types$1.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types$1.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types$1.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types$1.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types$1.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.codePointAtPos(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types$1.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    this.finishToken(types$1.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types$1.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types$1.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types$1.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types$1.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types$1.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types$1.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || types$1.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types.functionExpression || parent === types.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types$1.colon && (parent === types.braceStatement || parent === types.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types$1._return || prevType === types$1.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {\n      return true;\n    }\n\n    if (prevType === types$1.braceL) {\n      return parent === types.braceStatement;\n    }\n\n    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {\n      return false;\n    }\n\n    if (prevType === types$1.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types$1.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types$1.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types$1.name);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.end, this.nextTokenStart()));\n  }\n\n  isLineTerminator() {\n    return this.eat(types$1.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.state.exportedIdentifiers;\n    this.state.exportedIdentifiers = [];\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.state.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types$1.braceL:\n        return this.parseObjectLike(types$1.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n      }\n\n      if (allowEmpty && this.match(types$1.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types$1.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types$1.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types$1.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types$1.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types$1.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types$1.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types$1.parenL) || this.match(types$1.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types$1.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types$1.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types$1.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === types$1.logicalOR || op === types$1.logicalAND;\n        const coalesce = op === types$1.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types$1.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types$1.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(types$1.exponent)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n      return this.parseModuleExpression();\n    }\n\n    const update = this.match(types$1.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types$1._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types$1._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types$1.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types$1.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types$1.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types$1.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types$1.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(types$1.privateName) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types$1.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types$1.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types$1._super:\n        return this.parseSuper();\n\n      case types$1._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types$1.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types$1.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types$1._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types$1.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types$1._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types$1.name)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(id);\n              } else {\n                return id;\n              }\n            } else if (this.match(types$1._do)) {\n              return this.parseDo(true);\n            }\n          }\n\n          if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types$1._do:\n        {\n          return this.parseDo(false);\n        }\n\n      case types$1.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types$1.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types$1._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types$1._true:\n      case types$1._false:\n        return this.parseBooleanLiteral();\n\n      case types$1.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types$1.bracketBarL:\n      case types$1.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types$1.bracketL:\n        {\n          return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types$1.braceBarL:\n      case types$1.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n        }\n\n      case types$1.braceL:\n        {\n          return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n        }\n\n      case types$1._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types$1.at:\n        this.parseDecorators();\n\n      case types$1._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types$1._new:\n        return this.parseNewOrNewTarget();\n\n      case types$1.backQuote:\n        return this.parseTemplate(false);\n\n      case types$1.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types$1.privateName:\n        {\n          const start = this.state.start;\n          const value = this.state.value;\n          node = this.parsePrivateName();\n\n          if (this.match(types$1._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(value, node.start);\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, value);\n          } else {\n            throw this.unexpected(start);\n          }\n\n          return node;\n        }\n\n      case types$1.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      case types$1.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    const node = this.startNode();\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types$1._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types$1.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types$1.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types$1.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types$1.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types$1.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types$1.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types$1.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types$1.parenL)) {\n      const args = this.parseExprList(types$1.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types$1.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.exprAllowed = false;\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types$1.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types$1.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types$1.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types$1.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types$1.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types$1.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types$1.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== types$1.privateName) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types$1.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types$1.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types$1.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types$1.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types$1.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types$1._class || type === types$1._function) && (curContext === types.functionStatement || curContext === types.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types$1.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types$1.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n\n    if (this.match(types$1.semi) || !this.match(types$1.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types$1.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(types$1.braceL);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, types$1.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(types$1.braceR);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types$1.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types$1.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types$1._break:\n      case types$1._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types$1._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types$1._do:\n        return this.parseDoStatement(node);\n\n      case types$1._for:\n        return this.parseForStatement(node);\n\n      case types$1._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types$1._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types$1._if:\n        return this.parseIfStatement(node);\n\n      case types$1._return:\n        return this.parseReturnStatement(node);\n\n      case types$1._switch:\n        return this.parseSwitchStatement(node);\n\n      case types$1._throw:\n        return this.parseThrowStatement(node);\n\n      case types$1._try:\n        return this.parseTryStatement(node);\n\n      case types$1._const:\n      case types$1._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types$1._while:\n        return this.parseWhileStatement(node);\n\n      case types$1._with:\n        return this.parseWithStatement(node);\n\n      case types$1.braceL:\n        return this.parseBlock();\n\n      case types$1.semi:\n        return this.parseEmptyStatement(node);\n\n      case types$1._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n        }\n\n      case types$1._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types$1._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types$1._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types$1.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types$1._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types$1.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types$1.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types$1.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types$1.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types$1.parenL);\n    const val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types$1.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types$1._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(types$1._in)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types$1.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types$1.braceR);) {\n      if (this.match(types$1._case) || this.match(types$1._default)) {\n        const isCase = this.match(types$1._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types$1.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types$1._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL)) {\n        this.expect(types$1.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types$1.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types$1.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types$1.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types$1._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types$1.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types$1.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types$1.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types$1.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types$1.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types$1.braceR)) {\n        if (this.eat(types$1.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types$1.star)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const isPrivate = this.match(types$1.privateName);\n    const key = this.parseClassElementName(member);\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types$1.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types$1.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === types$1.privateName && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types$1.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types$1._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types$1.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types$1.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types$1.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types$1._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types$1._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types$1._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types$1._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types$1.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type === \"StringLiteral\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types$1.string)) {\n      const result = this.parseLiteral(this.state.value, \"StringLiteral\");\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types$1.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types$1.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types$1.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types$1.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types$1.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (this.match(types$1.string)) {\n        node.key = this.parseLiteral(keyName, \"StringLiteral\");\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types$1.colon);\n\n      if (keyName !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n      }\n\n      if (attrNames.has(keyName)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types$1.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types$1.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types$1.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types$1.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}